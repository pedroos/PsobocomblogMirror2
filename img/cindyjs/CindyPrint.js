(function(){
'use strict';var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX="jscomp_symbol_";$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.Symbol=function(){var a=0;return function(b){return $jscomp.SYMBOL_PREFIX+(b||"")+a++}}();
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var b=0;return $jscomp.iteratorPrototype(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();$jscomp.initSymbol();$jscomp.initSymbolIterator();var b=a[Symbol.iterator];return b?b.call(a):$jscomp.arrayIterator(a)};
$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var g=a[d];g in c||(c[g]={});c=c[g]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};$jscomp.FORCE_POLYFILL_PROMISE=!1;
$jscomp.polyfill("Promise",function(a){function b(){this.batch_=null}function c(a){return a instanceof g?a:new g(function(b,e){b(a)})}if(a&&!$jscomp.FORCE_POLYFILL_PROMISE)return a;b.prototype.asyncExecute=function(a){null==this.batch_&&(this.batch_=[],this.asyncExecuteBatch_());this.batch_.push(a);return this};b.prototype.asyncExecuteBatch_=function(){var a=this;this.asyncExecuteFunction(function(){a.executeBatch_()})};var d=$jscomp.global.setTimeout;b.prototype.asyncExecuteFunction=function(a){d(a,
0)};b.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var a=this.batch_;this.batch_=[];for(var b=0;b<a.length;++b){var k=a[b];a[b]=null;try{k()}catch(h){this.asyncThrow_(h)}}}this.batch_=null};b.prototype.asyncThrow_=function(a){this.asyncExecuteFunction(function(){throw a;})};var g=function(a){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];var b=this.createResolveAndReject_();try{a(b.resolve,b.reject)}catch(k){b.reject(k)}};g.prototype.createResolveAndReject_=
function(){function a(a){return function(e){k||(k=!0,a.call(b,e))}}var b=this,k=!1;return{resolve:a(this.resolveTo_),reject:a(this.reject_)}};g.prototype.resolveTo_=function(a){if(a===this)this.reject_(new TypeError("A Promise cannot resolve to itself"));else if(a instanceof g)this.settleSameAsPromise_(a);else{a:switch(typeof a){case "object":var b=null!=a;break a;case "function":b=!0;break a;default:b=!1}b?this.resolveToNonPromiseObj_(a):this.fulfill_(a)}};g.prototype.resolveToNonPromiseObj_=function(a){var b=
void 0;try{b=a.then}catch(k){this.reject_(k);return}"function"==typeof b?this.settleSameAsThenable_(b,a):this.fulfill_(a)};g.prototype.reject_=function(a){this.settle_(2,a)};g.prototype.fulfill_=function(a){this.settle_(1,a)};g.prototype.settle_=function(a,b){if(0!=this.state_)throw Error("Cannot settle("+a+", "+b+"): Promise already settled in state"+this.state_);this.state_=a;this.result_=b;this.executeOnSettledCallbacks_()};g.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var a=
0;a<this.onSettledCallbacks_.length;++a)f.asyncExecute(this.onSettledCallbacks_[a]);this.onSettledCallbacks_=null}};var f=new b;g.prototype.settleSameAsPromise_=function(a){var b=this.createResolveAndReject_();a.callWhenSettled_(b.resolve,b.reject)};g.prototype.settleSameAsThenable_=function(a,b){var e=this.createResolveAndReject_();try{a.call(b,e.resolve,e.reject)}catch(h){e.reject(h)}};g.prototype.then=function(a,b){function e(a,b){return"function"==typeof a?function(b){try{h(a(b))}catch(v){c(v)}}:
b}var h,c,d=new g(function(a,b){h=a;c=b});this.callWhenSettled_(e(a,h),e(b,c));return d};g.prototype.catch=function(a){return this.then(void 0,a)};g.prototype.callWhenSettled_=function(a,b){function e(){switch(h.state_){case 1:a(h.result_);break;case 2:b(h.result_);break;default:throw Error("Unexpected state: "+h.state_);}}var h=this;null==this.onSettledCallbacks_?f.asyncExecute(e):this.onSettledCallbacks_.push(e)};g.resolve=c;g.reject=function(a){return new g(function(b,e){e(a)})};g.race=function(a){return new g(function(b,
e){for(var h=$jscomp.makeIterator(a),k=h.next();!k.done;k=h.next())c(k.value).callWhenSettled_(b,e)})};g.all=function(a){var b=$jscomp.makeIterator(a),e=b.next();return e.done?c([]):new g(function(a,k){function h(b){return function(h){d[b]=h;f--;0==f&&a(d)}}var d=[],f=0;do d.push(void 0),f++,c(e.value).callWhenSettled_(h(d.length-1),k),e=b.next();while(!e.done)})};return g},"es6","es3");$jscomp.underscoreProtoCanBeSet=function(){var a={a:!0},b={};try{return b.__proto__=a,b.a}catch(c){}return!1};
$jscomp.setPrototypeOf="function"==typeof Object.setPrototypeOf?Object.setPrototypeOf:$jscomp.underscoreProtoCanBeSet()?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null;$jscomp.generator={};$jscomp.generator.ensureIteratorResultIsObject_=function(a){if(!(a instanceof Object))throw new TypeError("Iterator result "+a+" is not an object");};
$jscomp.generator.Context=function(){this.isRunning_=!1;this.yieldAllIterator_=null;this.yieldResult=void 0;this.nextAddress=1;this.finallyAddress_=this.catchAddress_=0;this.finallyContexts_=this.abruptCompletion_=null};$jscomp.generator.Context.prototype.start_=function(){if(this.isRunning_)throw new TypeError("Generator is already running");this.isRunning_=!0};$jscomp.generator.Context.prototype.stop_=function(){this.isRunning_=!1};
$jscomp.generator.Context.prototype.jumpToErrorHandler_=function(){this.nextAddress=this.catchAddress_||this.finallyAddress_};$jscomp.generator.Context.prototype.next_=function(a){this.yieldResult=a};$jscomp.generator.Context.prototype.throw_=function(a){this.abruptCompletion_={exception:a,isException:!0};this.jumpToErrorHandler_()};$jscomp.generator.Context.prototype.return=function(a){this.abruptCompletion_={return:a};this.nextAddress=this.finallyAddress_};
$jscomp.generator.Context.prototype.jumpThroughFinallyBlocks=function(a){this.abruptCompletion_={jumpTo:a};this.nextAddress=this.finallyAddress_};$jscomp.generator.Context.prototype.yield=function(a,b){this.nextAddress=b;return{value:a}};$jscomp.generator.Context.prototype.yieldAll=function(a,b){a=$jscomp.makeIterator(a);var c=a.next();$jscomp.generator.ensureIteratorResultIsObject_(c);if(c.done)this.yieldResult=c.value,this.nextAddress=b;else return this.yieldAllIterator_=a,this.yield(c.value,b)};
$jscomp.generator.Context.prototype.jumpTo=function(a){this.nextAddress=a};$jscomp.generator.Context.prototype.jumpToEnd=function(){this.nextAddress=0};$jscomp.generator.Context.prototype.setCatchFinallyBlocks=function(a,b){this.catchAddress_=a;void 0!=b&&(this.finallyAddress_=b)};$jscomp.generator.Context.prototype.setFinallyBlock=function(a){this.catchAddress_=0;this.finallyAddress_=a||0};$jscomp.generator.Context.prototype.leaveTryBlock=function(a,b){this.nextAddress=a;this.catchAddress_=b||0};
$jscomp.generator.Context.prototype.enterCatchBlock=function(a){this.catchAddress_=a||0;a=this.abruptCompletion_.exception;this.abruptCompletion_=null;return a};$jscomp.generator.Context.prototype.enterFinallyBlock=function(a,b,c){c?this.finallyContexts_[c]=this.abruptCompletion_:this.finallyContexts_=[this.abruptCompletion_];this.catchAddress_=a||0;this.finallyAddress_=b||0};
$jscomp.generator.Context.prototype.leaveFinallyBlock=function(a,b){b=this.finallyContexts_.splice(b||0)[0];if(b=this.abruptCompletion_=this.abruptCompletion_||b){if(b.isException)return this.jumpToErrorHandler_();void 0!=b.jumpTo&&this.finallyAddress_<b.jumpTo?(this.nextAddress=b.jumpTo,this.abruptCompletion_=null):this.nextAddress=this.finallyAddress_}else this.nextAddress=a};$jscomp.generator.Context.prototype.forIn=function(a){return new $jscomp.generator.Context.PropertyIterator(a)};
$jscomp.generator.Context.PropertyIterator=function(a){this.object_=a;this.properties_=[];for(var b in a)this.properties_.push(b);this.properties_.reverse()};$jscomp.generator.Context.PropertyIterator.prototype.getNext=function(){for(;0<this.properties_.length;){var a=this.properties_.pop();if(a in this.object_)return a}return null};$jscomp.generator.Engine_=function(a){this.context_=new $jscomp.generator.Context;this.program_=a};
$jscomp.generator.Engine_.prototype.next_=function(a){this.context_.start_();if(this.context_.yieldAllIterator_)return this.yieldAllStep_(this.context_.yieldAllIterator_.next,a,this.context_.next_);this.context_.next_(a);return this.nextStep_()};
$jscomp.generator.Engine_.prototype.return_=function(a){this.context_.start_();var b=this.context_.yieldAllIterator_;if(b)return this.yieldAllStep_("return"in b?b["return"]:function(a){return{value:a,done:!0}},a,this.context_.return);this.context_.return(a);return this.nextStep_()};
$jscomp.generator.Engine_.prototype.throw_=function(a){this.context_.start_();if(this.context_.yieldAllIterator_)return this.yieldAllStep_(this.context_.yieldAllIterator_["throw"],a,this.context_.next_);this.context_.throw_(a);return this.nextStep_()};
$jscomp.generator.Engine_.prototype.yieldAllStep_=function(a,b,c){try{var d=a.call(this.context_.yieldAllIterator_,b);$jscomp.generator.ensureIteratorResultIsObject_(d);if(!d.done)return this.context_.stop_(),d;var g=d.value}catch(f){return this.context_.yieldAllIterator_=null,this.context_.throw_(f),this.nextStep_()}this.context_.yieldAllIterator_=null;c.call(this.context_,g);return this.nextStep_()};
$jscomp.generator.Engine_.prototype.nextStep_=function(){for(;this.context_.nextAddress;)try{var a=this.program_(this.context_);if(a)return this.context_.stop_(),{value:a.value,done:!1}}catch(b){this.context_.yieldResult=void 0,this.context_.throw_(b)}this.context_.stop_();if(this.context_.abruptCompletion_){a=this.context_.abruptCompletion_;this.context_.abruptCompletion_=null;if(a.isException)throw a.exception;return{value:a.return,done:!0}}return{value:void 0,done:!0}};
$jscomp.generator.Generator_=function(a){this.next=function(b){return a.next_(b)};this.throw=function(b){return a.throw_(b)};this.return=function(b){return a.return_(b)};$jscomp.initSymbolIterator();$jscomp.initSymbol();$jscomp.initSymbolIterator();this[Symbol.iterator]=function(){return this}};$jscomp.generator.createGenerator=function(a,b){b=new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(b));$jscomp.setPrototypeOf&&$jscomp.setPrototypeOf(b,a.prototype);return b};
$jscomp.asyncExecutePromiseGenerator=function(a){function b(b){return a.next(b)}function c(b){return a.throw(b)}return new Promise(function(d,g){function f(a){a.done?d(a.value):Promise.resolve(a.value).then(b,c).then(f,g)}f(a.next())})};$jscomp.asyncExecutePromiseGeneratorFunction=function(a){return $jscomp.asyncExecutePromiseGenerator(a())};$jscomp.asyncExecutePromiseGeneratorProgram=function(a){return $jscomp.asyncExecutePromiseGenerator(new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(a)))};
$jscomp.owns=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)};$jscomp.assign="function"==typeof Object.assign?Object.assign:function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(d)for(var g in d)$jscomp.owns(d,g)&&(a[g]=d[g])}return a};$jscomp.polyfill("Object.assign",function(a){return a||$jscomp.assign},"es6","es3");
$jscomp.checkEs6ConformanceViaProxy=function(){try{var a={},b=Object.create(new $jscomp.global.Proxy(a,{get:function(c,d,g){return c==a&&"q"==d&&g==b}}));return!0===b.q}catch(c){return!1}};$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS=!1;$jscomp.ES6_CONFORMANCE=$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS&&$jscomp.checkEs6ConformanceViaProxy();
$jscomp.polyfill("WeakMap",function(a){function b(){if(!a||!Object.seal)return!1;try{var b=Object.seal({}),e=Object.seal({}),h=new a([[b,2],[e,3]]);if(2!=h.get(b)||3!=h.get(e))return!1;h.delete(b);h.set(e,4);return!h.has(b)&&4==h.get(e)}catch(n){return!1}}function c(a){$jscomp.owns(a,g)||$jscomp.defineProperty(a,g,{value:{}})}function d(a){var b=Object[a];b&&(Object[a]=function(a){c(a);return b(a)})}if($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(a&&$jscomp.ES6_CONFORMANCE)return a}else if(b())return a;
var g="$jscomp_hidden_"+Math.random();d("freeze");d("preventExtensions");d("seal");var f=0,e=function(a){this.id_=(f+=Math.random()+1).toString();if(a){$jscomp.initSymbol();$jscomp.initSymbolIterator();a=$jscomp.makeIterator(a);for(var b;!(b=a.next()).done;)b=b.value,this.set(b[0],b[1])}};e.prototype.set=function(a,b){c(a);if(!$jscomp.owns(a,g))throw Error("WeakMap key fail: "+a);a[g][this.id_]=b;return this};e.prototype.get=function(a){return $jscomp.owns(a,g)?a[g][this.id_]:void 0};e.prototype.has=
function(a){return $jscomp.owns(a,g)&&$jscomp.owns(a[g],this.id_)};e.prototype.delete=function(a){return $jscomp.owns(a,g)&&$jscomp.owns(a[g],this.id_)?delete a[g][this.id_]:!1};return e},"es6","es3");$jscomp.MapEntry=function(){};
$jscomp.polyfill("Map",function(a){function b(){if($jscomp.ASSUME_NO_NATIVE_MAP||!a||"function"!=typeof a||!a.prototype.entries||"function"!=typeof Object.seal)return!1;try{var b=Object.seal({x:4}),e=new a($jscomp.makeIterator([[b,"s"]]));if("s"!=e.get(b)||1!=e.size||e.get({x:4})||e.set({x:4},"t")!=e||2!=e.size)return!1;var c=e.entries(),d=c.next();if(d.done||d.value[0]!=b||"s"!=d.value[1])return!1;d=c.next();return d.done||4!=d.value[0].x||"t"!=d.value[1]||!c.next().done?!1:!0}catch(m){return!1}}
if($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(a&&$jscomp.ES6_CONFORMANCE)return a}else if(b())return a;$jscomp.initSymbol();$jscomp.initSymbolIterator();var c=new WeakMap,d=function(a){this.data_={};this.head_=e();this.size=0;if(a){a=$jscomp.makeIterator(a);for(var b;!(b=a.next()).done;)b=b.value,this.set(b[0],b[1])}};d.prototype.set=function(a,b){a=0===a?0:a;var e=g(this,a);e.list||(e.list=this.data_[e.id]=[]);e.entry?e.entry.value=b:(e.entry={next:this.head_,previous:this.head_.previous,head:this.head_,
key:a,value:b},e.list.push(e.entry),this.head_.previous.next=e.entry,this.head_.previous=e.entry,this.size++);return this};d.prototype.delete=function(a){a=g(this,a);return a.entry&&a.list?(a.list.splice(a.index,1),a.list.length||delete this.data_[a.id],a.entry.previous.next=a.entry.next,a.entry.next.previous=a.entry.previous,a.entry.head=null,this.size--,!0):!1};d.prototype.clear=function(){this.data_={};this.head_=this.head_.previous=e();this.size=0};d.prototype.has=function(a){return!!g(this,a).entry};
d.prototype.get=function(a){return(a=g(this,a).entry)&&a.value};d.prototype.entries=function(){return f(this,function(a){return[a.key,a.value]})};d.prototype.keys=function(){return f(this,function(a){return a.key})};d.prototype.values=function(){return f(this,function(a){return a.value})};d.prototype.forEach=function(a,b){for(var e=this.entries(),h;!(h=e.next()).done;)h=h.value,a.call(b,h[1],h[0],this)};d.prototype[Symbol.iterator]=d.prototype.entries;var g=function(a,b){var e=b&&typeof b;"object"==
e||"function"==e?c.has(b)?e=c.get(b):(e=""+ ++l,c.set(b,e)):e="p_"+b;var h=a.data_[e];if(h&&$jscomp.owns(a.data_,e))for(a=0;a<h.length;a++){var d=h[a];if(b!==b&&d.key!==d.key||b===d.key)return{id:e,list:h,index:a,entry:d}}return{id:e,list:h,index:-1,entry:void 0}},f=function(a,b){var e=a.head_;return $jscomp.iteratorPrototype(function(){if(e){for(;e.head!=a.head_;)e=e.previous;for(;e.next!=e.head;)return e=e.next,{done:!1,value:b(e)};e=null}return{done:!0,value:void 0}})},e=function(){var a={};return a.previous=
a.next=a.head=a},l=0;return d},"es6","es3");
$jscomp.polyfill("Set",function(a){function b(){if($jscomp.ASSUME_NO_NATIVE_SET||!a||"function"!=typeof a||!a.prototype.entries||"function"!=typeof Object.seal)return!1;try{var b=Object.seal({x:4}),c=new a($jscomp.makeIterator([b]));if(!c.has(b)||1!=c.size||c.add(b)!=c||1!=c.size||c.add({x:4})!=c||2!=c.size)return!1;var f=c.entries(),e=f.next();if(e.done||e.value[0]!=b||e.value[1]!=b)return!1;e=f.next();return e.done||e.value[0]==b||4!=e.value[0].x||e.value[1]!=e.value[0]?!1:f.next().done}catch(l){return!1}}
if($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(a&&$jscomp.ES6_CONFORMANCE)return a}else if(b())return a;$jscomp.initSymbol();$jscomp.initSymbolIterator();var c=function(a){this.map_=new Map;if(a){a=$jscomp.makeIterator(a);for(var b;!(b=a.next()).done;)this.add(b.value)}this.size=this.map_.size};c.prototype.add=function(a){a=0===a?0:a;this.map_.set(a,a);this.size=this.map_.size;return this};c.prototype.delete=function(a){a=this.map_.delete(a);this.size=this.map_.size;return a};c.prototype.clear=
function(){this.map_.clear();this.size=0};c.prototype.has=function(a){return this.map_.has(a)};c.prototype.entries=function(){return this.map_.entries()};c.prototype.values=function(){return this.map_.values()};c.prototype.keys=c.prototype.values;c.prototype[Symbol.iterator]=c.prototype.values;c.prototype.forEach=function(a,b){var c=this;this.map_.forEach(function(e){return a.call(b,e,e,c)})};return c},"es6","es3");
$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};
$jscomp.polyfill("String.prototype.endsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"endsWith");a+="";void 0===c&&(c=b.length);c=Math.max(0,Math.min(c|0,b.length));for(var g=a.length;0<g&&0<c;)if(b[--c]!=a[--g])return!1;return 0>=g}},"es6","es3");$jscomp.polyfill("Object.entries",function(a){return a?a:function(a){var b=[],d;for(d in a)$jscomp.owns(a,d)&&b.push([d,a[d]]);return b}},"es8","es3");
var coerce={toList:function(a,b){b=void 0===b?null:b;return"list"!==a.ctype?(console.log("argument is not a list"),b):a.value},toHomog:function(a,b,c){b=void 0===b?[0,0,0,0]:b;c=void 0===c?3:c;a=coerce.toList(a);if(null===a)return b;b=a.map(coerce.toReal);b.length>c+1&&(console.log("Coordinate vector too long."),b=b.slice(0,c+1));for(;b.length<c;)b.push(0);b.length===c&&b.push(1);return b},toDirection:function(a,b){b=void 0===b?[0,0,0]:b;a=coerce.toList(a);if(null===a)return b;b=a.map(coerce.toReal);
3<b.length&&(console.log("Coordinate vector too long."),b=b.slice(0,3));for(;3>b.length;)b.push(0);return b},toDirectionPoint:function(a,b){b=void 0===b?[0,0,0,0]:b;a=coerce.toDirection(a,b);a!==b&&(a[3]=0);return a},toColor:function(a,b){b=void 0===b?[.5,.5,.5]:b;if("number"===a.ctype){var c=coerce.toInterval(0,1,a);if(!isNaN(c))return[c,c,c]}a=coerce.toList(a);return null===a?b:3!=a.length?(console.log("Not an RGB color vector"),b):a.map(function(a){return coerce.toInterval(0,1,a)})},toReal:function(a,
b){b=void 0===b?Number.NaN:b;if("number"!==a.ctype)return console.log("argument is not a number"),b;a=a.value;b=a.real;0!==a.imag&&console.log("complex number is not real");return b},toInt:function(a,b){b=void 0===b?Number.NaN:b;if("number"!==a.ctype)return console.log("argument is not a number"),b;b=a.value;a=b.real;b=b.imag;0!==b&&console.log("complex number is not real");b=Math.round(a);b!==a&&console.log("number is not an integer");return b},clamp:function(a,b,c){return c<a?a:c>b?b:c},toInterval:function(a,
b,c,d){d=void 0===d?Number.NaN:d;return coerce.clamp(a,b,coerce.toReal(c,d))},toString:function(a,b){b=void 0===b?null:b;if("string"===a.ctype)return a.value;console.log("argument is not a string");return b},toEnum:function(a,b,c){c=void 0===c?null:c;b=coerce.toString(b,c);if(b!==c&&-1!==a.indexOf(b))return b;console.log("argument is not one of "+a.join(", "));return c},toBool:function(a,b){if("boolean"===a.ctype)return a.value;console.log("argument is not boolean");return b}};function norm3(a){var b=a[0],c=a[1];a=a[2];return Math.sqrt(b*b+c*c+a*a)}function normalized3(a){var b=a[0],c=a[1];a=a[2];var d=1/Math.sqrt(b*b+c*c+a*a);return[d*b,d*c,d*a]}function dehom3(a){var b=1/a[3];return[b*a[0],b*a[1],b*a[2]]}function scale3(a,b){return[a*b[0],a*b[1],a*b[2]]}function transpose3(a){return[a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]]}function transpose4(a){return[a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15]]}
function adj3(a){return[a[4]*a[8]-a[5]*a[7],a[2]*a[7]-a[1]*a[8],a[1]*a[5]-a[2]*a[4],a[5]*a[6]-a[3]*a[8],a[0]*a[8]-a[2]*a[6],a[2]*a[3]-a[0]*a[5],a[3]*a[7]-a[4]*a[6],a[1]*a[6]-a[0]*a[7],a[0]*a[4]-a[1]*a[3]]}function sub3(a,b){return[a[0]-b[0],a[1]-b[1],a[2]-b[2]]}function add3(a,b){return[a[0]+b[0],a[1]+b[1],a[2]+b[2]]}function add4(a,b){return[a[0]+b[0],a[1]+b[1],a[2]+b[2],a[3]+b[3]]}function cross3(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]}
function mul4mm(a,b){return[a[0]*b[0]+a[1]*b[4]+a[2]*b[8]+a[3]*b[12],a[0]*b[1]+a[1]*b[5]+a[2]*b[9]+a[3]*b[13],a[0]*b[2]+a[1]*b[6]+a[2]*b[10]+a[3]*b[14],a[0]*b[3]+a[1]*b[7]+a[2]*b[11]+a[3]*b[15],a[4]*b[0]+a[5]*b[4]+a[6]*b[8]+a[7]*b[12],a[4]*b[1]+a[5]*b[5]+a[6]*b[9]+a[7]*b[13],a[4]*b[2]+a[5]*b[6]+a[6]*b[10]+a[7]*b[14],a[4]*b[3]+a[5]*b[7]+a[6]*b[11]+a[7]*b[15],a[8]*b[0]+a[9]*b[4]+a[10]*b[8]+a[11]*b[12],a[8]*b[1]+a[9]*b[5]+a[10]*b[9]+a[11]*b[13],a[8]*b[2]+a[9]*b[6]+a[10]*b[10]+a[11]*b[14],a[8]*b[3]+a[9]*
b[7]+a[10]*b[11]+a[11]*b[15],a[12]*b[0]+a[13]*b[4]+a[14]*b[8]+a[15]*b[12],a[12]*b[1]+a[13]*b[5]+a[14]*b[9]+a[15]*b[13],a[12]*b[2]+a[13]*b[6]+a[14]*b[10]+a[15]*b[14],a[12]*b[3]+a[13]*b[7]+a[14]*b[11]+a[15]*b[15]]}function mul3mv(a,b){return[a[0]*b[0]+a[1]*b[1]+a[2]*b[2],a[3]*b[0]+a[4]*b[1]+a[5]*b[2],a[6]*b[0]+a[7]*b[1]+a[8]*b[2]]}
function mul4mv(a,b){return[a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3],a[4]*b[0]+a[5]*b[1]+a[6]*b[2]+a[7]*b[3],a[8]*b[0]+a[9]*b[1]+a[10]*b[2]+a[11]*b[3],a[12]*b[0]+a[13]*b[1]+a[14]*b[2]+a[15]*b[3]]}function transform4to3(a,b){var c=1/(a[12]*b[0]+a[13]*b[1]+a[14]*b[2]+a[15]*b[3]);return[(a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3])*c,(a[4]*b[0]+a[5]*b[1]+a[6]*b[2]+a[7]*b[3])*c,(a[8]*b[0]+a[9]*b[1]+a[10]*b[2]+a[11]*b[3])*c]}
function triangleNormal(a,b,c){a=dehom3(a);b=sub3(dehom3(b),a);c=sub3(dehom3(c),a);return normalized3(cross3(b,c))};function GlError(a){this.message=a}GlError.prototype.toString=function(){return this.message};
function ShaderProgram(a,b,c){this.handle=a.createProgram();a.webgl2&&(b="#version 300 es\n"+b.replace(/attribute/g,"in").replace(/varying/g,"out"),c="#version 300 es\n"+c.replace(/varying/g,"in").replace(/gl_FragColor/g,"FragColor").replace(/texture2D/g,"texture").replace(/precision highp float;/g,"precision highp float;\n#define webgl2 true\nout vec4 FragColor;"));this.vs=this.createShader(a,a.VERTEX_SHADER,b);this.fs=this.createShader(a,a.FRAGMENT_SHADER,c);this.link(a);this.detectUniforms(a)}
ShaderProgram.prototype.createShader=function(a,b,c){b=a.createShader(b);a.shaderSource(b,c);a.compileShader(b);if(!a.getShaderParameter(b,a.COMPILE_STATUS))throw console.warn(c.split("\n")),new GlError("Error compiling shader:\n"+a.getShaderInfoLog(b));a.attachShader(this.handle,b);return b};ShaderProgram.prototype.use=function(a){a.useProgram(this.handle);return this};
ShaderProgram.prototype.link=function(a){var b=this.handle;a.linkProgram(b);if(!a.getProgramParameter(b,a.LINK_STATUS))throw new GlError("Error linking shader:\n"+a.getProgramInfoLog(b));a.validateProgram(b);if(!a.getProgramParameter(b,a.VALIDATE_STATUS))throw new GlError("Error validating shader:\n"+a.getProgramInfoLog(b));};ShaderProgram.prototype.dispose=function(a){a.detachShader(this.handle,this.vs);a.deleteShader(this.vs);a.detachShader(this.handle,this.fs);a.deleteShader(this.fs);a.deleteProgram(this.handle)};
ShaderProgram.prototype.detectUniforms=function(a){this.uniform=this.detectImpl(a,!0)};ShaderProgram.prototype.detectAttributes=function(a){this.attrib=this.detectImpl(a,!1)};
ShaderProgram.prototype.detectImpl=function(a,b){var c,d=this.handle,g,f,e={},l;var k=b?a.getProgramParameter(d,a.ACTIVE_UNIFORMS):a.getProgramParameter(d,a.ACTIVE_ATTRIBUTES);for(c=0;c<k;++c){var h=b?a.getActiveUniform(d,c):a.getActiveAttrib(d,c);if(null!==h&&(g=h.name.replace(/\]/g,""))){for(l=e;null!==(f=/[.\[]/.exec(g));){var n=g.substr(0,f.index);l=l.hasOwnProperty(n)?l[n]:"."===f[0]?l[n]={}:l[n]=[];g=g.substr(f.index+1)}if(1<h.size){f=h.size;var p=Array(f);for(n=0;n<f;++n){var m=h.name+"["+
n+"]";m=b?this.uniformSetter(a,m,h):this.attribFactory(a,m,h);p[n]=m}l[g]=p}else m=b?this.uniformSetter(a,h.name,h):this.attribFactory(a,h.name,h),l[g]=m}}return e};
ShaderProgram.prototype.uniformSetter=function(a,b,c){var d=a.getUniformLocation(this.handle,b);switch(c.type){case a.FLOAT:return a.uniform1fv.bind(a,d);case a.FLOAT_VEC2:return a.uniform2fv.bind(a,d);case a.FLOAT_VEC3:return a.uniform3fv.bind(a,d);case a.FLOAT_VEC4:return a.uniform4fv.bind(a,d);case a.BOOL:case a.INT:case a.SAMPLER_2D:case a.SAMPLER_CUBE:return a.uniform1iv.bind(a,d);case a.BOOL_VEC2:case a.INT_VEC2:return a.uniform2iv.bind(a,d);case a.BOOL_VEC3:case a.INT_VEC3:return a.uniform3iv.bind(a,
d);case a.BOOL_VEC4:case a.INT_VEC4:return a.uniform4iv.bind(a,d);case a.FLOAT_MAT2:return a.uniformMatrix2fv.bind(a,d,!1);case a.FLOAT_MAT3:return a.uniformMatrix3fv.bind(a,d,!1);case a.FLOAT_MAT4:return a.uniformMatrix4fv.bind(a,d,!1);default:throw new GlError("Unknown data type for uniform "+b);}};
ShaderProgram.prototype.attribFactory=function(a,b,c){var d=a.getAttribLocation(this.handle,b);switch(c.type){case a.FLOAT:return new VertexAttribute(a,d,a.vertexAttrib1fv.bind(a,d));case a.FLOAT_VEC2:return new VertexAttribute(a,d,a.vertexAttrib2fv.bind(a,d));case a.FLOAT_VEC3:return new VertexAttribute(a,d,a.vertexAttrib3fv.bind(a,d));case a.FLOAT_VEC4:return new VertexAttribute(a,d,a.vertexAttrib4fv.bind(a,d));default:throw new GlError("Unknown data type for vertex attribute "+b);}};
function VertexAttribute(a,b,c){this.gl=a;this.location=b;this.set=c};(function(a){"object"===typeof exports&&"undefined"!==typeof module?module.exports=a():"function"===typeof define&&define.amd?define([],a):("undefined"!==typeof window?window:"undefined"!==typeof global?global:"undefined"!==typeof self?self:this).csg=a()})(function(){return function(){function a(b,c,d){function g(e,k){if(!c[e]){if(!b[e]){var h="function"==typeof require&&require;if(!k&&h)return h(e,!0);if(f)return f(e,!0);k=Error("Cannot find module '"+e+"'");throw k.code="MODULE_NOT_FOUND",k;}k=
c[e]={exports:{}};b[e][0].call(k.exports,function(a){return g(b[e][1][a]||a)},k,k.exports,a,b,c,d)}return c[e].exports}for(var f="function"==typeof require&&require,e=0;e<d.length;e++)g(d[e]);return g}return a}()({1:[function(a,b,c){var d=a("../core/math/Path2");b.exports=function(a){var b={},e={};a.canonicalized().sides.map(function(a){var h=a.getTag();b[h]=a;a=a.vertex0.getTag();a in e||(e[a]=[]);e[a].push(h)});for(a=[];;){var c=null,k;for(k in e){var h=e[k];c=h[0];h.splice(0,1);0===h.length&&delete e[k];
break}if(null===c)break;h=[];var n=b[c];for(c=n.vertex0.getTag();;){h.push(n.vertex0.pos);var g=n.vertex1.getTag();if(g===c)break;if(!(g in e))throw Error("Area is not closed!");var m=e[g],q=-1;if(1===m.length)q=0;else{var r=null;n=n.direction().angleDegrees();for(var v=0;v<m.length;v++){var w=b[m[v]].direction().angleDegrees()-n;-180>w&&(w+=360);180<=w&&(w-=360);if(0>q||w>r)q=v,r=w}}r=m[q];m.splice(q,1);0===m.length&&delete e[g];n=b[r]}0<h.length&&h.push(h.shift());h=new d(h,!0);a.push(h)}return a}},
{"../core/math/Path2":28}],2:[function(a,b,c){var d=a("../core/utils/toArray");b.exports=function(a,b){a=Object.assign({},{axes:[!0,!0,!0],center:[0,0,0]},a);var e=a.axes,c=a.center;b=d(b);b=b.map(function(a){var b=a.getBounds(),f=[0,0,0];e[0]&&(f[0]=c[0]-(b[0].x+(b[1].x-b[0].x)/2));e[1]&&(f[1]=c[1]-(b[0].y+(b[1].y-b[0].y)/2));e[2]&&(f[2]=c[2]-(b[0].z+(b[1].y-b[0].y)/2));return a.translate(f)});return 1===b.length?b[0]:b}},{"../core/utils/toArray":49}],3:[function(a,b,c){var d=a("../core/CSG"),g=
a("./primitives3d").cube;b.exports={toPointCloud:function(a,b){a=a.reTesselated();var e=new d,c={};a.polygons.map(function(a){a.vertices.map(function(a){c[a.getTag()]=a.pos})});for(var h in c)a=g({center:c[h],radius:b}),e=e.unionSub(a,!1,!1);return e=e.reTesselated()}}},{"../core/CSG":16,"./primitives3d":12}],4:[function(a,b,c){var d=a("../core/math/Vertex3"),g=a("../core/math/Vector3"),f=a("../core/math/Polygon3");b.exports={cagToPointsArray:function(a){if("sides"in a){var b=[];a.sides.forEach(function(a){b.push([a.vertex0.pos.x,
a.vertex0.pos.y]);b.push([a.vertex1.pos.x,a.vertex1.pos.y])})}else"points"in a&&(b=a.points.map(function(a){return[a.x,a.y]}));return b},clamp:function(a,b,c){return Math.min(Math.max(a,b),c)},rightMultiply1x3VectorToArray:function(a,b){b=$jscomp.makeIterator(b);var e=b.next().value,c=b.next().value,f=b.next().value;b=e*a.elements[0]+c*a.elements[1]+f*a.elements[2]+1*a.elements[3];var d=e*a.elements[4]+c*a.elements[5]+f*a.elements[6]+1*a.elements[7],g=e*a.elements[8]+c*a.elements[9]+f*a.elements[10]+
1*a.elements[11];a=e*a.elements[12]+c*a.elements[13]+f*a.elements[14]+1*a.elements[15];1!==a&&(a=1/a,b*=a,d*=a,g*=a);return[b,d,g]},polygonFromPoints:function(a){a=a.map(function(a){return new d(new g(a))});return new f(a)}}},{"../core/math/Polygon3":31,"../core/math/Vector3":34,"../core/math/Vertex3":36}],5:[function(a,b,c){var d=a("../core/utils").isCAG;b.exports={union:function(){var a={},b={extrude2d:!1},e=0,c=arguments;c[0].length&&(c=c[0]);"extrude2d"in c[0]&&(a=Object.assign({},b,c[0]),e++);
b=c[e++];for("object"===typeof c[e]&&d(c[e])&&a.extrude2d&&(b=c[e].extrude({offset:[0,0,.1]}));e<c.length;e++){var k=c[e];"object"===typeof c[e]&&d(c[e])&&a.extrude2d&&(k=c[e].extrude({offset:[0,0,.1]}));b=b.union(k)}return b},difference:function(){var a,b=0,e=arguments;e[0].length&&(e=e[0]);for(a=e[b++];b<e.length;b++)a=d(e[b])?a.subtract(e[b]):a.subtract(e[b].setColor(1,1,0));return a},intersection:function(){var a,b=0,e=arguments;e[0].length&&(e=e[0]);for(a=e[b++];b<e.length;b++)a=d(e[b])?a.intersect(e[b]):
a.intersect(e[b].setColor(1,1,0));return a}}},{"../core/utils":41}],6:[function(a,b,c){var d=a("../core/math/Matrix4.js"),g=a("../core/math/Vector3.js"),f=a("../core/connectors.js").Connector,e=a("../core/CAGFactories").fromPoints,l=a("../core/math/Vector2");b.exports={lieFlat:function(a){var b=a.getTransformationToFlatLying();return a.transform(b)},getTransformationToFlatLying:function(a){return a.getTransformationAndInverseTransformationToFlatLying()[0]},getTransformationAndInverseTransformationToFlatLying:function(a){if(0===
a.polygons.length){var b=new d;return[b,b]}a=a.canonicalized();var e={};a.polygons.map(function(a){e[a.plane.getTag()]=a.plane});var c=new g(1,0,0),k=new g(0,1,0),l=new g(0,0,1),r=new f([0,0,0],[0,0,-1],c),v=new f([0,0,0],[0,0,-1],k),w=!0,y=0,x=0;for(b in e){var t=e[b],u=t.normal.times(t.w),C=void 0;C=t.normal.cross(c).length();var F=t.normal.cross(k).length();C>F?(u=new f(u,t.normal,c),C=u.getTransformationTo(r,!1,0),u=r.getTransformationTo(u,!1,0)):(u=new f(u,t.normal,k),C=u.getTransformationTo(v,
!1,0),u=v.getTransformationTo(u,!1,0));F=a.transform(C);t=-t.normal.dot(l);var N=F.getBounds();F=N[1].z-N[0].z;w||(F<y?w=!0:F===y&&t>x&&(w=!0));if(w){var L=new g([-.5*(N[1].x+N[0].x),-.5*(N[1].y+N[0].y),-N[0].z]);C=C.multiply(d.translation(L));u=d.translation(L.negated()).multiply(u);y=F;x=t;L=C;var B=u}w=!1}return[L,B]},overCutInsideCorners:function(a,b){a=a.canonicalized();var c={};a.sides.map(function(a){a.vertex0.getTag()in c||(c[a.vertex0.getTag()]={pos:a.vertex0.pos,from:[],to:[]});c[a.vertex0.getTag()].to.push(a.vertex1.pos);
a.vertex1.getTag()in c||(c[a.vertex1.getTag()]={pos:a.vertex1.pos,from:[],to:[]});c[a.vertex1.getTag()].from.push(a.vertex0.pos)});var h=[],d;for(d in c){var f=c[d];if(1===f.from.length&&1===f.to.length){var k=f.pos,g=f.to[0];f=k.minus(f.from[0]).unit();g=g.minus(k).unit();if(.001>f.cross(g)){var w=g.angleRadians()-f.angleRadians()+Math.PI;0>w?w+=2*Math.PI:w>=2*Math.PI&&(w-=2*Math.PI);g=g.minus(f).unit();var y=30/180*Math.PI;f=b/Math.cos(y/2);k=k.plus(g.times(f));g=w+g.angleRadians();w=2*(Math.PI-
w);y=2*Math.ceil(w/y/2);for(var x=[k],t=0;t<=y;t++){var u=l.fromAngleRadians(g+t/y*w).times(f).plus(k);x.push(u)}h.push(e(x))}}}return a.subtract(h)}}},{"../core/CAGFactories":15,"../core/connectors.js":22,"../core/math/Matrix4.js":26,"../core/math/Vector2":33,"../core/math/Vector3.js":34}],7:[function(a,b,c){var d=a("../core/constants").EPS,g=a("../core/math/Plane"),f=a("../core/math/Vector2"),e=a("../core/math/Vertex3"),l=a("../core/math/Polygon3"),k=a("../core/math/OrthoNormalBasis");b.exports=
{sectionCut:function(a,b){var e=b.plane,c=b.plane.flipped();e=new g(e.normal,e.w);c=new g(c.normal,c.w+5*d);a=a.cutByPlane(e);a=a.cutByPlane(c);return a.projectToOrthoNormalBasis(b)},cutByPlane:function(b,c){if(0===b.polygons.length)return new (a("../core/CSG"));var h=c.normal.times(c.w),d=0;b.polygons.map(function(a){a.vertices.map(function(a){a=a.pos.distanceToSquared(h);a>d&&(d=a)})});d=Math.sqrt(d);d*=1.01;var g=[],n=new k(c);g.push(new e(n.to3D(new f(d,-d))));g.push(new e(n.to3D(new f(-d,-d))));
g.push(new e(n.to3D(new f(-d,d))));g.push(new e(n.to3D(new f(d,d))));c=(new l(g,null,c.flipped())).extrude(c.normal.times(-d));c=b.intersect(c);c.properties=b.properties;return c}}},{"../core/CSG":16,"../core/constants":23,"../core/math/OrthoNormalBasis":27,"../core/math/Plane":29,"../core/math/Polygon3":31,"../core/math/Vector2":33,"../core/math/Vertex3":36}],8:[function(a,b,c){c=a("../core/constants");var d=c.EPS,g=c.angleEPS,f=a("../core/math/Vertex3"),e=a("../core/math/Vector2"),l=a("../core/math/Polygon3");
c=a("../core/utils");var k=c.fnNumberSort,h=c.isCSG;c=a("../core/CAGFactories");var n=c.fromPoints,p=c.fromPointsNoCheck,m=function(b,c,h){var f=a("../core/CAG");h=h||8;4>h&&(h=4);var k=[],l={};b.canonicalized().sides.map(function(a){var b=a.vertex1.pos.minus(a.vertex0.pos),e=b.length();if(e>d)for(b=b.times(1/e),b=b.normal().times(c),b=[a.vertex1.pos.plus(b),a.vertex1.pos.minus(b),a.vertex0.pos.minus(b),a.vertex0.pos.plus(b)],b=n(b),k.push(b),b=0;2>b;b++){e=0===b?a.vertex0.pos:a.vertex1.pos;var h=
0===b?a.vertex1.pos:a.vertex0.pos,f=e.x+" "+e.y;f in l||(l[f]=[]);l[f].push({p1:e,p2:h})}});for(var m in l){var r=l[m];b=void 0;var q=r[0].p1;if(2===r.length){var v=r[1].p2;b=r[0].p2.minus(q).angleDegrees();r=v.minus(q).angleDegrees();r<b&&(r+=360);r>=b+360&&(r-=360);r<b+180&&(v=r,r=b+360,b=v);b+=90;r-=90}else b=0,r=360;if(v=r>b+359.999)b=0,r=360;if(r>b+g){var L=[];v||L.push(q);var w=Math.round(h*(r-b)/360);1>w&&(w=1);for(var G=0;G<=w;G++){var E=b+G/w*(r-b);G===w&&(E=r);E=q.plus(e.fromAngleDegrees(E).times(c));
(!v||0<G)&&L.push(E)}b=p(L);k.push(b)}}h=new f;return h=h.union(k)},q=function(b,e,c,h){var g=a("../core/CSG"),n=a("../core/CSGFactories").fromPolygons;b=b.reTesselated();var p=h?b:new g;b.polygons.map(function(a){var b=a.plane.normal.unit().times(2*e);a=a.translate(b.times(-.5)).extrude(b);p=p.unionSub(a,!1,!1)});var m={};b.polygons.map(function(a){for(var b=a.vertices.length,e=a.vertices[b-1],c=e.getTag(),h=0;h<b;h++){var d=a.vertices[h],f=d.getTag();c=f<c?f+"-"+c:c+"-"+f;c in m?e=m[c]:(e={v1:e,
v2:d,planenormals:[]},m[c]=e);e.planenormals.push(a.plane.normal);c=f;e=d}});for(var r in m){var q=m[r];h=q.v1.pos;var v=q.v2.pos,w=v.minus(h).unit(),y=q.planenormals[0].unit();w=y.cross(w);for(var E=[],H=0;H<c;H++)E.push(H*Math.PI*2/c);H=0;for(var I=q.planenormals.length;H<I;H++){var D=q.planenormals[H],z=w.dot(D);D=y.dot(D);var A=Math.atan2(z,D);0>A&&(A+=2*Math.PI);E.push(A);A=Math.atan2(-z,-D);0>A&&(A+=2*Math.PI);E.push(A)}E=E.sort(k);q=E.length;var J=A=void 0;H=[];I=[];z=[];for(D=-1;D<q;D++){var K=
E[0>D?D+q:D],M=Math.sin(K);M=y.times(Math.cos(K)*e).plus(w.times(M*e));K=h.plus(M);M=v.plus(M);var Q=!1;0<=D&&K.distanceTo(A)<d&&(Q=!0);Q||(0<=D&&(H.push(new f(K)),I.push(new f(M)),A=[new f(J),new f(M),new f(K),new f(A)],A=new l(A),z.push(A)),A=K,J=M)}I.reverse();z.push(new l(H));z.push(new l(I));h=n(z);p=p.unionSub(h,!1,!1)}var P={};b.polygons.map(function(a){a.vertices.map(function(b){var e=b.getTag();e in P?b=P[e]:(b={pos:b.pos,normals:[]},P[e]=b);b.normals.push(a.plane.normal)})});for(var R in P){n=
P[R];r=n.normals[0].unit();b=null;h=0;for(v=1;v<n.normals.length;v++)y=n.normals[v].unit(),w=r.cross(y).length(),.05<w&&w>h&&(h=w,b=y);b||(b=r.randomNonParallelVector());b=r.cross(b).unit();h=b.cross(r);n=g.sphere({center:n.pos,radius:e,resolution:c,axes:[r,b,h]});p=p.unionSub(n,!1,!1)}return p};b.exports={expand:function(a,b,e){h(a)?(b=a.union(q(a,b,e)),b=b.reTesselated(),b.properties=a.properties):b=a.union(m(a,b,e));return b},contract:function(a,b,e){h(a)?(b=a.subtract(q(a,b,e)),b=b.reTesselated(),
b.properties=a.properties):b=a.subtract(m(a,b,e));return b},expandedShellOfCAG:m,expandedShellOfCCSG:q}},{"../core/CAG":14,"../core/CAGFactories":15,"../core/CSG":16,"../core/CSGFactories":17,"../core/constants":23,"../core/math/Polygon3":31,"../core/math/Vector2":33,"../core/math/Vertex3":36,"../core/utils":41}],9:[function(a,b,c){c=a("../core/constants");var d=c.EPS,g=c.defaultResolution3D,f=a("../core/math/OrthoNormalBasis");c=a("./optionParsers");var e=c.parseOptionAs3DVector,l=c.parseOptionAsBool,
k=c.parseOptionAsFloat,h=c.parseOptionAsInt,n=a("../core/math/Vector3"),p=a("../core/math/Matrix4"),m=a("../core/math/Path2"),q=a("../core/connectors").Connector,r=a("../core/CSGFactories").fromPolygons;c=a("./helpers");var v=c.cagToPointsArray,w=c.clamp,y=c.rightMultiply1x3VectorToArray,x=c.polygonFromPoints,t=a("../core/CAGFactories").fromPoints,u=function(a,b,e,c){if(!(b instanceof f))throw Error("extrudeInPlane: the first parameter should be a OrthoNormalBasis");a=a.extrude({offset:[0,0,e]});
l(c,"symmetrical",!1)&&(a=a.translate([0,0,-e/2]));b=b.getInverseProjectionMatrix();return a=a.transform(b)};b.exports={extrudeInOrthonormalBasis:u,extrudeInPlane:function(a,b,e,c,h){return u(a,f.GetCartesian(b,e),c,h)},extrude:function(b,c){var d=a("../core/CSG");if(0===b.sides.length)return new d;d=e(c,"offset",[0,0,1]);var f=k(c,"twistangle",0);c=h(c,"twiststeps",g);if(0===d.z)throw Error("offset cannot be orthogonal to Z axis");if(0===f||1>c)c=1;var l=n.Create(0,1,0),p=[];p=p.concat(b._toPlanePolygons({translation:[0,
0,0],normalVector:l,flipped:!(0>d.z)}));p=p.concat(b._toPlanePolygons({translation:d,normalVector:l.rotateZ(f),flipped:0>d.z}));for(var m=0;m<c;m++){var t=new q(d.times(m/c),[0,0,d.z],l.rotateZ(m*f/c)),v=new q(d.times((m+1)/c),[0,0,d.z],l.rotateZ((m+1)*f/c));p=p.concat(b._toWallPolygons({toConnector1:t,toConnector2:v}))}return r(p)},linear_extrude:function(a,b){var e=Object.assign({},{height:1,slices:10,twist:0,center:!1},a);a=e.center;b=b.extrude({offset:[0,0,e.height],twistangle:e.twist,twiststeps:e.slices});
!0===a&&(a=b.getBounds(),a=a[1].plus(a[0]).times(-.5),b=b.translate(a));return b},rotate_extrude:function(a,b){var e=a=Object.assign({},{fn:32,startAngle:0,angle:360,overflow:"cap"},a),c=e.fn,h=e.startAngle,d=e.angle,f=e.overflow;if("cap"!==f)throw Error("only capping of overflowing points is supported !");2>arguments.length&&(b=a);var k=(e=0<d)?w(h+d,0,360):w(h+d,-360,0);c=Math.max(Math.floor(Math.abs(k)/45),1,c);k=v(b);var g=k.filter(function(a){return 0>a[0]}),n=k.filter(function(a){return 0<=
a[0]});0<g.length&&0<n.length&&"cap"===f&&(g.length>n.length?k=k.map(function(a){return[Math.min(a[0],0),a[1]]}):n.length>=g.length&&(k=k.map(function(a){return[Math.max(a[0],0),a[1]]})));f=[];g={};for(n=1;n<c+1;g={endMatrix:g.endMatrix,startMatrix:g.startMatrix},n++){for(var l=0;l<k.length-1;l++){var m=k[l],q=k[l+1],u=p.rotationZ((n-1)/c*d+h),C=p.rotationZ(n/c*d+h),F=y(u,[m[0],0,m[1]]);m=y(C,[m[0],0,m[1]]);u=y(u,[q[0],0,q[1]]);q=y(C,[q[0],0,q[1]]);C=!1;1E-5>Math.abs(F[0]-m[0])&&1E-5>Math.abs(u[1]-
q[1])&&(C=!0);e?(f.push(x([F,u,q])),C||f.push(x([q,m,F]))):(C||f.push(x([F,m,q])),f.push(x([q,u,F])))}360>Math.abs(d)&&(F=t(k),g.endMatrix=p.rotationX(90).multiply(p.rotationZ(-h)),l=F._toPlanePolygons({flipped:e}).map(function(a){return function(b){return b.transform(a.endMatrix)}}(g)),g.startMatrix=p.rotationX(90).multiply(p.rotationZ(-d-h)),F=F._toPlanePolygons({flipped:!e}).map(function(a){return function(b){return b.transform(a.startMatrix)}}(g)),f=f.concat(l).concat(F))}return r(f).reTesselated().canonicalized()},
rotateExtrude:function(a,b){var e=k(b,"angle",360),c=h(b,"resolution",g);e=360<e?e%360:e;b=[0,0,0];var f=n.Create(0,1,0),l=[0,0,1],p=[],m=new q(b,f,l);if(0<e&&360>e){var t=new q(b,f.rotateZ(-e),l);p=p.concat(a._toPlanePolygons({toConnector:m,flipped:!0}));p=p.concat(a._toPlanePolygons({toConnector:t}))}for(var v=t=e/c;v<=e+d;v+=t)c=new q(b,f.rotateZ(-v),l),p=p.concat(a._toWallPolygons({toConnector1:m,toConnector2:c})),m=c;return r(p).reTesselated()},rectangular_extrude:function(a,b){b=Object.assign({},
{w:1,h:1,fn:8,closed:!1,round:!0},b);var e=b.w,c=b.h,h=b.fn,d=b.round;return(new m(a,b.closed)).rectangularExtrude(e,c,h,d)}}},{"../core/CAGFactories":15,"../core/CSG":16,"../core/CSGFactories":17,"../core/connectors":22,"../core/constants":23,"../core/math/Matrix4":26,"../core/math/OrthoNormalBasis":27,"../core/math/Path2":28,"../core/math/Vector3":34,"./helpers":4,"./optionParsers":10}],10:[function(a,b,c){var d=a("../core/math/Vector3"),g=a("../core/math/Vector2"),f=function(a,b,c){a&&b in a&&
(c=a[b]);return c};b.exports={parseOption:f,parseOptionAsInt:function(a,b,c){a=f(a,b,c);a=Number(Math.floor(a));if(isNaN(a))throw Error("Parameter "+b+" should be a number");return a},parseOptionAsFloat:function(a,b,c){a=f(a,b,c);"string"===typeof a&&(a=Number(a));if(isNaN(a)||"number"!==typeof a)throw Error("Parameter "+b+" should be a number");return a},parseOptionAsBool:function(a,b,c){a=f(a,b,c);"string"===typeof a&&("true"===a?a=!0:"false"===a?a=!1:0===a&&(a=!1));return!!a},parseOptionAs3DVector:function(a,
b,c){a=f(a,b,c);return a=new d(a)},parseOptionAs2DVector:function(a,b,c){a=f(a,b,c);return a=new g(a)},parseOptionAs3DVectorList:function(a,b,c){return f(a,b,c).map(function(a){return new d(a)})}}},{"../core/math/Vector2":33,"../core/math/Vector3":34}],11:[function(a,b,c){a("../core/CAG");c=a("./optionParsers");var d=c.parseOptionAs2DVector,g=c.parseOptionAsFloat,f=c.parseOptionAsInt,e=a("../core/constants").defaultResolution2D,l=a("../core/math/Vector2");a("../core/math/Vertex2");var k=a("../core/math/Path2");
a=a("../core/CAGFactories");var h=a.fromPoints,n=a.fromPath2,p=function(a){a=a||{};if("corner1"in a||"corner2"in a){if("center"in a||"radius"in a)throw Error("rectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter");var b=d(a,"corner1",[0,0]);a=d(a,"corner2",[1,1]);var c=b.plus(a).times(.5);b=a.minus(b).times(.5)}else c=d(a,"center",[0,0]),b=d(a,"radius",[1,1]);b=b.abs();a=new l(b.x,-b.y);c=[c.plus(b),c.plus(a),c.minus(b),c.minus(a)];return h(c)};b.exports=
{circle:function(a){a=a||{};var b=d(a,"center",[0,0]),c=g(a,"radius",1);a=f(a,"resolution",e);for(var k=[],n=0;n<a;n++){var p=l.fromAngleRadians(2*Math.PI*n/a).times(c).plus(b);k.push(p)}return h(k)},ellipse:function(a){a=a||{};var b=d(a,"center",[0,0]),c=d(a,"radius",[1,1]);c=c.abs();a=f(a,"resolution",e);var h=new k([[b.x,b.y+c.y]]);h=h.appendArc([b.x,b.y-c.y],{xradius:c.x,yradius:c.y,xaxisrotation:0,resolution:a,clockwise:!0,large:!1});h=h.appendArc([b.x,b.y+c.y],{xradius:c.x,yradius:c.y,xaxisrotation:0,
resolution:a,clockwise:!0,large:!1});h=h.close();return n(h)},rectangle:p,roundedRectangle:function(a){a=a||{};if("corner1"in a||"corner2"in a){if("center"in a||"radius"in a)throw Error("roundedRectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter");var b=d(a,"corner1",[0,0]);var c=d(a,"corner2",[1,1]);var h=b.plus(c).times(.5);c=c.minus(b).times(.5)}else h=d(a,"center",[0,0]),c=d(a,"radius",[1,1]);c=c.abs();b=g(a,"roundradius",.2);a=f(a,"resolution",e);b=
Math.min(b,Math.min(c.x,c.y)-.1);b=Math.max(0,b);c=new l(c.x-b,c.y-b);h=p({center:h,radius:c});0<b&&(h=h.expand(b,a));return h},fromCompactBinary:a.fromCompactBinary}},{"../core/CAG":14,"../core/CAGFactories":15,"../core/constants":23,"../core/math/Path2":28,"../core/math/Vector2":33,"../core/math/Vertex2":35,"./optionParsers":10}],12:[function(a,b,c){c=a("./optionParsers");var d=c.parseOption,g=c.parseOptionAs3DVector,f=c.parseOptionAs2DVector,e=c.parseOptionAs3DVectorList,l=c.parseOptionAsFloat,
k=c.parseOptionAsInt;c=a("../core/constants");var h=c.defaultResolution3D,n=c.defaultResolution2D,p=c.EPS,m=a("../core/math/Vector3"),q=a("../core/math/Vertex3"),r=a("../core/math/Polygon3"),v=a("../core/connectors").Connector,w=a("../core/Properties"),y=a("../core/CSGFactories").fromPolygons,x=function(a){a=a||{};var b=g(a,"center",[0,0,0]),c=l(a,"radius",1),e=k(a,"resolution",h);if("axes"in a){var d=a.axes[0].unit().times(c);var f=a.axes[1].unit().times(c);a=a.axes[2].unit().times(c)}else d=(new m([1,
0,0])).times(c),f=(new m([0,-1,0])).times(c),a=(new m([0,0,1])).times(c);4>e&&(e=4);c=Math.round(e/4);for(var n,p=[],t=0;t<=e;t++){var v=2*Math.PI*t/e;v=d.times(Math.cos(v)).plus(f.times(Math.sin(v)));if(0<t)for(var x,D=void 0,z,A=0;A<=c;A++){x=.5*Math.PI*A/c;var J=Math.cos(x),K=Math.sin(x);0<A&&(x=[],x.push(new q(b.plus(n.times(D).minus(a.times(z))))),x.push(new q(b.plus(v.times(D).minus(a.times(z))))),A<c&&x.push(new q(b.plus(v.times(J).minus(a.times(K))))),x.push(new q(b.plus(n.times(J).minus(a.times(K))))),
p.push(new r(x)),x=[],x.push(new q(b.plus(n.times(D).plus(a.times(z))))),x.push(new q(b.plus(v.times(D).plus(a.times(z))))),A<c&&x.push(new q(b.plus(v.times(J).plus(a.times(K))))),x.push(new q(b.plus(n.times(J).plus(a.times(K))))),x.reverse(),p.push(new r(x)));D=J;z=K}n=v}e=y(p);e.properties.sphere=new w;e.properties.sphere.center=new m(b);e.properties.sphere.facepoint=b.plus(d);return e};b.exports={cube:function(a){a=a||{};if("corner1"in a||"corner2"in a){if("center"in a||"radius"in a)throw Error("cube: should either give a radius and center parameter, or a corner1 and corner2 parameter");
var b=g(a,"corner1",[0,0,0]);a=g(a,"corner2",[1,1,1]);var c=b.plus(a).times(.5);var e=a.minus(b).times(.5)}else c=g(a,"center",[0,0,0]),e=g(a,"radius",[1,1,1]);e=e.abs();b=y([[[0,4,6,2],[-1,0,0]],[[1,3,7,5],[1,0,0]],[[0,1,5,4],[0,-1,0]],[[2,6,7,3],[0,1,0]],[[0,2,3,1],[0,0,-1]],[[4,5,7,6],[0,0,1]]].map(function(a){a=a[0].map(function(a){a=new m(c.x+e.x*(2*!!(a&1)-1),c.y+e.y*(2*!!(a&2)-1),c.z+e.z*(2*!!(a&4)-1));return new q(a)});return new r(a,null)}));b.properties.cube=new w;b.properties.cube.center=
new m(c);b.properties.cube.facecenters=[new v((new m([e.x,0,0])).plus(c),[1,0,0],[0,0,1]),new v((new m([-e.x,0,0])).plus(c),[-1,0,0],[0,0,1]),new v((new m([0,e.y,0])).plus(c),[0,1,0],[0,0,1]),new v((new m([0,-e.y,0])).plus(c),[0,-1,0],[0,0,1]),new v((new m([0,0,e.z])).plus(c),[0,0,1],[1,0,0]),new v((new m([0,0,-e.z])).plus(c),[0,0,-1],[1,0,0])];return b},sphere:x,roundedCube:function(a){a=a||{};if("corner1"in a||"corner2"in a){if("center"in a||"radius"in a)throw Error("roundedCube: should either give a radius and center parameter, or a corner1 and corner2 parameter");
var b=g(a,"corner1",[0,0,0]);var c=g(a,"corner2",[1,1,1]);var e=b.plus(c).times(.5);b=c.minus(b).times(.5)}else e=g(a,"center",[0,0,0]),b=g(a,"radius",[1,1,1]);b=b.abs();c=k(a,"resolution",h);4>c&&(c=4);1===c%2&&8>c&&(c=8);a=g(a,"roundradius",[.2,.2,.2]);a=m.Create(Math.max(a.x,.01),Math.max(a.y,.01),Math.max(a.z,.01));var d=b.minus(a);if(0>d.x||0>d.y||0>d.z)throw Error("roundradius <= radius!");c=x({radius:1,resolution:c});c=c.scale(a);d.x>p&&(c=c.stretchAtPlane([1,0,0],[0,0,0],2*d.x));d.y>p&&(c=
c.stretchAtPlane([0,1,0],[0,0,0],2*d.y));d.z>p&&(c=c.stretchAtPlane([0,0,1],[0,0,0],2*d.z));c=c.translate([-d.x+e.x,-d.y+e.y,-d.z+e.z]);c=c.reTesselated();c.properties.roundedCube=new w;c.properties.roundedCube.center=new q(e);c.properties.roundedCube.facecenters=[new v((new m([b.x,0,0])).plus(e),[1,0,0],[0,0,1]),new v((new m([-b.x,0,0])).plus(e),[-1,0,0],[0,0,1]),new v((new m([0,b.y,0])).plus(e),[0,1,0],[0,0,1]),new v((new m([0,-b.y,0])).plus(e),[0,-1,0],[0,0,1]),new v((new m([0,0,b.z])).plus(e),
[0,0,1],[1,0,0]),new v((new m([0,0,-b.z])).plus(e),[0,0,-1],[1,0,0])];return c},cylinder:function(a){function b(a,b,e){b=b*Math.PI*f/180;b=t.times(Math.cos(b)).plus(x.times(Math.sin(b)));a=c.plus(m.times(a)).plus(b.times(e));return new q(a)}var c=g(a,"start",[0,-1,0]),e=g(a,"end",[0,1,0]),h=l(a,"radius",1),d=l(a,"radiusEnd",h);h=l(a,"radiusStart",h);var f=l(a,"sectorAngle",360);f=360<f?f%360:f;if(0>d||0>h)throw Error("Radius should be non-negative");if(0===d&&0===h)throw Error("Either radiusStart or radiusEnd should be positive");
var p=k(a,"resolution",n),m=e.minus(c);a=m.unit();var t=a.randomNonParallelVector().unit(),x=t.cross(a).unit(),D=new q(c),z=new q(e),A=[];if(0<f){for(var J=0;J<p;J++){var K=J/p,M=(J+1)/p;d===h?(A.push(new r([D,b(0,K,d),b(0,M,d)])),A.push(new r([b(0,M,d),b(0,K,d),b(1,K,d),b(1,M,d)])),A.push(new r([z,b(1,M,d),b(1,K,d)]))):(0<h&&(A.push(new r([D,b(0,K,h),b(0,M,h)])),A.push(new r([b(0,K,h),b(1,K,d),b(0,M,h)]))),0<d&&(A.push(new r([z,b(1,M,d),b(1,K,d)])),A.push(new r([b(1,K,d),b(1,M,d),b(0,M,h)]))))}360>
f&&(A.push(new r([D,z,b(0,0,h)])),A.push(new r([b(0,0,h),z,b(1,0,d)])),A.push(new r([D,b(0,1,h),z])),A.push(new r([b(0,1,h),b(1,1,d),z])))}p=y(A);p.properties.cylinder=new w;p.properties.cylinder.start=new v(c,a.negated(),t);p.properties.cylinder.end=new v(e,a,t);e=c.plus(m.times(.5));d=t.rotate(c,a,-f/2).times((h+d)/2);h=d.cross(a);p.properties.cylinder.facepointH=new v(e.plus(d),d,a);p.properties.cylinder.facepointH90=new v(e.plus(h),h,a);return p},roundedCylinder:function(a){var b=g(a,"start",
[0,-1,0]),c=g(a,"end",[0,1,0]),e=l(a,"radius",1),d=c.minus(b);var f=Math.abs(d.x)>Math.abs(d.y)?new m(0,1,0):new m(1,0,0);var n=g(a,"normal",f);a=k(a,"resolution",h);4>a&&(a=4);f=[];var t=Math.floor(.25*a);if(d.length()<p)return x({center:b,radius:e,resolution:a});var E=d.unit().times(e);d=E.cross(n).unit().times(e);e=d.cross(E).unit().times(e);for(n=0;n<=a;n++){var H=2*Math.PI*n/a;H=d.times(Math.cos(H)).plus(e.times(Math.sin(H)));if(0<n){var I=[];I.push(new q(b.plus(H)));I.push(new q(b.plus(M)));
I.push(new q(c.plus(M)));I.push(new q(c.plus(H)));f.push(new r(I));for(var D=void 0,z,A=0;A<=t;A++){I=.5*Math.PI*A/t;var J=Math.cos(I),K=Math.sin(I);0<A&&(I=[],I.push(new q(b.plus(M.times(D).minus(E.times(z))))),I.push(new q(b.plus(H.times(D).minus(E.times(z))))),A<t&&I.push(new q(b.plus(H.times(J).minus(E.times(K))))),I.push(new q(b.plus(M.times(J).minus(E.times(K))))),f.push(new r(I)),I=[],I.push(new q(c.plus(M.times(D).plus(E.times(z))))),I.push(new q(c.plus(H.times(D).plus(E.times(z))))),A<t&&
I.push(new q(c.plus(H.times(J).plus(E.times(K))))),I.push(new q(c.plus(M.times(J).plus(E.times(K))))),I.reverse(),f.push(new r(I)));D=J;z=K}}var M=H}M=y(f);z=E.unit();a=d.unit();M.properties.roundedCylinder=new w;M.properties.roundedCylinder.start=new v(b,z.negated(),a);M.properties.roundedCylinder.end=new v(c,z,a);M.properties.roundedCylinder.facepoint=b.plus(d);return M},cylinderElliptic:function(a){function b(a,b,e){b=b*Math.PI*2;e=m.times(e._x*Math.cos(b)).plus(t.times(e._y*Math.sin(b)));a=c.plus(l.times(a)).plus(e);
return new q(a)}var c=g(a,"start",[0,-1,0]),e=g(a,"end",[0,1,0]),h=f(a,"radius",[1,1]),d=f(a,"radiusEnd",h);h=f(a,"radiusStart",h);if(0>d._x||0>h._x||0>d._y||0>h._y)throw Error("Radius should be non-negative");if(!(0!==d._x&&0!==d._y||0!==h._x&&0!==h._y))throw Error("Either radiusStart or radiusEnd should be positive");var p=k(a,"resolution",n),l=e.minus(c);a=l.unit();for(var m=a.randomNonParallelVector().unit(),t=m.cross(a).unit(),x=new q(c),D=new q(e),z=[],A=0;A<p;A++){var J=A/p,K=(A+1)/p;d._x===
h._x&&d._y===h._y?(z.push(new r([x,b(0,J,d),b(0,K,d)])),z.push(new r([b(0,K,d),b(0,J,d),b(1,J,d),b(1,K,d)])),z.push(new r([D,b(1,K,d),b(1,J,d)]))):(0<h._x&&(z.push(new r([x,b(0,J,h),b(0,K,h)])),z.push(new r([b(0,J,h),b(1,J,d),b(0,K,h)]))),0<d._x&&(z.push(new r([D,b(1,K,d),b(1,J,d)])),z.push(new r([b(1,J,d),b(1,K,d),b(0,K,h)]))))}d=y(z);d.properties.cylinder=new w;d.properties.cylinder.start=new v(c,a.negated(),m);d.properties.cylinder.end=new v(e,a,m);d.properties.cylinder.facepoint=c.plus(m.times(h));
return d},polyhedron:function(a){a=a||{};if("points"in a!=="faces"in a)throw Error("polyhedron needs 'points' and 'faces' arrays");var b=e(a,"points",[[1,1,0],[1,-1,0],[-1,-1,0],[-1,1,0],[0,0,1]]).map(function(a){return new q(a)});a=d(a,"faces",[[0,1,4],[1,2,4],[2,3,4],[3,0,4],[1,0,3],[2,1,3]]);a.forEach(function(a){a.reverse()});a=a.map(function(a){return new r(a.map(function(a){return b[a]}))});return y(a).reTesselated()}}},{"../core/CSGFactories":17,"../core/Properties":21,"../core/connectors":22,
"../core/constants":23,"../core/math/Polygon3":31,"../core/math/Vector3":34,"../core/math/Vertex3":36,"./optionParsers":10}],13:[function(a,b,c){var d=a("../core/math/Polygon3"),g=a("../core/CSGFactories").fromPolygons,f=a("../core/utils").fnSortByIndex,e=function(a,b,c,e){b=b.vertices.slice(0);var h=c.vertices.slice(0);c=c.shared||null;b[0].pos.equals(b[b.length-1].pos)||b.push(b[0]);h[0].pos.equals(h[h.length-1].pos)||h.push(h[0]);e&&(b=b.reverse(),h=h.reverse());e=h.length-1;var g=b.length-1,k=
e-g,n=0<k,l=0>k,w=[];for(k=Math.abs(k);0<k;k--)w.push({len:Infinity,index:-1});if(l)for(var y=0;y<g;y++){k=b[y].pos.distanceToSquared(b[y+1].pos);for(var x=w.length-1;0<=x;x--)if(w[x].len>k){w[x].len=k;w.index=x;break}}else if(n)for(y=0;y<e;y++)for(k=h[y].pos.distanceToSquared(h[y+1].pos),x=w.length-1;0<=x;x--)if(w[x].len>k){w[x].len=k;w.index=x;break}w.sort(f);k=b[0];y=h[0];for(var t,u,C=x=0,F=e+g;x+C<F;){if(w.length)if(n&&C===w[0].index){t=h[++C];a.push(new d([t,y,k],c));y=t;w.shift();continue}else if(l&&
x===w[0].index){t=b[++x];a.push(new d([y,k,t],c));k=t;w.shift();continue}t=x<g?y.pos.distanceToSquared(b[x+1].pos):Infinity;u=C<e?k.pos.distanceToSquared(h[C+1].pos):Infinity;t<=u?(t=b[++x],a.push(new d([y,k,t],c)),k=t):C<e&&(t=h[++C],a.push(new d([t,y,k],c)),y=t)}return a};b.exports=function(a,b){var c=[],f=null,k=null,l=null,q=null,r=2,v=!1,w=null;if(b&&(v=!!b.loop,b.numslices&&(r=b.numslices),b.callback))var y=b.callback;if(!y){var x=d.createFromPoints([[0,0,0],[1,0,0],[1,1,0],[0,1,0]]);y=function(a,
b){return 0===a||1===a?x.translate([0,0,a]):null}}b=0;for(--r;b<=r;b++)if(f=y.call(a,b/r,b)){if(!(f instanceof d))throw Error("Polygon.solidFromSlices callback error: Polygon expected");f.checkIfConvex();k?(null===w&&(w=0>k.plane.signedDistanceToPoint(f.vertices[0].pos)),e(c,k,f,w)):l=f;k=f}q=f;v?l.vertices.length===q.vertices.length&&l.vertices.every(function(a,b){return a.pos.equals(q.vertices[b].pos)})||e(c,q,l,w):(c.unshift(w?l:l.flipped()),c.push(w?q.flipped():q));return g(c)}},{"../core/CSGFactories":17,
"../core/math/Polygon3":31,"../core/utils":41}],14:[function(a,b,c){var d=a("./connectors").Connector,g=a("./math/Vertex3"),f=a("./math/Vector2"),e=a("./math/Vector3"),l=a("./math/Polygon3"),k=a("./CSGFactories").fromPolygons;c=a("./CAGFactories");var h=c.fromSides,n=c.fromFakeCSG,p=a("./utils/canonicalize"),m=a("./utils/retesellate");c=a("./utils/cagValidation");var q=c.isCAGValid,r=c.isSelfIntersecting,v=c.hasPointInside;c=a("./utils/cagMeasurements");var w=c.area,y=c.getBounds,x=a("../api/ops-cnc").overCutInsideCorners;
c=a("../api/ops-extrusions");var t=c.extrudeInOrthonormalBasis,u=c.extrudeInPlane,C=c.extrude,F=c.rotateExtrude,N=a("../api/cagOutlinePaths"),L=a("../api/center");a=a("../api/ops-expandContract");var B=a.expand,G=a.contract,E=a.expandedShellOfCAG;a=function(){this.sides=[];this.isCanonicalized=!1};a.prototype={union:function(a){a=a instanceof Array?a:[a];var b=this._toCSGWall(-1,1);b=b.union(a.map(function(a){return a._toCSGWall(-1,1).reTesselated()}),!1,!1);return n(b).canonicalized()},subtract:function(a){a=
a instanceof Array?a:[a];var b=this._toCSGWall(-1,1);a.map(function(a){b=b.subtractSub(a._toCSGWall(-1,1),!1,!1)});b=b.reTesselated();b=b.canonicalized();b=n(b);return b=b.canonicalized()},intersect:function(a){a=a instanceof Array?a:[a];var b=this._toCSGWall(-1,1);a.map(function(a){b=b.intersectSub(a._toCSGWall(-1,1),!1,!1)});b=b.reTesselated();b=b.canonicalized();b=n(b);return b=b.canonicalized()},transform:function(a){var b=a.isMirroring(),c=this.sides.map(function(b){return b.transform(a)});c=
h(c);b&&(c=c.flipped());return c},flipped:function(){var a=this.sides.map(function(a){return a.flipped()});a.reverse();return h(a)},center:function(a){return L({axes:a},[this])},expandedShell:function(a,b){return E(this,a,b)},expand:function(a,b){return B(this,a,b)},contract:function(a,b){return G(this,a,b)},area:function(){return w(this)},getBounds:function(){return y(this)},isSelfIntersecting:function(a){return r(this,a)},extrudeInOrthonormalBasis:function(a,b,c){return t(this,a,b,c)},extrudeInPlane:function(a,
b,c,e){return u(this,a,b,c,e)},extrude:function(a){return C(this,a)},rotateExtrude:function(a){return F(this,a)},check:function(){return q(this)},canonicalized:function(){return p(this)},reTesselated:function(){return m(this)},getOutlinePaths:function(){return N(this)},overCutInsideCorners:function(a){return x(this,a)},hasPointInside:function(a){return v(this,a)},toString:function(){var a="CAG ("+this.sides.length+" sides):\n";this.sides.map(function(b){a+="  "+b.toString()+"\n"});return a},_toCSGWall:function(a,
b){var c=this.sides.map(function(c){return c.toPolygon3D(a,b)});return k(c)},_toVector3DPairs:function(a){var b=this.sides.map(function(a){var b=a.vertex0.pos;a=a.vertex1.pos;return[e.Create(b.x,b.y,0),e.Create(a.x,a.y,0)]});"undefined"!==typeof a&&(b=b.map(function(b){return b.map(function(b){return b.transform(a)})}));return b},_toPlanePolygons:function(a){a=Object.assign({},{flipped:!1},a);var b=a.flipped,c=[0,0,0],h=[0,0,1],n=[0,1,0],p=new d(c,h,n);c=a.translation||c;h=a.axisVector||h;n=a.normalVector||
n;a=a.toConnector||new d(c,h,n);var m=p.getTransformationTo(a,!1,0);a=this.getBounds();a[0]=a[0].minus(new f(1,1));a[1]=a[1].plus(new f(1,1));p=this._toCSGWall(-1,1);a=k([new l([new g(new e(a[0].x,a[0].y,0)),new g(new e(a[1].x,a[0].y,0)),new g(new e(a[1].x,a[1].y,0)),new g(new e(a[0].x,a[1].y,0))])]);b&&(a=a.invert());a=a.intersectSub(p);return a.polygons.filter(function(a){return.99<Math.abs(a.plane.normal.z)}).map(function(a){return a.transform(m)})},_toWallPolygons:function(a){var b=new d([0,0,
0],[0,0,1],[0,1,0]),c=a.toConnector1,e=a.toConnector2;if(!(c instanceof d&&e instanceof d))throw Error("could not parse Connector arguments toConnector1 or toConnector2");if(a.cag&&a.cag.sides.length!==this.sides.length)throw Error("target cag needs same sides count as start cag");a=a.cag||this;c=b.getTransformationTo(c,!1,0);b=b.getTransformationTo(e,!1,0);e=this._toVector3DPairs(c);var h=a._toVector3DPairs(b),f=[];e.forEach(function(a,b){f.push(new l([new g(h[b][1]),new g(h[b][0]),new g(a[0])]));
f.push(new l([new g(h[b][1]),new g(a[0]),new g(a[1])]))});return f},toPoints:function(){var a=this.sides.map(function(a){return a.vertex0.pos});0<a.length&&a.push(a.shift());return a},toCompactBinary:function(){var a=this.canonicalized(),b={},c=[],e=0,h=new Uint32Array(2*a.sides.length),d=0;a.sides.map(function(a){[a.vertex0,a.vertex1].map(function(a){var f=a.getTag();if(f in b)var k=b[f];else k=e++,b[f]=k,c.push(a);h[d++]=k})});var f=new Float64Array(2*e),k=0;c.map(function(a){a=a.pos;f[k++]=a._x;
f[k++]=a._y});return{"class":"CAG",sideVertexIndices:h,vertexData:f}}};b.exports=a},{"../api/cagOutlinePaths":1,"../api/center":2,"../api/ops-cnc":6,"../api/ops-expandContract":8,"../api/ops-extrusions":9,"./CAGFactories":15,"./CSGFactories":17,"./connectors":22,"./math/Polygon3":31,"./math/Vector2":33,"./math/Vector3":34,"./math/Vertex3":36,"./utils/cagMeasurements":42,"./utils/cagValidation":43,"./utils/canonicalize":44,"./utils/retesellate":48}],15:[function(a,b,c){var d=a("./math/Side"),g=a("./math/Vector2"),
f=a("./math/Vertex2"),e=a("./constants").areaEPS;c=a("./utils/cagValidation");var l=c.isSelfIntersecting,k=c.contains;c=a("../api/ops-booleans");var h=c.union,n=c.difference,p=function(b){var c=new (a("./CAG"));c.sides=b;return c},m=function(a){if(!a)throw Error("points parameter must be defined");if(!Array.isArray(a))throw Error("points parameter must be an array");if(void 0!==a[0].x||"number"===typeof a[0][0])return q(a);if("object"===typeof a[0][0])return r(a);throw Error("Unsupported points list format");
},q=function(a){if(3>a.length)throw Error("CAG shape needs at least 3 points");var b=[],c=new f(new g(a[a.length-1]));a.map(function(a){a=new f(new g(a));b.push(new d(c,a));c=a});a=p(b);if(l(a))throw Error("Polygon is self intersecting!");var h=a.area();if(Math.abs(h)<e)throw Error("Degenerate polygon!");0>h&&(a=a.flipped());return a.canonicalized()},r=function(a){if(1===a.length)return m(a[0]);var b=[];a.forEach(function(a){b.push(q(a))});var c={};b.forEach(function(a,e){b.forEach(function(b,h){a!==
b&&(c[e]||(c[e]={parents:[],isHole:!1}),c[h]||(c[h]={parents:[],isHole:!1}),k(b,a)&&(c[e].parents.push(h),c[e].isHole=!!(c[e].parents.length%2),c[h].isHole=!!(c[h].parents.length%2)))})});a=null;for(key in c)a=c[key],a.isHole&&(delete c[key],a.parents.forEach(function(a){b[a]=n(b[a],b[key])}));a=p([]);for(key in c)a=h(a,b[key]);return a};b.exports={fromSides:p,fromObject:function(a){var b=a.sides.map(function(a){return d.fromObject(a)});b=p(b);b.isCanonicalized=a.isCanonicalized;return b},fromPoints:m,
fromPointsNoCheck:function(a){var b=[],c=new g(a[a.length-1]),e=new f(c);a.map(function(a){a=new g(a);a=new f(a);var c=new d(e,a);b.push(c);e=a});return p(b)},fromPath2:function(a){if(!a.isClosed())throw Error("The path should be closed!");return m(a.getPoints())},fromFakeCSG:function(a){a=a.polygons.map(function(a){return d._fromFakePolygon(a)}).filter(function(a){return null!==a});return p(a)},fromCompactBinary:function(a){if("CAG"!==a["class"])throw Error("Not a CAG");for(var b=[],c=a.vertexData,
e=c.length/2,h=0,k=0;k<e;k++){var n=c[h++],l=c[h++];n=new g(n,l);n=new f(n);b.push(n)}c=[];e=a.sideVertexIndices.length/2;for(k=h=0;k<e;k++)n=a.sideVertexIndices[h++],l=a.sideVertexIndices[h++],n=new d(b[n],b[l]),c.push(n);a=p(c);a.isCanonicalized=!0;return a}}},{"../api/ops-booleans":5,"./CAG":14,"./constants":23,"./math/Side":32,"./math/Vector2":33,"./math/Vertex2":35,"./utils/cagValidation":43}],16:[function(a,b,c){var d=a("./trees"),g=a("./math/Polygon3"),f=a("./math/Plane"),e=a("./math/OrthoNormalBasis");
a("./CAG");var l=a("./Properties"),k=a("./CSGFactories").fromPolygons,h=a("./utils/fixTJunctions"),n=a("./utils/canonicalize"),p=a("./utils/retesellate"),m=a("./utils/csgMeasurements").bounds,q=a("./utils/csgProjections").projectToOrthoNormalBasis;c=a("../api/ops-cnc");var r=c.lieFlat,v=c.getTransformationToFlatLying,w=c.getTransformationAndInverseTransformationToFlatLying;c=a("../api/ops-cuts");var y=c.sectionCut,x=c.cutByPlane,t=a("../api/center");a=a("../api/ops-expandContract");var u=a.expand,
C=a.contract,F=a.expandedShellOfCCSG;a=function(){this.polygons=[];this.properties=new l;this.isRetesselated=this.isCanonicalized=!0};a.prototype={union:function(a){a instanceof Array?(a=a.slice(0),a.push(this)):a=[this,a];var b;for(b=1;b<a.length;b+=2)a.push(a[b-1].unionSub(a[b]));return a[b-1].reTesselated().canonicalized()},unionSub:function(a,b,c){if(this.mayOverlap(a)){var e=new d(this.polygons),h=new d(a.polygons);e.clipTo(h,!1);h.clipTo(e);h.invert();h.clipTo(e);h.invert();e=e.allPolygons().concat(h.allPolygons());
e=k(e);e.properties=this.properties._merge(a.properties);b&&(e=e.reTesselated());c&&(e=e.canonicalized());return e}return this.unionForNonIntersecting(a)},unionForNonIntersecting:function(a){var b=this.polygons.concat(a.polygons);b=k(b);b.properties=this.properties._merge(a.properties);b.isCanonicalized=this.isCanonicalized&&a.isCanonicalized;b.isRetesselated=this.isRetesselated&&a.isRetesselated;return b},subtract:function(a){a=a instanceof Array?a:[a];for(var b=this,c=0;c<a.length;c++){var e=c===
a.length-1;b=b.subtractSub(a[c],e,e)}return b},subtractSub:function(a,b,c){var e=new d(this.polygons),h=new d(a.polygons);e.invert();e.clipTo(h);h.clipTo(e,!0);e.addPolygons(h.allPolygons());e.invert();e=k(e.allPolygons());e.properties=this.properties._merge(a.properties);b&&(e=e.reTesselated());c&&(e=e.canonicalized());return e},intersect:function(a){a=a instanceof Array?a:[a];for(var b=this,c=0;c<a.length;c++){var e=c===a.length-1;b=b.intersectSub(a[c],e,e)}return b},intersectSub:function(a,b,c){var e=
new d(this.polygons),h=new d(a.polygons);e.invert();h.clipTo(e);h.invert();e.clipTo(h);h.clipTo(e);e.addPolygons(h.allPolygons());e.invert();e=k(e.allPolygons());e.properties=this.properties._merge(a.properties);b&&(e=e.reTesselated());c&&(e=e.canonicalized());return e},invert:function(){var a=this.polygons.map(function(a){return a.flipped()});return k(a)},transform1:function(a){var b=this.polygons.map(function(b){return b.transform(a)});b=k(b);b.properties=this.properties._transform(a);b.isRetesselated=
this.isRetesselated;return b},transform:function(a){var b=a.isMirroring(),c={},e={},h=this.polygons.map(function(h){var d=h.plane;var f=d.getTag();f in e?d=e[f]:(d=d.transform(a),e[f]=d);f=h.vertices.map(function(b){var e=b.getTag();e in c?b=c[e]:(b=b.transform(a),c[e]=b);return b});b&&f.reverse();return new g(f,h.shared,d)});h=k(h);h.properties=this.properties._transform(a);h.isRetesselated=this.isRetesselated;h.isCanonicalized=this.isCanonicalized;return h},center:function(a){return t({axes:a},
[this])},expand:function(a,b){return u(this,a,b)},contract:function(a,b){return C(this,a,b)},expandedShell:function(a,b,c){return F(this,a,b,c)},stretchAtPlane:function(a,b,c){a=f.fromNormalAndPoint(a,b);b=new e(a);b=this.sectionCut(b).extrudeInOrthonormalBasis(b,c);var h=this.cutByPlane(a),d=this.cutByPlane(a.flipped());return h.union([b,d.translate(a.normal.times(c))])},canonicalized:function(){return n(this)},reTesselated:function(){return p(this)},fixTJunctions:function(){return h(k,this)},getBounds:function(){return m(this)},
mayOverlap:function(a){if(0===this.polygons.length||0===a.polygons.length)return!1;var b=m(this);a=m(a);return b[1].x<a[0].x||b[0].x>a[1].x||b[1].y<a[0].y||b[0].y>a[1].y||b[1].z<a[0].z||b[0].z>a[1].z?!1:!0},cutByPlane:function(a){return x(this,a)},connectTo:function(a,b,c,e){a=a.getTransformationTo(b,c,e);return this.transform(a)},setShared:function(a){var b=this.polygons.map(function(b){return new g(b.vertices,a,b.plane)});b=k(b);b.properties=this.properties;b.isRetesselated=this.isRetesselated;
b.isCanonicalized=this.isCanonicalized;return b},setColor:function(a){var b=g.Shared.fromColor.apply(this,arguments);return this.setShared(b)},getTransformationAndInverseTransformationToFlatLying:function(){return w(this)},getTransformationToFlatLying:function(){return v(this)},lieFlat:function(){return r(this)},projectToOrthoNormalBasis:function(a){return q(this,a)},sectionCut:function(a){return y(this,a)},getFeatures:function(a){a instanceof Array||(a=[a]);var b=this.toTriangles().map(function(b){return b.getTetraFeatures(a)}).reduce(function(a,
b){return b.map(function(b,c){return b+(0===a?0:a[c])})},0);return 1===b.length?b[0]:b},toPolygons:function(){return this.polygons},toString:function(){var a="CSG solid:\n";this.polygons.map(function(b){a+=b.toString()});return a},toCompactBinary:function(){var a=this.canonicalized(),b=a.polygons.length,c=0,e=0,h={},d=[],f=0,k={},g=[],n=[],p={},l=0;a.polygons.map(function(a){a.vertices.map(function(a){++c;var b=a.getTag();b in h||(h[b]=e++,d.push(a))});var b=a.plane.getTag();b in k||(k[b]=f++,g.push(a.plane));
b=a.shared.getTag();b in p||(p[b]=l++,n.push(a.shared))});for(var m=new Uint32Array(b),q=new Uint32Array(b),r=new Uint32Array(c),v=new Uint32Array(b),t=new Float64Array(3*e),w=new Float64Array(4*f),y=0,x=0;x<b;++x){var u=a.polygons[x];m[x]=u.vertices.length;u.vertices.map(function(a){a=a.getTag();a=h[a];r[y++]=a});var C=u.plane.getTag();v[x]=k[C];u=u.shared.getTag();q[x]=p[u]}var F=0;d.map(function(a){a=a.pos;t[F++]=a._x;t[F++]=a._y;t[F++]=a._z});var T=0;g.map(function(a){var b=a.normal;w[T++]=b._x;
w[T++]=b._y;w[T++]=b._z;w[T++]=a.w});return{"class":"CSG",numPolygons:b,numVerticesPerPolygon:m,polygonPlaneIndexes:v,polygonSharedIndexes:q,polygonVertices:r,vertexData:t,planeData:w,shared:n}},toTriangles:function(){var a=[];this.polygons.forEach(function(b){for(var c=b.vertices[0],e=b.vertices.length-3;0<=e;e--)a.push(new g([c,b.vertices[e+1],b.vertices[e+2]],b.shared,b.plane))});return a}};b.exports=a},{"../api/center":2,"../api/ops-cnc":6,"../api/ops-cuts":7,"../api/ops-expandContract":8,"./CAG":14,
"./CSGFactories":17,"./Properties":21,"./math/OrthoNormalBasis":27,"./math/Plane":29,"./math/Polygon3":31,"./trees":40,"./utils/canonicalize":44,"./utils/csgMeasurements":45,"./utils/csgProjections":46,"./utils/fixTJunctions":47,"./utils/retesellate":48}],17:[function(a,b,c){var d=a("./math/Vector3"),g=a("./math/Vertex3"),f=a("./math/Plane"),e=a("./math/Polygon2"),l=a("./math/Polygon3"),k=function(b){var c=new (a("./CSG"));c.polygons=b;c.isCanonicalized=!1;c.isRetesselated=!1;return c};b.exports=
{fromPolygons:k,fromSlices:function(a){return e.createFromPoints([[0,0,0],[1,0,0],[1,1,0],[0,1,0]]).solidFromSlices(a)},fromObject:function(a){var b=a.polygons.map(function(a){return l.fromObject(a)});b=k(b);b.isCanonicalized=a.isCanonicalized;b.isRetesselated=a.isRetesselated;return b},fromCompactBinary:function(a){if("CSG"!==a["class"])throw Error("Not a CSG");for(var b=[],c=a.planeData,e=c.length/4,h=0,r,v,w,y,x=0;x<e;x++)r=c[h++],v=c[h++],w=c[h++],y=c[h++],r=d.Create(r,v,w),r=new f(r,y),b.push(r);
c=[];e=a.vertexData;x=e.length/3;for(y=h=0;y<x;y++)r=e[h++],v=e[h++],w=e[h++],r=d.Create(r,v,w),r=new g(r),c.push(r);v=a.shared.map(function(a){return l.Shared.fromObject(a)});w=[];e=a.numPolygons;x=a.numVerticesPerPolygon;y=a.polygonVertices;var t=a.polygonPlaneIndexes;a=a.polygonSharedIndexes;for(var u,C,F=h=0;F<e;F++){r=x[F];u=[];for(C=0;C<r;C++)u.push(c[y[h++]]);r=b[t[F]];C=v[a[F]];r=new l(u,C,r);w.push(r)}b=k(w);b.isCanonicalized=!0;b.isRetesselated=!0;return b}}},{"./CSG":16,"./math/Plane":29,
"./math/Polygon2":30,"./math/Polygon3":31,"./math/Vector3":34,"./math/Vertex3":36}],18:[function(a,b,c){a=function(a,b){this.lookuptable={};this.multiplier=1/b};a.prototype={lookupOrCreate:function(a,b){var c="",e=this.multiplier;a.forEach(function(a){c+=Math.round(a*e)+"/"});if(c in this.lookuptable)return this.lookuptable[c];b=b(a);var d=a.map(function(a){a=Math.floor(a*e);return[""+a+"/",""+(a+1)+"/"]});a=1<<a.length;for(var k={},h=0;h<a;k={hashmaskShifted:k.hashmaskShifted},++h)k.hashmaskShifted=
h,c="",d.forEach(function(a){return function(b){c+=b[a.hashmaskShifted&1];a.hashmaskShifted>>=1}}(k)),this.lookuptable[c]=b;return b}};b.exports=a},{}],19:[function(a,b,c){var d=a("./FuzzyFactory"),g=a("./constants").EPS,f=a("./math/Side");a=function(){this.vertexfactory=new d(2,g)};a.prototype={getVertex:function(a){return this.vertexfactory.lookupOrCreate([a.pos._x,a.pos._y],function(b){return a})},getSide:function(a){var b=this.getVertex(a.vertex0);a=this.getVertex(a.vertex1);return new f(b,a)}};
b.exports=a},{"./FuzzyFactory":18,"./constants":23,"./math/Side":32}],20:[function(a,b,c){var d=a("./constants").EPS,g=a("./math/Polygon3"),f=a("./FuzzyFactory");a=function(){this.vertexfactory=new f(3,d);this.planefactory=new f(4,d);this.polygonsharedfactory={}};a.prototype={getPolygonShared:function(a){var b=a.getHash();return b in this.polygonsharedfactory?this.polygonsharedfactory[b]:this.polygonsharedfactory[b]=a},getVertex:function(a){return this.vertexfactory.lookupOrCreate([a.pos._x,a.pos._y,
a.pos._z],function(b){return a})},getPlane:function(a){return this.planefactory.lookupOrCreate([a.normal._x,a.normal._y,a.normal._z,a.w],function(b){return a})},getPolygon:function(a){var b=this.getPlane(a.plane),c=this.getPolygonShared(a.shared),e=this;a=a.vertices.map(function(a){return e.getVertex(a)});var d=[];if(0<a.length){var f=a[a.length-1].getTag();a.forEach(function(a){var b=a.getTag();b!==f&&d.push(a);f=b})}3>d.length&&(d=[]);return new g(d,c,b)}};b.exports=a},{"./FuzzyFactory":18,"./constants":23,
"./math/Polygon3":31}],21:[function(a,b,c){var d=function(){};d.prototype={_transform:function(a){var b=new d;d.transformObj(this,b,a);return b},_merge:function(a){var b=new d;d.cloneObj(this,b);d.addFrom(b,a);return b}};d.transformObj=function(a,b,c){for(var e in a)if("_transform"!==e&&"_merge"!==e){var f=a[e],h=f;"object"===typeof f&&("transform"in f&&"function"===typeof f.transform?h=f.transform(c):f instanceof Array?(h=[],d.transformObj(f,h,c)):f instanceof d&&(h=new d,d.transformObj(f,h,c)));
b[e]=h}};d.cloneObj=function(a,b){for(var c in a)if("_transform"!==c&&"_merge"!==c){var f=a[c],k=f;if("object"===typeof f)if(f instanceof Array){k=[];for(var h=0;h<f.length;h++)k.push(f[h])}else f instanceof d&&(k=new d,d.cloneObj(f,k));b[c]=k}};d.addFrom=function(a,b){for(var c in b)"_transform"!==c&&"_merge"!==c&&(c in a&&"object"===typeof a[c]&&a[c]instanceof d&&"object"===typeof b[c]&&b[c]instanceof d?d.addFrom(a[c],b[c]):c in a||(a[c]=b[c]))};b.exports=d},{}],22:[function(a,b,c){var d=a("./math/Vector3"),
g=a("./math/Line3"),f=a("./math/Matrix4"),e=a("./math/OrthoNormalBasis"),l=a("./math/Plane"),k=function(a,b,c){this.point=new d(a);this.axisvector=(new d(b)).unit();this.normalvector=(new d(c)).unit()};k.prototype={normalized:function(){var a=this.axisvector.unit(),b=this.normalvector.cross(a).unit();b=a.cross(b);return new k(this.point,a,b)},transform:function(a){var b=this.point.multiply4x4(a),c=this.point.plus(this.axisvector).multiply4x4(a).minus(b);a=this.point.plus(this.normalvector).multiply4x4(a).minus(b);
return new k(b,c,a)},getTransformationTo:function(a,b,c){b=b?!0:!1;c=c?Number(c):0;var h=this.normalized();a=a.normalized();var k=f.translation(this.point.negated()),g=l.anyPlaneFromVector3Ds(new d(0,0,0),h.axisvector,a.axisvector);g=new e(g);var n=g.to2D(h.axisvector).angle(),p=g.to2D(a.axisvector).angle();n=180*(p-n)/Math.PI;b&&(n+=180);k=k.multiply(g.getProjectionMatrix());k=k.multiply(f.rotationZ(n));k=k.multiply(g.getInverseProjectionMatrix());h=h.transform(k);b=l.fromNormalAndPoint(a.axisvector,
new d(0,0,0));b=new e(b);n=b.to2D(h.normalvector).angle();p=b.to2D(a.normalvector).angle();n=180*(p-n)/Math.PI;n+=c;k=k.multiply(b.getProjectionMatrix());k=k.multiply(f.rotationZ(n));k=k.multiply(b.getInverseProjectionMatrix());return k=k.multiply(f.translation(a.point))},axisLine:function(){return new g(this.point,this.axisvector)},extend:function(a){a=this.point.plus(this.axisvector.unit().times(a));return new k(a,this.axisvector,this.normalvector)}};var h=function(a){this.connectors_=a?a.slice():
[]};h.defaultNormal=[0,0,1];h.fromPath2D=function(a,b,c){if(3===arguments.length)return h._fromPath2DTangents(a,b,c);if(2===arguments.length)return h._fromPath2DExplicit(a,b);throw Error("call with path2D and either 2 direction vectors, or a function returning direction vectors");};h._fromPath2DTangents=function(a,b,c){var e,d=a.points.length,f=new h([new k(a.points[0],b,h.defaultNormal)]);a.points.slice(1,d-1).forEach(function(b,c){e=a.points[c+2].minus(a.points[c]).toVector3D(0);f.appendConnector(new k(b.toVector3D(0),
e,h.defaultNormal))},this);f.appendConnector(new k(a.points[d-1],c,h.defaultNormal));f.closed=a.closed;return f};h._fromPath2DExplicit=function(a,b){function c(a,b,c){"function"===typeof a&&(a=a(b,c));return a}var e=new h(a.points.map(function(a,e){return new k(a.toVector3D(0),d.Create(1,0,0).rotateZ(c(b,a,e)),h.defaultNormal)},this));e.closed=a.closed;return e};h.prototype={setClosed:function(a){this.closed=!!a},appendConnector:function(a){this.connectors_.push(a)},followWith:function(b){function c(a,
b){"function"===typeof a&&(a=a(b.point,b.axisvector,b.normalvector));return a}var e=a("./CSG");this.verify();var h=[],d,f=this.connectors_[this.connectors_.length-1],k=c(b,f);this.connectors_.forEach(function(a,e){d=c(b,a);e||this.closed?h.push.apply(h,k._toWallPolygons({toConnector1:f,toConnector2:a,cag:d})):h.push.apply(h,d._toPlanePolygons({toConnector:a,flipped:!0}));e!==this.connectors_.length-1||this.closed||h.push.apply(h,d._toPlanePolygons({toConnector:a}));k=d;f=a},this);return e.fromPolygons(h).reTesselated().canonicalized()},
verify:function(){for(var a,b,c=0;c<this.connectors_.length-1;c++){a=this.connectors_[c];b=this.connectors_[c+1];if(0>=b.point.minus(a.point).dot(a.axisvector))throw Error("Invalid ConnectorList. Each connectors position needs to be within a <90deg range of previous connectors axisvector");if(0>=a.axisvector.dot(b.axisvector))throw Error("invalid ConnectorList. No neighboring connectors axisvectors may span a >=90deg angle");}}};b.exports={Connector:k,ConnectorList:h}},{"./CSG":16,"./math/Line3":25,
"./math/Matrix4":26,"./math/OrthoNormalBasis":27,"./math/Plane":29,"./math/Vector3":34}],23:[function(a,b,c){var d=1;b.exports={_CSGDEBUG:!1,defaultResolution2D:32,defaultResolution3D:12,EPS:1E-5,angleEPS:.1,areaEPS:5E-6*1E-5*Math.sin(.1),all:0,top:1,bottom:2,left:3,right:4,front:5,back:6,staticTag:d,getTag:function(){return d++}}},{}],24:[function(a,b,c){var d=a("./Vector2"),g=a("../utils").solve2Linear,f=function(a,b){a=new d(a);b=parseFloat(b);var c=a.length();b*=c;this.normal=a=a.times(1/c);this.w=
b};f.fromPoints=function(a,b){a=new d(a);b=new d(b);b=b.minus(a).normal().negated().unit();a=a.dot(b);return new f(b,a)};f.prototype={reverse:function(){return new f(this.normal.negated(),-this.w)},equals:function(a){return a.normal.equals(this.normal)&&a.w===this.w},origin:function(){return this.normal.times(this.w)},direction:function(){return this.normal.normal()},xAtY:function(a){return(this.w-this.normal._y*a)/this.normal.x},absDistanceToPoint:function(a){a=new d(a);a=a.dot(this.normal);return Math.abs(a-
this.w)},intersectWithLine:function(a){a=g(this.normal.x,this.normal.y,a.normal.x,a.normal.y,this.w,a.w);return a=new d(a)},transform:function(a){var b=new d(0,0),c=this.normal.times(this.w);b=b.multiply4x4(a);b=this.normal.multiply4x4(a).minus(b);a=c.multiply4x4(a);a=b.dot(a);return new f(b,a)}};b.exports=f},{"../utils":41,"./Vector2":33}],25:[function(a,b,c){var d=a("./Vector3"),g=a("../constants").EPS,f=a("../utils").solve2Linear,e=function(a,b){a=new d(a);b=new d(b);this.point=a;this.direction=
b.unit()};e.fromPoints=function(a,b){a=new d(a);b=new d(b);b=b.minus(a);return new e(a,b)};e.fromPlanes=function(a,b){var c=a.normal.cross(b.normal),k=c.length();if(k<g)throw Error("Parallel planes");c=c.times(1/k);k=Math.abs(c.x);var p=Math.abs(c.y),l=Math.abs(c.z);k>=p&&k>=l?(a=f(a.normal.y,a.normal.z,b.normal.y,b.normal.z,a.w,b.w),a=new d(0,a[0],a[1])):p>=k&&p>=l?(a=f(a.normal.x,a.normal.z,b.normal.x,b.normal.z,a.w,b.w),a=new d(a[0],0,a[1])):(a=f(a.normal.x,a.normal.y,b.normal.x,b.normal.y,a.w,
b.w),a=new d(a[0],a[1],0));return new e(a,c)};e.prototype={intersectWithPlane:function(a){a=(a.w-a.normal.dot(this.point))/a.normal.dot(this.direction);return this.point.plus(this.direction.times(a))},clone:function(a){return new e(this.point.clone(),this.direction.clone())},reverse:function(){return new e(this.point.clone(),this.direction.negated())},transform:function(a){var b=this.point.multiply4x4(a);a=this.point.plus(this.direction).multiply4x4(a).minus(b);return new e(b,a)},closestPointOnLine:function(a){a=
new d(a);a=a.minus(this.point).dot(this.direction)/this.direction.dot(this.direction);return this.point.plus(this.direction.times(a))},distanceToPoint:function(a){a=new d(a);var b=this.closestPointOnLine(a);return a.minus(b).length()},equals:function(a){return!this.direction.equals(a.direction)||this.distanceToPoint(a.point)>g?!1:!0}};b.exports=e},{"../constants":23,"../utils":41,"./Vector3":34}],26:[function(a,b,c){var d=a("./Vector3"),g=a("./Vector2"),f=a("./OrthoNormalBasis"),e=a("./Plane"),l=
function(a){this.elements=1<=arguments.length?a:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]};l.prototype={plus:function(a){for(var b=[],c=0;16>c;c++)b[c]=this.elements[c]+a.elements[c];return new l(b)},minus:function(a){for(var b=[],c=0;16>c;c++)b[c]=this.elements[c]-a.elements[c];return new l(b)},multiply:function(a){var b=this.elements[0],c=this.elements[1],e=this.elements[2],d=this.elements[3],f=this.elements[4],g=this.elements[5],k=this.elements[6],w=this.elements[7],y=this.elements[8],x=this.elements[9],
t=this.elements[10],u=this.elements[11],C=this.elements[12],F=this.elements[13],N=this.elements[14],L=this.elements[15],B=a.elements[0],G=a.elements[1],E=a.elements[2],H=a.elements[3],I=a.elements[4],D=a.elements[5],z=a.elements[6],A=a.elements[7],J=a.elements[8],K=a.elements[9],M=a.elements[10],Q=a.elements[11],P=a.elements[12],R=a.elements[13],S=a.elements[14];a=a.elements[15];var O=[];O[0]=b*B+c*I+e*J+d*P;O[1]=b*G+c*D+e*K+d*R;O[2]=b*E+c*z+e*M+d*S;O[3]=b*H+c*A+e*Q+d*a;O[4]=f*B+g*I+k*J+w*P;O[5]=
f*G+g*D+k*K+w*R;O[6]=f*E+g*z+k*M+w*S;O[7]=f*H+g*A+k*Q+w*a;O[8]=y*B+x*I+t*J+u*P;O[9]=y*G+x*D+t*K+u*R;O[10]=y*E+x*z+t*M+u*S;O[11]=y*H+x*A+t*Q+u*a;O[12]=C*B+F*I+N*J+L*P;O[13]=C*G+F*D+N*K+L*R;O[14]=C*E+F*z+N*M+L*S;O[15]=C*H+F*A+N*Q+L*a;return new l(O)},clone:function(){var a=this.elements.map(function(a){return a});return new l(a)},rightMultiply1x3Vector:function(a){var b=a._x,c=a._y,e=a._z;a=b*this.elements[0]+c*this.elements[1]+e*this.elements[2]+1*this.elements[3];var f=b*this.elements[4]+c*this.elements[5]+
e*this.elements[6]+1*this.elements[7],g=b*this.elements[8]+c*this.elements[9]+e*this.elements[10]+1*this.elements[11];b=b*this.elements[12]+c*this.elements[13]+e*this.elements[14]+1*this.elements[15];1!==b&&(b=1/b,a*=b,f*=b,g*=b);return new d(a,f,g)},leftMultiply1x3Vector:function(a){var b=a._x,c=a._y,e=a._z;a=b*this.elements[0]+c*this.elements[4]+e*this.elements[8]+1*this.elements[12];var f=b*this.elements[1]+c*this.elements[5]+e*this.elements[9]+1*this.elements[13],g=b*this.elements[2]+c*this.elements[6]+
e*this.elements[10]+1*this.elements[14];b=b*this.elements[3]+c*this.elements[7]+e*this.elements[11]+1*this.elements[15];1!==b&&(b=1/b,a*=b,f*=b,g*=b);return new d(a,f,g)},rightMultiply1x2Vector:function(a){var b=a.x,c=a.y;a=b*this.elements[0]+c*this.elements[1]+0*this.elements[2]+1*this.elements[3];var e=b*this.elements[4]+c*this.elements[5]+0*this.elements[6]+1*this.elements[7];b=b*this.elements[12]+c*this.elements[13]+0*this.elements[14]+1*this.elements[15];1!==b&&(b=1/b,a*=b,e*=b);return new g(a,
e)},leftMultiply1x2Vector:function(a){var b=a.x,c=a.y;a=b*this.elements[0]+c*this.elements[4]+0*this.elements[8]+1*this.elements[12];var e=b*this.elements[1]+c*this.elements[5]+0*this.elements[9]+1*this.elements[13];b=b*this.elements[3]+c*this.elements[7]+0*this.elements[11]+1*this.elements[15];1!==b&&(b=1/b,a*=b,e*=b);return new g(a,e)},isMirroring:function(){var a=new d(this.elements[0],this.elements[4],this.elements[8]),b=new d(this.elements[1],this.elements[5],this.elements[9]),c=new d(this.elements[2],
this.elements[6],this.elements[10]);return 0>a.cross(b).dot(c)}};l.unity=function(){return new l};l.rotationX=function(a){var b=1/180*Math.PI*a;a=Math.cos(b);b=Math.sin(b);return new l([1,0,0,0,0,a,b,0,0,-b,a,0,0,0,0,1])};l.rotationY=function(a){var b=1/180*Math.PI*a;a=Math.cos(b);b=Math.sin(b);return new l([a,0,-b,0,0,1,0,0,b,0,a,0,0,0,0,1])};l.rotationZ=function(a){var b=1/180*Math.PI*a;a=Math.cos(b);b=Math.sin(b);return new l([a,b,0,0,-b,a,0,0,0,0,1,0,0,0,0,1])};l.rotation=function(a,b,c){a=new d(a);
b=new d(b);b=e.fromNormalAndPoint(b,a);b=new f(b);var h=l.translation(a.negated());h=h.multiply(b.getProjectionMatrix());h=h.multiply(l.rotationZ(c));h=h.multiply(b.getInverseProjectionMatrix());return h=h.multiply(l.translation(a))};l.translation=function(a){a=new d(a);return new l([1,0,0,0,0,1,0,0,0,0,1,0,a.x,a.y,a.z,1])};l.mirroring=function(a){var b=a.normal.x,c=a.normal.y,e=a.normal.z;a=a.w;return new l([1-2*b*b,-2*c*b,-2*e*b,0,-2*b*c,1-2*c*c,-2*e*c,0,-2*b*e,-2*c*e,1-2*e*e,0,2*b*a,2*c*a,2*e*
a,1])};l.scaling=function(a){a=new d(a);return new l([a.x,0,0,0,0,a.y,0,0,0,0,a.z,0,0,0,0,1])};b.exports=l},{"./OrthoNormalBasis":27,"./Plane":29,"./Vector2":33,"./Vector3":34}],27:[function(a,b,c){var d=a("./Vector2"),g=a("./Vector3"),f=a("./Line2"),e=a("./Line3"),l=a("./Plane"),k=function(a,b){b=2>arguments.length?a.normal.randomNonParallelVector():new g(b);this.v=a.normal.cross(b).unit();this.u=this.v.cross(a.normal);this.plane=a;this.planeorigin=a.normal.times(a.w)};k.GetCartesian=function(a,
b){a=a+"/"+b;if("X/Y"===a)a=[0,0,1],b=[1,0,0];else if("Y/-X"===a)a=[0,0,1],b=[0,1,0];else if("-X/-Y"===a)a=[0,0,1],b=[-1,0,0];else if("-Y/X"===a)a=[0,0,1],b=[0,-1,0];else if("-X/Y"===a)a=[0,0,-1],b=[-1,0,0];else if("-Y/-X"===a)a=[0,0,-1],b=[0,-1,0];else if("X/-Y"===a)a=[0,0,-1],b=[1,0,0];else if("Y/X"===a)a=[0,0,-1],b=[0,1,0];else if("X/Z"===a)a=[0,-1,0],b=[1,0,0];else if("Z/-X"===a)a=[0,-1,0],b=[0,0,1];else if("-X/-Z"===a)a=[0,-1,0],b=[-1,0,0];else if("-Z/X"===a)a=[0,-1,0],b=[0,0,-1];else if("-X/Z"===
a)a=[0,1,0],b=[-1,0,0];else if("-Z/-X"===a)a=[0,1,0],b=[0,0,-1];else if("X/-Z"===a)a=[0,1,0],b=[1,0,0];else if("Z/X"===a)a=[0,1,0],b=[0,0,1];else if("Y/Z"===a)a=[1,0,0],b=[0,1,0];else if("Z/-Y"===a)a=[1,0,0],b=[0,0,1];else if("-Y/-Z"===a)a=[1,0,0],b=[0,-1,0];else if("-Z/Y"===a)a=[1,0,0],b=[0,0,-1];else if("-Y/Z"===a)a=[-1,0,0],b=[0,-1,0];else if("-Z/-Y"===a)a=[-1,0,0],b=[0,0,-1];else if("Y/-Z"===a)a=[-1,0,0],b=[0,1,0];else if("Z/Y"===a)a=[-1,0,0],b=[0,0,1];else throw Error("OrthoNormalBasis.GetCartesian: invalid combination of axis identifiers. Should pass two string arguments from [X,Y,Z,-X,-Y,-Z], being two different axes.");
return new k(new l(new g(a),0),new g(b))};k.Z0Plane=function(){var a=new l(new g([0,0,1]),0);return new k(a,new g([1,0,0]))};k.prototype={getProjectionMatrix:function(){return new (a("./Matrix4"))([this.u.x,this.v.x,this.plane.normal.x,0,this.u.y,this.v.y,this.plane.normal.y,0,this.u.z,this.v.z,this.plane.normal.z,0,0,0,-this.plane.w,1])},getInverseProjectionMatrix:function(){var b=a("./Matrix4"),c=this.plane.normal.times(this.plane.w);return new b([this.u.x,this.u.y,this.u.z,0,this.v.x,this.v.y,
this.v.z,0,this.plane.normal.x,this.plane.normal.y,this.plane.normal.z,0,c.x,c.y,c.z,1])},to2D:function(a){return new d(a.dot(this.u),a.dot(this.v))},to3D:function(a){return this.planeorigin.plus(this.u.times(a.x)).plus(this.v.times(a.y))},line3Dto2D:function(a){var b=a.point;a=a.direction.plus(b);b=this.to2D(b);a=this.to2D(a);return f.fromPoints(b,a)},line2Dto3D:function(a){var b=a.origin();a=a.direction().plus(b);b=this.to3D(b);a=this.to3D(a);return e.fromPoints(b,a)},transform:function(a){var b=
this.plane.transform(a),c=this.u.transform(a);a=(new g(0,0,0)).transform(a);c=c.minus(a);return new k(b,c)}};b.exports=k},{"./Line2":24,"./Line3":25,"./Matrix4":26,"./Plane":29,"./Vector2":33,"./Vector3":34}],28:[function(a,b,c){var d=a("./Vector2");c=a("../constants");var g=c.EPS,f=c.angleEPS;c=a("../../api/optionParsers");var e=c.parseOptionAs2DVector,l=c.parseOptionAsFloat,k=c.parseOptionAsInt,h=c.parseOptionAsBool,n=a("../constants").defaultResolution2D,p=a("./Vertex2"),m=a("./Side"),q=function(a,
b){b=!!b;a=a||[];var c=null;b&&0<a.length&&(c=new d(a[a.length-1]));var e=[];a.map(function(a){a=new d(a);var b=!1;null!==c&&(b=a.distanceTo(c)<g);b||e.push(a);c=a});this.points=e;this.closed=b};q.arc=function(a){var b=e(a,"center",0),c=l(a,"radius",1),g=l(a,"startangle",0),p=l(a,"endangle",360),m=k(a,"resolution",n);for(a=h(a,"maketangent",!1);720<=p-g;)p-=360;for(;-720>=p-g;)p+=360;var r=[],C=Math.abs(p-g);if(C<f){var F=d.fromAngle(g/180*Math.PI).times(c);r.push(F.plus(b))}else{m=Math.floor(m*C/
360)+1;C=.5*m/C;.25<C&&(C=.25);for(var N=a?m+2:m,L=0;L<=N;L++)F=L,a&&(F=(L-1)*(m-2*C)/m+C,0>F&&(F=0),F>m&&(F=m)),F=d.fromAngle((g+F*(p-g)/m)/180*Math.PI).times(c),r.push(F.plus(b))}return new q(r,!1)};q.prototype={concat:function(a){if(this.closed||a.closed)throw Error("Paths must not be closed");a=this.points.concat(a.points);return new q(a)},getPoints:function(){return this.points},appendPoint:function(a){if(this.closed)throw Error("Path must not be closed");a=new d(a);a=this.points.concat([a]);
return new q(a)},appendPoints:function(a){if(this.closed)throw Error("Path must not be closed");var b=this.points;a.forEach(function(a){b.push(new d(a))});return new q(b)},close:function(){return new q(this.points,!0)},isClosed:function(){return this.closed},getTurn:function(){for(var a=this.points,b=0,c=a.length-1,e=0;e<a.length;c=e++)b+=a[c].x*a[e].y-a[c].y*a[e].x;return 0<b?"clockwise":0>b?"counter-clockwise":"straight"},rectangularExtrude:function(a,b,c){return this.expandToCAG(a/2,c).extrude({offset:[0,
0,b]})},expandToCAG:function(b,c){var e=a("../CAG"),d=[],f=this.points.length,h=0;this.closed&&2<f&&(h=-1);for(var g,k=h;k<f;k++){var l=k;0>l&&(l=f-1);l=new p(this.points[l]);k>h&&(g=new m(g,l),d.push(g));g=l}return e.fromSides(d).expandedShell(b,c)},innerToCAG:function(){var b=a("../CAG");if(!this.closed)throw Error("The path should be closed!");return b.fromPoints(this.points)},transform:function(a){var b=this.points.map(function(b){return b.multiply4x4(a)});return new q(b,this.closed)},appendBezier:function(a,
b){2>arguments.length&&(b={});if(this.closed)throw Error("Path must not be closed");if(!(a instanceof Array))throw Error("appendBezier: should pass an array of control points");if(1>a.length)throw Error("appendBezier: need at least 1 control point");if(1>this.points.length)throw Error("appendBezier: path must already contain a point (the endpoint of the path is used as the starting point for the bezier curve)");var c=k(b,"resolution",n);4>c&&(c=4);var e=[],f=[];f.push(this.points[this.points.length-
1]);for(var h=0;h<a.length;++h){var g=a[h];if(null===g){if(0!==h)throw Error("appendBezier: null can only be passed as the first control point");if(2>a.length)throw Error("appendBezier: null can only be passed if there is at least one more control point");g=void 0;if("lastBezierControlPoint"in this)g=this.lastBezierControlPoint;else{if(2>this.points.length)throw Error("appendBezier: null is passed as a control point but this requires a previous bezier curve or at least two points in the existing path");
g=this.points[this.points.length-2]}g=this.points[this.points.length-1].times(2).minus(g)}else g=new d(g);f.push(g)}var p=f.length-1;h=1;for(g=0;g<=p;++g)0<g&&(h*=g),e.push(h);var l=[];for(h=0;h<=p;++h)l.push(e[p]/(e[h]*e[p-h]));e=function(a){for(var b=1,c=Math.pow(1-a,p),e=1!==a?1/(1-a):1,h=new d(0,0),g=0;g<=p;++g)g===p&&(c=1),h=h.plus(f[g].times(l[g]*b*c)),b*=a,c*=e;return h};h=[];g=[];for(var m=p+1,r=0;r<m;++r){var v=r/(m-1),G=e(v);h.push(G);g.push(v)}m=1;for(c=Math.sin(2*Math.PI/c);m<h.length-
1;)if(r=h[m].minus(h[m-1]).unit(),v=h[m+1].minus(h[m]).unit(),r=r.cross(v),Math.abs(r)>c){v=g[m-1];G=g[m+1];r=v+(G-v)/3;v+=2*(G-v)/3;G=e(r);var E=e(v);h.splice(m,1,G,E);g.splice(m,1,r,v);m--;1>m&&(m=1)}else++m;h=this.points.concat(h.slice(1));e=new q(h);e.lastBezierControlPoint=f[f.length-2];return e},appendArc:function(a,b){2>arguments.length&&(b={});if(this.closed)throw Error("Path must not be closed");if(1>this.points.length)throw Error("appendArc: path must already contain a point (the endpoint of the path is used as the starting point for the arc)");
var c=k(b,"resolution",n);4>c&&(c=4);if("xradius"in b||"yradius"in b){if("radius"in b)throw Error("Should either give an xradius and yradius parameter, or a radius parameter");var e=l(b,"xradius",0);var f=l(b,"yradius",0)}else f=e=l(b,"radius",0);var g=l(b,"xaxisrotation",0),p=h(b,"clockwise",!1),m=h(b,"large",!1),r=this.points[this.points.length-1];a=new d(a);e=Math.round(1E5*e)/1E5;f=Math.round(1E5*f)/1E5;a=new d(Math.round(1E5*a.x)/1E5,Math.round(1E5*a.y)/1E5);var v=!p;p=[];if(0===e||0===f)p.push(a);
else{e=Math.abs(e);f=Math.abs(f);var L=g*Math.PI/180;g=Math.cos(L);L=Math.sin(L);var B=r.minus(a).times(.5);B=new d(Math.round(1E5*(g*B.x+L*B.y))/1E5,Math.round(1E5*(-L*B.x+g*B.y))/1E5);var G=B.x*B.x/(e*e)+B.y*B.y/(f*f);1<G&&(G=Math.sqrt(G),e=Math.round(e*G*1E5)/1E5,f=Math.round(f*G*1E5)/1E5);G=Math.sqrt((e*e*f*f-e*e*B.y*B.y-f*f*B.x*B.x)/(e*e*B.y*B.y+f*f*B.x*B.x));v===m&&(G=-G);m=(new d(e*B.y/f,-f*B.x/e)).times(G);r=(new d(g*m.x-L*m.y,L*m.x+g*m.y)).plus(r.plus(a).times(.5));G=new d((B.x-m.x)/e,(B.y-
m.y)/f);B=new d((-B.x-m.x)/e,(-B.y-m.y)/f);m=G.angleRadians();B=(B.angleRadians()-m)%(2*Math.PI);!v&&0<B?B-=2*Math.PI:v&&0>B&&(B+=2*Math.PI);c=Math.ceil(Math.abs(B)/(2*Math.PI)*c)+1;1>c&&(c=1);for(v=1;v<=c;v++){var E=m+v/c*B;G=Math.cos(E);E=Math.sin(E);G=(new d(g*e*G-L*f*E,L*e*G+g*f*E)).plus(r);p.push(G)}}p=this.points.concat(p);return new q(p)}};b.exports=q},{"../../api/optionParsers":10,"../CAG":14,"../constants":23,"./Side":32,"./Vector2":33,"./Vertex2":35}],29:[function(a,b,c){var d=a("./Vector3"),
g=a("./Line3");a=a("../constants");var f=a.EPS,e=a.getTag,l=function(a,b){this.normal=a;this.w=b};l.fromObject=function(a){var b=new d(a.normal);a=parseFloat(a.w);return new l(b,a)};l.fromVector3Ds=function(a,b,c){b=b.minus(a).cross(c.minus(a)).unit();return new l(b,b.dot(a))};l.anyPlaneFromVector3Ds=function(a,b,c){b=b.minus(a);c=c.minus(a);b.length()<f&&(b=c.randomNonParallelVector());c.length()<f&&(c=b.randomNonParallelVector());c=b.cross(c);c.length()<f&&(c=b.randomNonParallelVector(),c=b.cross(c));
c=c.unit();return new l(c,c.dot(a))};l.fromPoints=function(a,b,c){a=new d(a);b=new d(b);c=new d(c);return l.fromVector3Ds(a,b,c)};l.fromNormalAndPoint=function(a,b){a=new d(a);b=new d(b);a=a.unit();b=b.dot(a);return new l(a,b)};l.prototype={flipped:function(){return new l(this.normal.negated(),-this.w)},getTag:function(){var a=this.tag;a||(this.tag=a=e());return a},equals:function(a){return this.normal.equals(a.normal)&&this.w===a.w},transform:function(a){var b=a.isMirroring(),c=this.normal.randomNonParallelVector(),
e=this.normal.cross(c),d=this.normal.cross(e);c=this.normal.times(this.w);e=c.plus(e);d=c.plus(d);c=c.multiply4x4(a);e=e.multiply4x4(a);d=d.multiply4x4(a);a=l.fromVector3Ds(c,e,d);b&&(a=a.flipped());return a},splitLineBetweenPoints:function(a,b){b=b.minus(a);var c=(this.w-this.normal.dot(a))/this.normal.dot(b);isNaN(c)&&(c=0);1<c&&(c=1);0>c&&(c=0);return a.plus(b.times(c))},intersectWithLine:function(a){return a.intersectWithPlane(this)},intersectWithPlane:function(a){return g.fromPlanes(this,a)},
signedDistanceToPoint:function(a){return this.normal.dot(a)-this.w},toString:function(){return"[normal: "+this.normal.toString()+", w: "+this.w+"]"},mirrorPoint:function(a){var b=this.signedDistanceToPoint(a);return a.minus(this.normal.times(2*b))}};b.exports=l},{"../constants":23,"./Line3":25,"./Vector3":34}],30:[function(a,b,c){function d(a){this.sides=g(a).sides}c=a("../CAG");var g=a("../CAGFactories").fromPoints;d.prototype=c.prototype;b.exports=d},{"../CAG":14,"../CAGFactories":15}],31:[function(a,
b,c){var d=a("./Vector3"),g=a("./Vertex3"),f=a("./Matrix4");c=a("../constants");var e=c._CSGDEBUG,l=c.EPS,k=c.getTag,h=c.areaEPS,n=function(b,c,d){this.vertices=b;c||(c=n.defaultShared);this.shared=c;this.plane=3<=arguments.length?d:a("./Plane").fromVector3Ds(b[0].pos,b[1].pos,b[2].pos);if(e&&!this.checkIfConvex())throw Error("Not convex!");};n.prototype={checkIfConvex:function(){return n.verticesConvex(this.vertices,this.plane.normal)},setColor:function(a){this.shared=n.Shared.fromColor.apply(this,
arguments);return this},getSignedVolume:function(){for(var a=0,b=0;b<this.vertices.length-2;b++)a+=this.vertices[0].pos.dot(this.vertices[b+1].pos.cross(this.vertices[b+2].pos));return a/6},getArea:function(){for(var a=0,b=0;b<this.vertices.length-2;b++)a+=this.vertices[b+1].pos.minus(this.vertices[0].pos).cross(this.vertices[b+2].pos.minus(this.vertices[b+1].pos)).length();return a/2},getTetraFeatures:function(a){var b=[];a.forEach(function(a){"volume"===a?b.push(this.getSignedVolume()):"area"===
a&&b.push(this.getArea())},this);return b},extrude:function(b){var c=a("../CSGFactories").fromPolygons,e=[],d=this;0<d.plane.normal.dot(b)&&(d=d.flipped());e.push(d);b=d.translate(b);for(var f=this.vertices.length,h=0;h<f;h++){var g=[],k=h<f-1?h+1:0;g.push(d.vertices[h].pos);g.push(b.vertices[h].pos);g.push(b.vertices[k].pos);g.push(d.vertices[k].pos);g=n.createFromPoints(g,this.shared);e.push(g)}b=b.flipped();e.push(b);return c(e)},translate:function(a){return this.transform(f.translation(a))},boundingSphere:function(){if(!this.cachedBoundingSphere){var a=
this.boundingBox(),b=a[0].plus(a[1]).times(.5);a=a[1].minus(b).length();this.cachedBoundingSphere=[b,a]}return this.cachedBoundingSphere},boundingBox:function(){if(!this.cachedBoundingBox){var a,b=this.vertices,c=b.length;var e=a=0===c?new d(0,0,0):b[0].pos;for(var f=1;f<c;f++){var h=b[f].pos;a=a.min(h);e=e.max(h)}this.cachedBoundingBox=[a,e]}return this.cachedBoundingBox},flipped:function(){var a=this.vertices.map(function(a){return a.flipped()});a.reverse();var b=this.plane.flipped();return new n(a,
this.shared,b)},transform:function(a){var b=this.vertices.map(function(b){return b.transform(a)}),c=this.plane.transform(a);a.isMirroring()&&b.reverse();return new n(b,this.shared,c)},toString:function(){var a="Polygon plane: "+this.plane.toString()+"\n";this.vertices.map(function(b){a+="  "+b.toString()+"\n"});return a},projectToOrthoNormalBasis:function(b){var c=a("../CAG"),e=a("../CAGFactories").fromPointsNoCheck,d=this.vertices.map(function(a){return b.to2D(a.pos)});e=e(d);d=e.area();Math.abs(d)<
h?e=new c:0>d&&(e=e.flipped());return e},solidFromSlices:function(b){return a("../../api/solidFromSlices")(this,b)}};n.fromObject=function(b){var c=a("./Plane"),e=b.vertices.map(function(a){return g.fromObject(a)}),d=n.Shared.fromObject(b.shared);b=c.fromObject(b.plane);return new n(e,d,b)};n.createFromPoints=function(a,b,c){var e=[];a.map(function(a){a=new d(a);a=new g(a);e.push(a)});return 3>arguments.length?new n(e,b):new n(e,b,c)};n.verticesConvex=function(a,b){var c=a.length;if(2<c)for(var e=
a[c-2].pos,d=a[c-1].pos,f=0;f<c;f++){var h=a[f].pos;if(!n.isConvexPoint(e,d,h,b))return!1;e=d;d=h}return!0};n.isConvexPoint=function(a,b,c,e){return 0<=b.minus(a).cross(c.minus(b)).dot(e)};n.isStrictlyConvexPoint=function(a,b,c,e){return b.minus(a).cross(c.minus(b)).dot(e)>=l};n.Shared=function(a){if(null!==a&&void 0!==a&&4!==a.length)throw Error("Expecting 4 element array");this.color=a};n.Shared.fromObject=function(a){return new n.Shared(a.color)};n.Shared.fromColor=function(a){if(1===arguments.length)var b=
arguments[0].slice();else{b=[];for(var c=0;c<arguments.length;c++)b.push(arguments[c])}if(3===b.length)b.push(1);else if(4!==b.length)throw Error("setColor expects either an array with 3 or 4 elements, or 3 or 4 parameters.");return new n.Shared(b)};n.Shared.prototype={getTag:function(){var a=this.tag;a||(this.tag=a=k());return a},getHash:function(){return this.color?this.color.join("/"):"null"}};n.defaultShared=new n.Shared(null);b.exports=n},{"../../api/solidFromSlices":13,"../CAG":14,"../CAGFactories":15,
"../CSGFactories":17,"../constants":23,"./Matrix4":26,"./Plane":29,"./Vector3":34,"./Vertex3":36}],32:[function(a,b,c){var d=a("./Vector2"),g=a("./Vertex2"),f=a("./Vertex3"),e=a("./Polygon3"),l=a("../constants").getTag,k=function(a,b){if(!(a instanceof g))throw Error("Assertion failed");if(!(b instanceof g))throw Error("Assertion failed");this.vertex0=a;this.vertex1=b};k.fromObject=function(a){var b=g.fromObject(a.vertex0);a=g.fromObject(a.vertex1);return new k(b,a)};k._fromFakePolygon=function(a){if(4>
a.vertices.length)return null;var b=[];a=a.vertices.filter(function(a,c){return 0<a.pos.z?(b.push(c),!0):!1}).map(function(a){return new d(a.pos.x,a.pos.y)});if(2!==a.length)throw Error("Assertion failed: _fromFakePolygon: not enough points found");var c=b[1]-b[0];if(1===c||3===c)1===c&&a.reverse();else throw Error("Assertion failed: _fromFakePolygon: unknown index ordering");return new k(new g(a[0]),new g(a[1]))};k.prototype={toString:function(){return this.vertex0+" -> "+this.vertex1},toPolygon3D:function(a,
b){a=[new f(this.vertex0.pos.toVector3D(a)),new f(this.vertex1.pos.toVector3D(a)),new f(this.vertex1.pos.toVector3D(b)),new f(this.vertex0.pos.toVector3D(b))];return new e(a)},transform:function(a){var b=this.vertex0.pos.transform(a);a=this.vertex1.pos.transform(a);return new k(new g(b),new g(a))},flipped:function(){return new k(this.vertex1,this.vertex0)},direction:function(){return this.vertex1.pos.minus(this.vertex0.pos)},getTag:function(){var a=this.tag;a||(this.tag=a=l());return a},lengthSquared:function(){var a=
this.vertex1.pos.x-this.vertex0.pos.x,b=this.vertex1.pos.y-this.vertex0.pos.y;return a*a+b*b},length:function(){return Math.sqrt(this.lengthSquared())}};b.exports=k},{"../constants":23,"./Polygon3":31,"./Vector2":33,"./Vertex2":35,"./Vertex3":36}],33:[function(a,b,c){var d=a("../utils").IsFloat,g=function(a,b){if(2===arguments.length)this._x=parseFloat(a),this._y=parseFloat(b);else{var c=!0;if(1===arguments.length)if("object"===typeof a)a instanceof g?(this._x=a._x,this._y=a._y):a instanceof Array?
(this._x=parseFloat(a[0]),this._y=parseFloat(a[1])):"x"in a&&"y"in a?(this._x=parseFloat(a.x),this._y=parseFloat(a.y)):c=!1;else{var e=parseFloat(a);this._y=this._x=e}else c=!1;c&&(d(this._x)&&d(this._y)||(c=!1));if(!c)throw Error("wrong arguments");}};g.fromAngle=function(a){return g.fromAngleRadians(a)};g.fromAngleDegrees=function(a){return g.fromAngleRadians(Math.PI*a/180)};g.fromAngleRadians=function(a){return g.Create(Math.cos(a),Math.sin(a))};g.Create=function(a,b){var c=Object.create(g.prototype);
c._x=a;c._y=b;return c};g.prototype={get x(){return this._x},get y(){return this._y},set x(a){throw Error("Vector2D is immutable");},set y(a){throw Error("Vector2D is immutable");},toVector3D:function(b){return new (a("./Vector3"))(this._x,this._y,b)},equals:function(a){return this._x===a._x&&this._y===a._y},clone:function(){return g.Create(this._x,this._y)},negated:function(){return g.Create(-this._x,-this._y)},plus:function(a){return g.Create(this._x+a._x,this._y+a._y)},minus:function(a){return g.Create(this._x-
a._x,this._y-a._y)},times:function(a){return g.Create(this._x*a,this._y*a)},dividedBy:function(a){return g.Create(this._x/a,this._y/a)},dot:function(a){return this._x*a._x+this._y*a._y},lerp:function(a,b){return this.plus(a.minus(this).times(b))},length:function(){return Math.sqrt(this.dot(this))},distanceTo:function(a){return this.minus(a).length()},distanceToSquared:function(a){return this.minus(a).lengthSquared()},lengthSquared:function(){return this.dot(this)},unit:function(){return this.dividedBy(this.length())},
cross:function(a){return this._x*a._y-this._y*a._x},normal:function(){return g.Create(this._y,-this._x)},multiply4x4:function(a){return a.leftMultiply1x2Vector(this)},transform:function(a){return a.leftMultiply1x2Vector(this)},angle:function(){return this.angleRadians()},angleDegrees:function(){return 180*this.angleRadians()/Math.PI},angleRadians:function(){return Math.atan2(this._y,this._x)},min:function(a){return g.Create(Math.min(this._x,a._x),Math.min(this._y,a._y))},max:function(a){return g.Create(Math.max(this._x,
a._x),Math.max(this._y,a._y))},toString:function(){return"("+this._x.toFixed(5)+", "+this._y.toFixed(5)+")"},abs:function(){return g.Create(Math.abs(this._x),Math.abs(this._y))}};b.exports=g},{"../utils":41,"./Vector3":34}],34:[function(a,b,c){var d=a("../utils").IsFloat,g=a("./Vector2"),f=function(a,b,c){if(3===arguments.length)this._x=parseFloat(a),this._y=parseFloat(b),this._z=parseFloat(c);else if(2===arguments.length)this._x=parseFloat(a),this._y=parseFloat(b),this._z=0;else{var e=!0;if(1===
arguments.length)if("object"===typeof a)a instanceof f?(this._x=a._x,this._y=a._y,this._z=a._z):a instanceof g?(this._x=a._x,this._y=a._y,this._z=0):a instanceof Array?2>a.length||3<a.length?e=!1:(this._x=parseFloat(a[0]),this._y=parseFloat(a[1]),this._z=3===a.length?parseFloat(a[2]):0):"x"in a&&"y"in a?(this._x=parseFloat(a.x),this._y=parseFloat(a.y),this._z="z"in a?parseFloat(a.z):0):"_x"in a&&"_y"in a?(this._x=parseFloat(a._x),this._y=parseFloat(a._y),this._z="_z"in a?parseFloat(a._z):0):e=!1;
else{var k=parseFloat(a);this._z=this._y=this._x=k}else e=!1;if(e)d(this._x)&&d(this._y)&&d(this._z);else throw Error("wrong arguments");}};f.Create=function(a,b,c){var e=Object.create(f.prototype);e._x=a;e._y=b;e._z=c;return e};f.prototype={get x(){return this._x},get y(){return this._y},get z(){return this._z},set x(a){throw Error("Vector3D is immutable");},set y(a){throw Error("Vector3D is immutable");},set z(a){throw Error("Vector3D is immutable");},clone:function(){return f.Create(this._x,this._y,
this._z)},negated:function(){return f.Create(-this._x,-this._y,-this._z)},abs:function(){return f.Create(Math.abs(this._x),Math.abs(this._y),Math.abs(this._z))},plus:function(a){return f.Create(this._x+a._x,this._y+a._y,this._z+a._z)},minus:function(a){return f.Create(this._x-a._x,this._y-a._y,this._z-a._z)},times:function(a){return f.Create(this._x*a,this._y*a,this._z*a)},dividedBy:function(a){return f.Create(this._x/a,this._y/a,this._z/a)},dot:function(a){return this._x*a._x+this._y*a._y+this._z*
a._z},lerp:function(a,b){return this.plus(a.minus(this).times(b))},lengthSquared:function(){return this.dot(this)},length:function(){return Math.sqrt(this.lengthSquared())},unit:function(){return this.dividedBy(this.length())},cross:function(a){return f.Create(this._y*a._z-this._z*a._y,this._z*a._x-this._x*a._z,this._x*a._y-this._y*a._x)},distanceTo:function(a){return this.minus(a).length()},distanceToSquared:function(a){return this.minus(a).lengthSquared()},equals:function(a){return this._x===a._x&&
this._y===a._y&&this._z===a._z},multiply4x4:function(a){return a.leftMultiply1x3Vector(this)},transform:function(a){return a.leftMultiply1x3Vector(this)},toString:function(){return"("+this._x.toFixed(5)+", "+this._y.toFixed(5)+", "+this._z.toFixed(5)+")"},randomNonParallelVector:function(){var a=this.abs();return a._x<=a._y&&a._x<=a._z?f.Create(1,0,0):a._y<=a._x&&a._y<=a._z?f.Create(0,1,0):f.Create(0,0,1)},min:function(a){return f.Create(Math.min(this._x,a._x),Math.min(this._y,a._y),Math.min(this._z,
a._z))},max:function(a){return f.Create(Math.max(this._x,a._x),Math.max(this._y,a._y),Math.max(this._z,a._z))}};b.exports=f},{"../utils":41,"./Vector2":33}],35:[function(a,b,c){var d=a("./Vector2"),g=a("../constants").getTag,f=function(a){this.pos=a};f.fromObject=function(a){return new f(new d(a.pos._x,a.pos._y))};f.prototype={toString:function(){return"("+this.pos.x.toFixed(5)+","+this.pos.y.toFixed(5)+")"},getTag:function(){var a=this.tag;a||(this.tag=a=g());return a}};b.exports=f},{"../constants":23,
"./Vector2":33}],36:[function(a,b,c){var d=a("./Vector3"),g=a("../constants").getTag,f=function(a){this.pos=a};f.fromObject=function(a){a=new d(a.pos);return new f(a)};f.prototype={flipped:function(){return this},getTag:function(){var a=this.tag;a||(this.tag=a=g());return a},interpolate:function(a,b){a=this.pos.lerp(a.pos,b);return new f(a)},transform:function(a){a=this.pos.multiply4x4(a);return new f(a)},toString:function(){return this.pos.toString()}};b.exports=f},{"../constants":23,"./Vector3":34}],
37:[function(a,b,c){var d=a("../constants").EPS,g=a("../utils").solve2Linear;b.exports={linesIntersect:function(a,b,c,k){if(b.equals(c)||k.equals(a)){if(k.minus(c).unit().plus(b.minus(a).unit()).length()<d)return!0}else{b=b.minus(a);k=k.minus(c);if(1E-9>Math.abs(b.cross(k)))return!1;a=g(-b.x,k.x,-b.y,k.y,a.x-c.x,a.y-c.y);if(1E-6<a[0]&&.999999>a[0]&&1E-5<a[1]&&.999999>a[1])return!0}return!1}}},{"../constants":23,"../utils":41}],38:[function(a,b,c){var d=a("../constants").EPS,g=a("./OrthoNormalBasis");
c=a("../utils");var f=c.interpolateBetween2DPointsForY,e=c.insertSorted,l=c.fnNumberSort,k=a("./Vertex3"),h=a("./Vector2"),n=a("./Line2"),p=a("./Polygon3");b.exports=function(a,b){var c=a.length;if(0<c){for(var m=a[0].plane,q=a[0].shared,y=new g(m),x=[],t=[],u={},C={},F={},N=1/d*10,L=0;L<c;L++){var B=a[L],G=[],E=B.vertices.length,H=-1;if(0<E){for(var I=void 0,D,z=0;z<E;z++){var A=y.to2D(B.vertices[z].pos),J=Math.floor(A.y*N),K=void 0;J in F?K=F[J]:J+1 in F?K=F[J+1]:J-1 in F?K=F[J-1]:(K=A.y,F[J]=A.y);
A=h.Create(A.x,K);G.push(A);A=A.y;if(0===z||A<I)I=A,H=z;if(0===z||A>D)D=A;A in C||(C[A]={});C[A][L]=!0}I>=D?(G=[],E=0,H=-1):(I in u||(u[I]=[]),u[I].push(L))}G.reverse();H=E-H-1;x.push(G);t.push(H)}a=[];for(var M in C)a.push(M);a.sort(l);M=[];L=[];c={};for(F=0;F<a.length;c={middleycoordinate:c.middleycoordinate},F++){N=[];E=a[F];B=Number(E);G=C[E];for(H=0;H<M.length;++H)if(I=M[H],D=I.polygonindex,G[D]){D=x[D];z=D.length;J=I.leftvertexindex;for(A=I.rightvertexindex;;){K=J+1;K>=z&&(K=0);if(D[K].y!==
B)break;J=K}K=A-1;0>K&&(K=z-1);D[K].y===B&&(A=K);J!==I.leftvertexindex&&J===A?(M.splice(H,1),--H):(I.leftvertexindex=J,I.rightvertexindex=A,I.topleft=D[J],I.topright=D[A],J+=1,J>=z&&(J=0),I.bottomleft=D[J],--A,0>A&&(A=z-1),I.bottomright=D[A])}G=void 0;if(F>=a.length-1)M=[],G=null;else{G=Number(a[F+1]);c.middleycoordinate=.5*(B+G);E=u[E];for(var Q in E){H=E[Q];I=x[H];D=I.length;for(z=A=t[H];;){J=z+1;J>=D&&(J=0);if(I[J].y!==B)break;if(J===A)break;z=J}for(;;){J=A-1;0>J&&(J=D-1);if(I[J].y!==B)break;if(J===
z)break;A=J}J=z+1;J>=D&&(J=0);K=A-1;0>K&&(K=D-1);e(M,{polygonindex:H,leftvertexindex:z,rightvertexindex:A,topleft:I[z],topright:I[A],bottomleft:I[J],bottomright:I[K]},function(a){return function(b,c){b=f(b.topleft,b.bottomleft,a.middleycoordinate);c=f(c.topleft,c.bottomleft,a.middleycoordinate);return b>c?1:b<c?-1:0}}(c))}}for(var P in M)D=M[P],z=f(D.topleft,D.bottomleft,B),E=h.Create(z,B),z=f(D.topright,D.bottomright,B),H=h.Create(z,B),z=f(D.topleft,D.bottomleft,G),I=h.Create(z,G),z=f(D.topright,
D.bottomright,G),D=h.Create(z,G),E={topleft:E,topright:H,bottomleft:I,bottomright:D,leftline:n.fromPoints(E,I),rightline:n.fromPoints(D,H)},0<N.length&&(H=N[N.length-1],I=E.topleft.distanceTo(H.topright),D=E.bottomleft.distanceTo(H.bottomright),I<d&&D<d&&(E.topleft=H.topleft,E.leftline=H.leftline,E.bottomleft=H.bottomleft,N.splice(N.length-1,1))),N.push(E);if(0<F){B={};G={};for(E=0;E<N.length;E++)for(H=N[E],I=0;I<L.length;I++)if(!G[I]&&(D=L[I],D.bottomleft.distanceTo(H.topleft)<d&&D.bottomright.distanceTo(H.topright)<
d)){G[I]=!0;z=H.leftline.direction().x-D.leftline.direction().x;K=H.rightline.direction().x-D.rightline.direction().x;A=Math.abs(z)<d;K=(J=Math.abs(K)<d)||0<=K;(A||0<=z)&&K&&(H.outpolygon=D.outpolygon,H.leftlinecontinues=A,H.rightlinecontinues=J,B[I]=!0);break}G={};for(E=0;E<L.length;G={vertices3d:G.vertices3d},E++)B[E]||(H=L[E],H.outpolygon.rightpoints.push(H.bottomright),H.bottomright.distanceTo(H.bottomleft)>d&&H.outpolygon.leftpoints.push(H.bottomleft),H.outpolygon.leftpoints.reverse(),H=H.outpolygon.rightpoints.concat(H.outpolygon.leftpoints),
G.vertices3d=[],H.map(function(a){return function(b){b=y.to3D(b);b=new k(b);a.vertices3d.push(b)}}(G)),H=new p(G.vertices3d,q,m),b.push(H))}for(L=0;L<N.length;L++)B=N[L],B.outpolygon?(B.leftlinecontinues||B.outpolygon.leftpoints.push(B.topleft),B.rightlinecontinues||B.outpolygon.rightpoints.push(B.topright)):(B.outpolygon={leftpoints:[],rightpoints:[]},B.outpolygon.leftpoints.push(B.topleft),B.topleft.distanceTo(B.topright)>d&&B.outpolygon.rightpoints.push(B.topright));L=N}}}},{"../constants":23,
"../utils":41,"./Line2":24,"./OrthoNormalBasis":27,"./Polygon3":31,"./Vector2":33,"./Vertex3":36}],39:[function(a,b,c){var d=a("./math/Matrix4"),g=a("./math/Vector3"),f=a("./math/Plane");b.exports={addTransformationMethodsToPrototype:function(a){a.mirrored=function(a){return this.transform(d.mirroring(a))};a.mirroredX=function(){var a=new f(g.Create(1,0,0),0);return this.mirrored(a)};a.mirroredY=function(){var a=new f(g.Create(0,1,0),0);return this.mirrored(a)};a.mirroredZ=function(){var a=new f(g.Create(0,
0,1),0);return this.mirrored(a)};a.translate=function(a){return this.transform(d.translation(a))};a.scale=function(a){return this.transform(d.scaling(a))};a.rotateX=function(a){return this.transform(d.rotationX(a))};a.rotateY=function(a){return this.transform(d.rotationY(a))};a.rotateZ=function(a){return this.transform(d.rotationZ(a))};a.rotate=function(a,b,c){return this.transform(d.rotation(a,b,c))};a.rotateEulerAngles=function(a,b,c,e){e=e||[0,0,0];a=d.rotationZ(a);b=d.rotationX(b);c=d.rotationZ(c);
e=d.translation(new g(e));return this.transform(c.multiply(b).multiply(a).multiply(e))}},addCenteringToPrototype:function(a,b){a.center=function(a){a=Array.prototype.map.call(arguments,function(a){return a});a.length||(a=b.slice());var c=this.getBounds();return this.translate(b.map(function(b){return-1<a.indexOf(b)?-(c[0][b]+c[1][b])/2:0}))}}}},{"./math/Matrix4":26,"./math/Plane":29,"./math/Vector3":34}],40:[function(a,b,c){c=a("./constants");var d=c._CSGDEBUG,g=c.EPS,f=a("./math/Vertex3"),e=a("./math/Polygon3"),
l=function(){this.parent=null;this.children=[];this.polygon=null;this.removed=!1};l.prototype={addPolygons:function(a){if(!this.isRootNode())throw Error("Assertion failed");var b=this;a.map(function(a){b.addChild(a)})},remove:function(){if(!this.removed){this.removed=!0;if(d){if(this.isRootNode())throw Error("Assertion failed");if(this.children.length)throw Error("Assertion failed");}var a=this.parent.children,b=a.indexOf(this);if(0>b)throw Error("Assertion failed");a.splice(b,1);this.parent.recursivelyInvalidatePolygon()}},
isRemoved:function(){return this.removed},isRootNode:function(){return!this.parent},invert:function(){if(!this.isRootNode())throw Error("Assertion failed");this.invertSub()},getPolygon:function(){if(!this.polygon)throw Error("Assertion failed");return this.polygon},getPolygons:function(a){var b=[this],c=[b],e,d;for(e=0;e<c.length;++e){b=c[e];var f=0;for(d=b.length;f<d;f++){var g=b[f];g.polygon?a.push(g.polygon):c.push(g.children)}}},splitByPlane:function(a,b,c,e,d){if(this.children.length){var f=
[this.children],g,h;for(g=0;g<f.length;g++){var k=f[g];var l=0;for(h=k.length;l<h;l++){var p=k[l];p.children.length?f.push(p.children):p._splitByPlane(a,b,c,e,d)}}}else this._splitByPlane(a,b,c,e,d)},_splitByPlane:function(a,b,c,d,k){var h=this.polygon;if(h){var l=h.boundingSphere(),p=l[1]+g;l=a.normal.dot(l[0])-a.w;if(l>p)d.push(this);else if(l<-p)k.push(this);else{p=l=null;var m=a.normal;var n=h.vertices,q=n.length;if(h.plane.equals(a))m=0;else{for(var u=a.w,C=!1,F=!1,N=[],L=-g,B=0;B<q;B++){var G=
m.dot(n[B].pos)-u;N.push(0>G);G>g&&(C=!0);G<L&&(F=!0)}if(C||F)if(F)if(C){m=4;u=[];C=[];F=N[0];for(L=0;L<q;L++){B=n[L];var E=L+1;E>=q&&(E=0);G=N[E];F===G?F?C.push(B):u.push(B):(E=a.splitLineBetweenPoints(B.pos,n[E].pos),E=new f(E),F?(C.push(B),C.push(E),u.push(E)):(u.push(B),u.push(E),C.push(E)));F=G}a=g*g;if(3<=C.length)for(n=C[C.length-1],q=0;q<C.length;q++)N=C[q],N.pos.distanceToSquared(n.pos)<a&&(C.splice(q,1),q--),n=N;if(3<=u.length)for(n=u[u.length-1],q=0;q<u.length;q++)N=u[q],N.pos.distanceToSquared(n.pos)<
a&&(u.splice(q,1),q--),n=N;3<=u.length&&(l=new e(u,h.shared,h.plane));3<=C.length&&(p=new e(C,h.shared,h.plane))}else m=3;else m=2;else m=0<=m.dot(h.plane.normal)?0:1}switch(m){case 0:b.push(this);break;case 1:c.push(this);break;case 2:d.push(this);break;case 3:k.push(this);break;case 4:l&&(b=this.addChild(l),d.push(b)),p&&(d=this.addChild(p),k.push(d))}}}},addChild:function(a){var b=new l;b.parent=this;b.polygon=a;this.children.push(b);return b},invertSub:function(){var a=[this],b=[a],c,e;for(c=
0;c<b.length;c++){a=b[c];var d=0;for(e=a.length;d<e;d++){var f=a[d];f.polygon&&(f.polygon=f.polygon.flipped());b.push(f.children)}}},recursivelyInvalidatePolygon:function(){for(var a=this;a.polygon;)a.polygon=null,a.parent&&(a=a.parent)}};a=function(a){this.polygonTree=new l;this.rootnode=new k(null);a&&this.addPolygons(a)};a.prototype={invert:function(){this.polygonTree.invert();this.rootnode.invert()},clipTo:function(a,b){this.rootnode.clipTo(a,!!b)},allPolygons:function(){var a=[];this.polygonTree.getPolygons(a);
return a},addPolygons:function(a){var b=this;a=a.map(function(a){return b.polygonTree.addChild(a)});this.rootnode.addPolygonTreeNodes(a)}};var k=function(a){this.back=this.front=this.plane=null;this.polygontreenodes=[];this.parent=a};k.prototype={invert:function(){for(var a=[this],b,c=0;c<a.length;c++){b=a[c];b.plane&&(b.plane=b.plane.flipped());b.front&&a.push(b.front);b.back&&a.push(b.back);var e=b.front;b.front=b.back;b.back=e}},clipPolygons:function(a,b){var c={node:this,polygontreenodes:a},e=
[];do{var d=c.node;a=c.polygontreenodes;if(d.plane){c=[];for(var f=[],g=b?c:f,h=d.plane,k=a.length,l=0;l<k;l++){var n=a[l];n.isRemoved()||n.splitByPlane(h,g,c,f,c)}d.front&&0<f.length&&e.push({node:d.front,polygontreenodes:f});a=c.length;if(d.back&&0<a)e.push({node:d.back,polygontreenodes:c});else for(d=0;d<a;d++)c[d].remove()}c=e.pop()}while("undefined"!==typeof c)},clipTo:function(a,b){var c=this,e=[];do 0<c.polygontreenodes.length&&a.rootnode.clipPolygons(c.polygontreenodes,b),c.front&&e.push(c.front),
c.back&&e.push(c.back),c=e.pop();while("undefined"!==typeof c)},addPolygonTreeNodes:function(a){a={node:this,polygontreenodes:a};var b=[];do{var c=a.node;a=a.polygontreenodes;if(0!==a.length){var e=c;if(!c.plane){var d=a[0].getPolygon().plane;c.plane=d}d=[];for(var f=[],g=0,h=a.length;g<h;++g)a[g].splitByPlane(e.plane,e.polygontreenodes,f,d,f);0<d.length&&(c.front||(c.front=new k(c)),b.push({node:c.front,polygontreenodes:d}));0<f.length&&(c.back||(c.back=new k(c)),b.push({node:c.back,polygontreenodes:f}))}a=
b.pop()}while("undefined"!==typeof a)},getParentPlaneNormals:function(a,b){0<b&&this.parent&&(a.push(this.parent.plane.normal),this.parent.getParentPlaneNormals(a,b-1))}};b.exports=a},{"./constants":23,"./math/Polygon3":31,"./math/Vertex3":36}],41:[function(a,b,c){b.exports={fnNumberSort:function(a,b){return a-b},fnSortByIndex:function(a,b){return a.index-b.index},IsFloat:function(a){return!isNaN(a)||Infinity===a||-Infinity===a},solve2Linear:function(a,b,c,e,l,k){var d=1/(a*e-b*c);return[(l*e-b*k)*
d,(-l*c+a*k)*d]},insertSorted:function(a,b,c){for(var e=0,d=a.length;d>e;){var f=Math.floor((e+d)/2);0<c(b,a[f])?e=f+1:d=f}a.splice(e,0,b)},interpolateBetween2DPointsForY:function(a,b,c){c-=a.y;var e=b.y-a.y;0>e&&(c=-c,e=-e);return a.x+(0>=c?0:c>=e?1:1E-10>e?.5:c/e)*(b.x-a.x)},isCAG:function(a){return"sides"in a&&"length"in a.sides?!0:!1},isCSG:function(a){return"polygons"in a&&"length"in a.polygons?!0:!1}}},{}],42:[function(a,b,c){var d=a("../math/Vector2");b.exports={area:function(a){var b=0;a.sides.map(function(a){b+=
a.vertex0.pos.cross(a.vertex1.pos)});return b*=.5},getBounds:function(a){var b,c=b=0===a.sides.length?new d(0,0):a.sides[0].vertex0.pos;a.sides.map(function(a){b=b.min(a.vertex0.pos);b=b.min(a.vertex1.pos);c=c.max(a.vertex0.pos);c=c.max(a.vertex1.pos)});return[b,c]}}},{"../math/Vector2":33}],43:[function(a,b,c){var d=a("../constants").areaEPS,g=a("../math/lineUtils").linesIntersect,f=function(a,b){var c=null,e=null,d=!1;a.sides.forEach(function(a){c=a.vertex0.pos;e=a.vertex1.pos;f.c1(b,c,e)&&f.c2(b,
c,e)&&(d=!d)});return d};f.c1=function(a,b,c){return b.y>a.y!==c.y>a.y};f.c2=function(a,b,c){return a.x<(c.x-b.x)*(a.y-b.y)/(c.y-b.y)+b.x};b.exports={isCAGValid:function(a){var b=[];a.isSelfIntersecting(!0)&&b.push("Self intersects");var c={};a.sides.map(function(a){function b(a){a=a.x+" "+a.y;a in c||(c[a]=0);c[a]++}b(a.vertex0.pos);b(a.vertex1.pos)});for(var e in c){var f=c[e];f&1&&b.push("Uneven number of sides ("+f+") for point "+e)}a=a.area();a<d&&b.push("Area is "+a);if(0<b.length){var g="";
b.map(function(a){g+=a+"\n"});throw Error(g);}},isSelfIntersecting:function(a,b){for(var c=a.sides.length,e=0;e<c;e++)for(var d=a.sides[e],f=e+1;f<c;f++){var l=a.sides[f];if(g(d.vertex0.pos,d.vertex1.pos,l.vertex0.pos,l.vertex1.pos))return b&&(console.log("side "+e+": "+d),console.log("side "+f+": "+l)),!0}return!1},hasPointInside:f,contains:function(a,b){for(var c=0,e=b.sides.length;c<e;c++)if(!f(a,b.sides[c].vertex0.pos))return!1;return!0}}},{"../constants":23,"../math/lineUtils":37}],44:[function(a,
b,c){var d=a("../constants").EPS,g=a("../FuzzyFactory3d"),f=a("../FuzzyFactory2d"),e=a("../CSGFactories").fromPolygons,l=a("../CAGFactories").fromSides,k=function(a,b){var c=[];b.polygons.forEach(function(b){b=a.getPolygon(b);3<=b.vertices.length&&c.push(b)});return e(c)},h=function(a,b){b=b.sides.map(function(b){return a.getSide(b)}).filter(function(a){return a.length()>d});return l(b)};b.exports=function(a,b){if(a.isCanonicalized)return a;if("sides"in a)return a.isCanonicalized||(b=new f,a=h(b,
a),a.isCanonicalized=!0),a;a.isCanonicalized||(b=new g,b=k(b,a),b.isCanonicalized=!0,b.isRetesselated=a.isRetesselated,b.properties=a.properties,a=b);return a}},{"../CAGFactories":15,"../CSGFactories":17,"../FuzzyFactory2d":19,"../FuzzyFactory3d":20,"../constants":23}],45:[function(a,b,c){var d=a("../math/Vector3");b.exports={bounds:function(a){if(!a.cachedBoundingBox){for(var b=new d(0,0,0),c=new d(0,0,0),g=a.polygons,k=g.length,h=0;h<k;h++){var n=g[h].boundingBox();0===h?(b=n[0],c=n[1]):(b=b.min(n[0]),
c=c.max(n[1]))}a.cachedBoundingBox=[b,c]}return a.cachedBoundingBox},volume:function(a){a=a.toTriangles().map(function(a){return a.getTetraFeatures(["volume"])});console.log("volume",a)},area:function(a){a=a.toTriangles().map(function(a){return a.getTetraFeatures(["area"])});console.log("area",a)}}},{"../math/Vector3":34}],46:[function(a,b,c){var d=a("../CAG"),g=a("../constants").EPS;b.exports={projectToOrthoNormalBasis:function(a,b){var c=[];a.polygons.filter(function(a){return a.plane.normal.minus(b.plane.normal).lengthSquared()<
g*g}).map(function(a){a=a.projectToOrthoNormalBasis(b);0<a.sides.length&&c.push(a)});return(new d).union(c)}}},{"../CAG":14,"../constants":23}],47:[function(a,b,c){function d(a,b,c,e,d,f){var h=e.getTag(),k=d.getTag();if(h===k)throw Error("Assertion failed");var l=h+"/"+k;if(k+"/"+h in a)return g(a,b,c,d,e,null),null;e={vertex0:e,vertex1:d,polygonindex:f};l in a?a[l].push(e):a[l]=[e];h in b?b[h].push(l):b[h]=[l];k in c?c[k].push(l):c[k]=[l];return l}function g(a,b,c,e,d,f){var g=e.getTag(),h=d.getTag(),
k=g+"/"+h;if(!(k in a))throw Error("Assertion failed");for(var l=-1,m=a[k],p=0;p<m.length;p++){var n=m[p];if(n.vertex0===e&&n.vertex1===d&&(null===f||n.polygonindex===f)){l=p;break}}if(0>l)throw Error("Assertion failed");m.splice(l,1);0===m.length&&delete a[k];l=b[g].indexOf(k);if(0>l)throw Error("Assertion failed");b[g].splice(l,1);0===b[g].length&&delete b[g];l=c[h].indexOf(k);if(0>l)throw Error("Assertion failed");c[h].splice(l,1);0===c[h].length&&delete c[h]}var f=a("../constants").EPS,e=a("../math/Polygon3"),
l=a("../math/Plane");b.exports=function(a,b){b=b.canonicalized();for(var c={},h=0;h<b.polygons.length;h++){var k=b.polygons[h],q=k.vertices.length;if(3<=q)for(var r=k.vertices[0],v=r.getTag(),w=0;w<q;w++){var y=w+1;y===q&&(y=0);y=k.vertices[y];var x=y.getTag(),t=v+"/"+x;v=x+"/"+v;v in c?(r=c[v],r.splice(-1,1),0===r.length&&delete c[v]):(r={vertex0:r,vertex1:y,polygonindex:h},t in c?c[t].push(r):c[t]=[r]);r=y;v=x}}var u={},C={};h={};k=!0;q={};for(var F in c)q.sidetag$50=F,k=!1,h[q.sidetag$50]=!0,c[q.sidetag$50].map(function(a){return function(b){var c=
b.vertex0.getTag();b=b.vertex1.getTag();c in u?u[c].push(a.sidetag$50):u[c]=[a.sidetag$50];b in C?C[b].push(a.sidetag$50):C[b]=[a.sidetag$50]}}(q)),q={sidetag$50:q.sidetag$50};if(!k){for(F=b.polygons.slice(0);;){k=!0;for(var N in c)k=!1,h[N]=!0;if(k)break;for(r=!1;;){k=null;for(var L in h){k=L;break}if(null===k)break;t=!0;if(k in c){q=c[k];if(0===q.length)throw Error("Assertion failed");q=q[0];for(v=0;2>v;v++){var B=0===v?q.vertex0:q.vertex1;w=0===v?q.vertex1:q.vertex0;var G=B.getTag(),E=w.getTag(),
H=[];0===v?G in C&&(H=C[G]):G in u&&(H=u[G]);x={};for(var I=0;I<H.length;x={newpolygon:x.newpolygon,found:x.found,loop:x.loop},I++){y=c[H[I]][0];var D=0===v?y.vertex0:y.vertex1,z=0===v?y.vertex1:y.vertex0,A=D.getTag();if(z.getTag()!==G)throw Error("Assertion failed");if(A===E){g(c,u,C,B,w,null);g(c,u,C,w,B,null);t=!1;v=2;r=!0;break}else{z=B.pos;A=w.pos;D=D.pos.minus(z);var J=A.minus(z).dot(D)/D.dot(D);if(0<J&&1>J&&z.plus(D.times(J)).distanceToSquared(A)<f*f){r=y.polygonindex;t=F[r];B=y.vertex1.getTag();
v=-1;for(G=0;G<t.vertices.length;G++)if(t.vertices[G].getTag()===B){v=G;break}if(0>v)throw Error("Assertion failed");B=t.vertices.slice(0);B.splice(v,0,w);x.newpolygon=new e(B,t.shared);isNaN(x.newpolygon.plane.w)&&(x.found=!1,x.loop=function(a){return function(b){a.newpolygon.vertices.forEach(function(c){a.found||b(c)})}}(x),x.loop(function(a){return function(b){a.loop(function(c){a.loop(function(e){a.newpolygon.plane=l.fromPoints(b.pos,c.pos,e.pos);isNaN(a.newpolygon.plane.w)||(a.found=!0)})})}}(x)));
F[r]=x.newpolygon;g(c,u,C,y.vertex0,y.vertex1,r);x=d(c,u,C,y.vertex0,w,r);w=d(c,u,C,w,y.vertex1,r);null!==x&&(h[x]=!0);null!==w&&(h[w]=!0);t=!1;v=2;r=!0;break}}}}}t&&delete h[k]}if(!r)break}a=a(F);a.properties=b.properties;a.isCanonicalized=!0;a.isRetesselated=!0;b=a}return b}},{"../constants":23,"../math/Plane":29,"../math/Polygon3":31}],48:[function(a,b,c){var d=a("../FuzzyFactory3d"),g=a("../math/reTesselateCoplanarPolygons"),f=a("../CSGFactories").fromPolygons;b.exports=function(a){if(a.isRetesselated)return a;
var b={},c=a.isCanonicalized,e=new d;a.polygons.map(function(a){var d=a.plane,f=a.shared;c||(d=e.getPlane(d),f=e.getPolygonShared(f));d=d.getTag()+"/"+f.getTag();d in b?b[d].push(a):b[d]=[a]});var n=[],p;for(p in b){var m=b[p];if(2>m.length)n=n.concat(m);else{var q=[];g(m,q);n=n.concat(q)}}n=f(n);n.isRetesselated=!0;n.properties=a.properties;return n}},{"../CSGFactories":17,"../FuzzyFactory3d":20,"../math/reTesselateCoplanarPolygons":38}],49:[function(a,b,c){b.exports=function(a){return a?a.constructor!==
Array?[a]:a:[]}},{}],50:[function(a,b,c){var d=a("./src/core/mutators").addTransformationMethodsToPrototype;c=a("./src/core/CSG");var g=a("./src/core/CAG"),f=a("./src/core/constants"),e=f.defaultResolution2D,l=f.defaultResolution3D,k=f.EPS,h=f.angleEPS,n=f.areaEPS,p=f.all,m=f.top,q=f.bottom,r=f.left,v=f.right,w=f.front,y=f.back,x=f.staticTag,t=f.getTag;c._CSGDEBUG=f._CSGDEBUG;c.defaultResolution2D=e;c.defaultResolution3D=l;c.EPS=k;c.angleEPS=h;c.areaEPS=n;c.all=p;c.top=m;c.bottom=q;c.left=r;c.right=
v;c.front=w;c.back=y;c.staticTag=x;c.getTag=t;c.Vector2D=a("./src/core/math/Vector2");c.Vector3D=a("./src/core/math/Vector3");c.Vertex=a("./src/core/math/Vertex3");g.Vertex=a("./src/core/math/Vertex2");c.Plane=a("./src/core/math/Plane");c.Polygon=a("./src/core/math/Polygon3");c.Polygon2D=a("./src/core/math/Polygon2");c.Line2D=a("./src/core/math/Line2");c.Line3D=a("./src/core/math/Line3");c.Path2D=a("./src/core/math/Path2");c.OrthoNormalBasis=a("./src/core/math/OrthoNormalBasis");c.Matrix4x4=a("./src/core/math/Matrix4");
g.Side=a("./src/core/math/Side");c.Connector=a("./src/core/connectors").Connector;c.ConnectorList=a("./src/core/connectors").ConnectorList;c.Properties=a("./src/core/Properties");k=a("./src/api/primitives2d");f=k.circle;e=k.ellipse;l=k.rectangle;k=k.roundedRectangle;h=a("./src/api/primitives3d");n=h.cube;p=h.roundedCube;m=h.cylinder;q=h.roundedCylinder;r=h.cylinderElliptic;v=h.polyhedron;c.sphere=h.sphere;c.cube=n;c.roundedCube=p;c.cylinder=m;c.roundedCylinder=q;c.cylinderElliptic=r;c.polyhedron=
v;g.circle=f;g.ellipse=e;g.rectangle=l;g.roundedRectangle=k;f=a("./src/core/CSGFactories");e=f.fromPolygons;l=f.fromObject;k=f.fromSlices;c.fromCompactBinary=f.fromCompactBinary;c.fromObject=l;c.fromSlices=k;c.fromPolygons=e;c.toPointCloud=a("./src/api/debugHelpers").toPointCloud;f=a("./src/core/CAGFactories");g.fromSides=f.fromSides;g.fromObject=f.fromObject;g.fromPoints=f.fromPoints;g.fromPointsNoCheck=f.fromPointsNoCheck;g.fromPath2=f.fromPath2;g.fromFakeCSG=f.fromFakeCSG;g.fromCompactBinary=f.fromCompactBinary;
f=a("./src/api/optionParsers");d(c.prototype);d(c.Vector2D.prototype);d(c.Vector3D.prototype);d(c.Vertex.prototype);d(c.Plane.prototype);d(c.Polygon.prototype);d(c.Line2D.prototype);d(c.Line3D.prototype);d(c.Path2D.prototype);d(c.OrthoNormalBasis.prototype);d(c.Connector.prototype);d(g.prototype);d(g.Side.prototype);d(g.Vertex.prototype);c.parseOptionAs2DVector=f.parseOptionAs3DVector;c.parseOptionAs3DVector=f.parseOptionAs3DVector;c.parseOptionAs3DVectorList=f.parseOptionAs3DVectorList;c.parseOptionAsBool=
f.parseOptionAsBool;c.parseOptionAsFloat=f.parseOptionAsFloat;c.parseOptionAsInt=f.parseOptionAsInt;c.Polygon2D.prototype=g.prototype;a=a("./src/core/utils");a=Object.assign({},{CSG:c,CAG:g},f,{isCAG:a.isCAG,isCSG:a.isCSG});b.exports=a},{"./src/api/debugHelpers":3,"./src/api/optionParsers":10,"./src/api/primitives2d":11,"./src/api/primitives3d":12,"./src/core/CAG":14,"./src/core/CAGFactories":15,"./src/core/CSG":16,"./src/core/CSGFactories":17,"./src/core/Properties":21,"./src/core/connectors":22,
"./src/core/constants":23,"./src/core/math/Line2":24,"./src/core/math/Line3":25,"./src/core/math/Matrix4":26,"./src/core/math/OrthoNormalBasis":27,"./src/core/math/Path2":28,"./src/core/math/Plane":29,"./src/core/math/Polygon2":30,"./src/core/math/Polygon3":31,"./src/core/math/Side":32,"./src/core/math/Vector2":33,"./src/core/math/Vector3":34,"./src/core/math/Vertex2":35,"./src/core/math/Vertex3":36,"./src/core/mutators":39,"./src/core/utils":41}]},{},[50])(50)});var BinaryFileWriter=function(a){this.offset=0;this.buffer=new ArrayBuffer(a);this.dataView=new DataView(this.buffer)};BinaryFileWriter.prototype.toBlob=function(){return new Blob([this.dataView],{type:"application/octet-binary"})};BinaryFileWriter.prototype.writeUint32=function(a){this.dataView.setUint32(this.offset,a,!0);this.offset+=4};BinaryFileWriter.prototype.writeUint16=function(a){this.dataView.setUint16(this.offset,a,!0);this.offset+=2};
BinaryFileWriter.prototype.writeUint8=function(a){this.dataView.setUint8(this.offset,a,!0);this.offset+=1};BinaryFileWriter.prototype.writeFloat32=function(a){this.dataView.setFloat32(this.offset,a,!0);this.offset+=4};BinaryFileWriter.prototype.writeVec3=function(a){this.writeFloat32(a.x);this.writeFloat32(a.y);this.writeFloat32(a.z)};function SphereData(a,b){this.pos=a;this.radius=b}function CylinderData(a,b,c){this.pos1=a;this.pos2=b;this.radius=c}function TriangleData(a){this.trianglePoints=a}
function generateCsgMeshFrom(a,b,c){var d=null;0<c.length&&printUiSettings.exportTriangles&&(d=cindyTrianglePointsToIndexedMesh(c[0].trianglePoints,.01),printUiSettings.extrudeSurfaces&&(d=printUiSettings.smoothEdges?createOpenSurfaceShellMeshWithNormalsAndRoundEdges(d,printUiSettings.extrusionRadius):createOpenSurfaceShellMeshWithNormals(d,printUiSettings.extrusionRadius)));setCsgResolutionSphere(printUiSettings.sphereQuality);setCsgResolutionCylinder(printUiSettings.cylinderQuality);for(var g=[],
f=0;f<a.length;f++){var e=a[f].radius;0<c.length&&printUiSettings.extrudeSurfaces&&printUiSettings.exportTriangles&&(e+=1*printUiSettings.extrusionRadius,e*=printUiSettings.radiusFactor);g.push(createCSGSphere(a[f].pos,e))}for(f=0;f<b.length;f++)e=b[f].radius,0<c.length&&printUiSettings.extrudeSurfaces&&printUiSettings.exportTriangles&&(e+=1*printUiSettings.extrusionRadius,e*=printUiSettings.radiusFactor),g.push(createCSGCylinder(b[f].pos1,b[f].pos2,e));0<c.length&&printUiSettings.exportTriangles?
0==a.length&&0==b.length?a=d:(g=[convertTriangleMeshToCSGPolyhedron(d)].concat(g),a=mergeObjects(g)):a=mergeObjects(g);a.scale(printUiSettings.modelScale);return a};CindyJS.registerPlugin(1,"Cindy3DPrint",function(a){function b(a,b){var c,d;for(c in a)(d=b[c])?d(e(a[c])):console.log("Modifier "+c+" not supported")}function c(a){k=[];h=[];n=[];for(var b=0;b<a.spheres.count&&printUiSettings.exportSpheres;b++){var c=b*a.spheres.itemLength,e=a.spheres.dataAttribs[c+3];k.push(new SphereData([a.spheres.dataAttribs[c+0]/e,a.spheres.dataAttribs[c+1]/e,a.spheres.dataAttribs[c+2]/e],a.spheres.dataAttribs[c+11]))}for(b=0;b<a.cylinders.count&&printUiSettings.exportCylinders;b++){c=
b*a.cylinders.itemLength;e=a.cylinders.dataAttribs[c+3];var d=a.cylinders.dataAttribs[c+7];h.push(new CylinderData([a.cylinders.dataAttribs[c+0]/e,a.cylinders.dataAttribs[c+1]/e,a.cylinders.dataAttribs[c+2]/e],[a.cylinders.dataAttribs[c+4]/d,a.cylinders.dataAttribs[c+5]/d,a.cylinders.dataAttribs[c+6]/d],a.cylinders.dataAttribs[c+15]))}b=[];for(c=0;c<a.triangles.count&&printUiSettings.exportTriangles;c++)for(e=c*a.triangles.itemLength,d=0;3>d;d++){var f=e+d*a.triangles.itemLength/a.triangles.numElements,
g=a.triangles.dataAttribs[f+3];b.push([a.triangles.dataAttribs[f+0]/g,a.triangles.dataAttribs[f+1]/g,a.triangles.dataAttribs[f+2]/g])}0<b.length&&n.push(new TriangleData(b))}function d(a,b){c(CindyJS._pluginRegistry.Cindy3D.instances[a]);setWaitForMeshGeneration(!0);useWebWorkers?(a=new Worker(getCindyBaseDir()+"CindyPrintWorker.js"),setMeshCreationWorker(a),a.onmessage=function(a){a=a.data;a.__proto__=TriangleMesh.prototype;setMeshCreationWorker(null);setPreviewMesh(a);setWaitForMeshGeneration(!1);
b(a)},a.postMessage({printUiSettings:printUiSettings,command:"generateCsgMesh",spheres:k,cylinders:h,triangles:n})):(a=generateCsgMeshFrom(k,h,n),setPreviewMesh(a),setWaitForMeshGeneration(!1),b(a))}function g(a,b,c,e){b*=printUiSettings.radiusFactor;for(var d=[],f=0;f<a.length;f++){var g=a[f];d.push(new vec3(g.value[0].value.real,g.value[1].value.real,g.value[2].value.real))}setWaitForMeshGeneration(!0);createTubeMesh(d,b,c,function(a){a.scale(printUiSettings.modelScale);setPreviewMesh(a);setWaitForMeshGeneration(!1);
e(a)})}var f=a.nada,e=a.evaluate,l=a.defineFunction,k=[],h=[],n=[];l("savecsgmesh",1,function(c,e){var g=a.evaluate(c[0]).value,h="Cindy3D";b(e,{instancename:function(a){return h=coerce.toString(a,"Cindy3D")}});if(getWaitForMeshGeneration()&&!useWebWorkers)return f;d(h,function(a){a.saveToFile(g)});return f});l("savetubemesh",4,function(b,c){var e=a.evaluate(b[0]).value;c=a.evaluate(b[1]).value;var d=a.evaluate(b[2]).value.real;b=a.evaluate(b[3]).value;if(getWaitForMeshGeneration())return f;g(c,d,
b,function(a){a.saveToFile(e)});return f});l("addcindy3dprintui",1,function(b,c){b=a.evaluate(b[0]).value;document.body.insertAdjacentHTML("beforeend",uiStringStyle+uiStringCindy3D(b));isPrintPreviewCanvasInitialized||initPrintPreviewCanvas();return f});l("addcindy3dprintuitubes",5,function(b,c){c=a.evaluate(b[0]).value;var e=b[1].name,d=a.evaluate(b[2]).value,g=a.evaluate(b[3]).value;b=a.evaluate(b[4]).value;document.body.insertAdjacentHTML("beforeend",uiStringStyle+uiStringTubes(c,e,d,g,b));isPrintPreviewCanvasInitialized||
initPrintPreviewCanvas();return f});l("drawprintpreview",0,function(b,c){drawPrintPreview(a);return f});l("updatepreviewcdy3d",0,function(a,c){var e="Cindy3D";b(c,{instancename:function(a){return e=coerce.toString(a,"Cindy3D")}});if(getWaitForMeshGeneration()&&!useWebWorkers)return f;d(e,function(a){});return f});l("updatepreviewtubes",3,function(b,c){c=a.evaluate(b[0]).value;var e=a.evaluate(b[1]).value.real;b=a.evaluate(b[2]).value;if(getWaitForMeshGeneration())return f;g(c,e,b,function(a){});return f})});CindyJS.registerPlugin(1,"CindyGLPrint",function(a){function b(b,c,d,g,h,n,p,m){setWaitForMeshGeneration(!0);generateIsoMeshFromScalarFunction(g,n,h,function(c){c={ctype:"function",oper:b.name.toLowerCase()+"$1",args:[{ctype:"function",oper:"genList",modifs:{},args:[{ctype:"number",value:{real:c.x,imag:0}},{ctype:"number",value:{real:c.y,imag:0}},{ctype:"number",value:{real:c.z,imag:0}}]}],modifs:{}};return a.evaluate(c).value.real},function(b){b={ctype:"function",oper:c.name.toLowerCase()+"$1",args:[{ctype:"function",
oper:"genList",modifs:{},args:[{ctype:"number",value:{real:b.x,imag:0}},{ctype:"number",value:{real:b.y,imag:0}},{ctype:"number",value:{real:b.z,imag:0}}]}],modifs:{}};b=a.evaluate(b).value;return new vec3(b[0].value.real,b[1].value.real,b[2].value.real)},d,function(a){if(printUiSettings.clipToSphere){setCsgResolutionSphere(2*printUiSettings.sphereQuality);a=convertTriangleMeshToCSGPolyhedron(a);var b=createCSGSphere([g.x+p,g.y+p,g.z+p],p);a=intersectObjects([a,b])}a.scale(printUiSettings.modelScale);
setPreviewMesh(a);setWaitForMeshGeneration(!1);m(a)})}function c(a,c,d,g,h,n,p,m){b(c,d,g,h,n,p,m,function(b){b.saveToFile(a)})}var d=a.nada,g=a.defineFunction;g("saveisomeshtofile",7,function(b,e){e=a.evaluate(b[0]).value;var f=b[1],g=b[2],h=a.evaluate(b[3]).value.real,n=cindyscriptToVec3(a.evaluate(b[4])),p=a.evaluate(b[5]).value.real;b=a.evaluate(b[6]).value.real;var m=p*(b-1)/2;if(getWaitForMeshGeneration()&&!useWebWorkers)return d;c(e,f,g,h,n,b,p,m);return d});g("saveisomeshtofile",5,function(b,
e){e=a.evaluate(b[0]).value;var f=b[1],g=b[2],h=a.evaluate(b[3]).value.real;b=a.evaluate(b[4]).value.real;var n=new vec3(-b,-b,-b),p=printUiSettings.gridResolution+1,m=2*b/printUiSettings.gridResolution;if(getWaitForMeshGeneration()&&!useWebWorkers)return d;c(e,f,g,h,n,p,m,b);return d});g("addcindyglprintui",2,function(b,c){c=a.evaluate(b[0]).value;b=a.evaluate(b[1]).value;document.body.insertAdjacentHTML("beforeend",uiStringStyle+uiStringCindyGL(c,b));isPrintPreviewCanvasInitialized||initPrintPreviewCanvas();
return d});g("drawprintpreview",0,function(b,c){drawPrintPreview(a,previewMesh);return d});g("updatepreviewcdygl",4,function(c,e){e=c[0];var f=c[1],g=a.evaluate(c[2]).value.real;c=a.evaluate(c[3]).value.real;var h=new vec3(-c,-c,-c),n=printUiSettings.gridResolution+1,p=2*c/printUiSettings.gridResolution;if(getWaitForMeshGeneration()&&!useWebWorkers)return d;b(e,f,g,h,n,p,c,function(){});return d});g("updatepreviewcdygl",6,function(c,e){e=c[0];var f=c[1],g=a.evaluate(c[2]).value.real,h=cindyscriptToVec3(a.evaluate(c[3])),
n=a.evaluate(c[4]).value.real;c=a.evaluate(c[5]).value.real;var p=n*(c-1)/2;if(getWaitForMeshGeneration()&&!useWebWorkers)return d;b(e,f,g,h,c,n,p,function(){});return d})});function downloadTextFile(a,b){b=new Blob([b],{type:"text/plain;charset=utf-8"});downloadBlobAsFile(a,b)}function downloadBlobAsFile(a,b){var c=document.createElement("a");document.body.appendChild(c);c.download=a;c.href=URL.createObjectURL(b);c.click()};function trianglePointsToIndexedMesh(a,b,c){void 0===c&&(c=1E-5);for(var d=new TriangleMesh,g=[],f=0;f<a.length;f++)g.push(new IndexedPoint(a[f]));g=new KDTree;for(var e=f=0;e<a.length;e++){var l=a[e],k=new IndexedPoint(l),h=g.findCloseIndexedPoint(k,c);null!=h?d.indices.push(h.index):(k.index=f,g.addPoint(k),d.indices.push(f),d.vertices.push(l),void 0!==b&&d.normals.push(b[e]),f++)}return d}
function trianglePointsToIndexedMeshON2(a,b){void 0===b&&(b=1E-5);for(var c=new TriangleMesh,d=0;d<a.length;d++){for(var g=-1,f=0;f<c.vertices.length;f++){var e=a[d],l=c.vertices[f];if(Math.abs(e.x-l.x)<b&&Math.abs(e.y-l.y)<b&&Math.abs(e.z-l.z)<b){g=f;break}}0>g?(c.indices.push(c.vertices.length),c.vertices.push(a[d])):c.indices.push(g)}return c}function flipVertexListOrientation(a){for(var b=0;b<a.length;b+=3){var c=a[b];a[b]=a[b+2];a[b+2]=c}};function IndexedPoint(a){this.position=a;this.index=0}function KDNode(a,b){this.axis=a;this.point=b;this.right=this.left=null}function AxisAlignedBox(a,b){this.min=a;this.max=b}AxisAlignedBox.prototype.contains=function(a){return a.x>=this.min.x&&a.y>=this.min.y&&a.z>=this.min.z&&a.x<=this.max.x&&a.y<=this.max.y&&a.z<=this.max.z};function KDTree(){this.root=null}KDTree.prototype.build=function(a){this.root=this._build(a,0)};
KDTree.prototype._build=function(a,b){if(0==a.length)return null;var c=b%3;a.sort(function(a,b){return 0==c?a.position.x-b.position.x:1==c?a.position.y-b.position.y:a.position.z-b.position.z});var d=Math.floor(a.length/2),g=a.slice(0,d),f=a.slice(d+1,a.length);a=new KDNode(c,a[d]);a.left=this._build(g,b+1);a.right=this._build(f,b+1);return a};KDTree.prototype.addPoint=function(a){this.root=this._addPoint(this.root,0,a)};
KDTree.prototype._addPoint=function(a,b,c){var d=b%3;if(null==a)return new KDNode(d,c);0==d&&c.position.x<a.point.position.x||1==d&&c.position.y<a.point.position.y||2==d&&c.position.z<a.point.position.z?a.left=this._addPoint(a.left,b+1,c):a.right=this._addPoint(a.right,b+1,c);return a};KDTree.prototype.findPointsInAxisAlignedBox=function(a){var b=[];this._findPointsInAxisAlignedBox(a,this.root,b);return b};
KDTree.prototype._findPointsInAxisAlignedBox=function(a,b,c){null!=b&&(a.contains(b.point.position)&&c.push(b.point),(0==b.axis&&a.min.x<=b.point.position.x||1==b.axis&&a.min.y<=b.point.position.y||2==b.axis&&a.min.z<=b.point.position.z)&&this._findPointsInAxisAlignedBox(a,b.left,c),(0==b.axis&&a.max.x>=b.point.position.x||1==b.axis&&a.max.y>=b.point.position.y||2==b.axis&&a.max.z>=b.point.position.z)&&this._findPointsInAxisAlignedBox(a,b.right,c))};
KDTree.prototype.findCloseIndexedPoint=function(a,b){var c=new vec3(a.position.x-b,a.position.y-b,a.position.z-b),d=new vec3(a.position.x+b,a.position.y+b,a.position.z+b);c=new AxisAlignedBox(c,d);c=this.findPointsInAxisAlignedBox(c);d=null;for(var g=1E10,f=0;f<c.length;f++){var e=c[f],l=vec3length(vec3sub(a.position,e.position));l<g&&l<b&&e!==a&&(d=e,g=l)}return d};function GraphNode(){this.neighbors=[];this.edges=[];this.visited=!1}function GraphEdge(a,b){this.connectedNodes=[a,b];this.meshEdgeCount=1}function MeshGraph(a,b){this.nodes=[];this.edges=[];this.orderIndices=void 0===b?!0:b;for(b=0;b<a.vertices.length;b++)this.nodes.push(new GraphNode);for(b=0;b<a.indices.length;b+=3){var c=a.indices[b],d=a.indices[b+1],g=a.indices[b+2];this.addEdge(c,d);this.addEdge(d,g);this.addEdge(g,c)}}
MeshGraph.prototype.addEdge=function(a,b){if(-1!==this.nodes[a].neighbors.indexOf(b))for(var c=0;c<this.nodes[a].edges.length;c++)-1!==this.nodes[a].edges[c].connectedNodes.indexOf(b)&&(this.nodes[a].edges[c].meshEdgeCount+=1);else a>b&&this.orderIndices&&(c=a,a=b,b=c),c=new GraphEdge(a,b),this.nodes[a].neighbors.push(b),this.nodes[b].neighbors.push(a),this.nodes[a].edges.push(c),this.nodes[b].edges.push(c),this.edges.push(c)};
MeshGraph.prototype.hasNoHoles=function(){for(var a=0;a<this.edges.length;a++)if(2!=this.edges[a].meshEdgeCount)return console.log(this.edges[a]),!1;return!0};
MeshGraph.prototype.isFullyConnected=function(){for(var a=0;a<this.nodes.length;a++)this.nodes[a].visited=!1;a=[0];for(var b=new Set;0<a.length;){var c=a.shift(),d=this.nodes[c];d.visited=!0;b.add(c);for(c=0;c<d.neighbors.length;c++){var g=d.neighbors[c];b.has(g)||-1===!a.indexOf(g)||a.push(g)}}for(a=0;a<this.nodes.length;a++)if(!this.nodes[a].visited)return!1;return!0};var printPreviewInstanceName="Cindy3DPreview",isPrintPreviewCanvasInitialized=!1,isPrintPreviewGLInitialized=!1,needsRecreatePreviewRenderData=!1,previewShaderProgram=null,previewVertexBuffer=null,previewVertexPositions=null,previewVertexNormals=null,previewMesh=null,waitingForMeshCreation=!1,waitSymbolShaderProgram=null,fullscreenQuadVertexBuffer=null,useWebWorkers=!0,meshCreationWorker=null;
function initPrintPreviewCanvas(){var a=document.getElementById("Cindy3D");if(a){var b=a.width;var c=a.height;a.insertAdjacentHTML("afterend",'<canvas id="'+printPreviewInstanceName+'" style="border: none;" width="'+b+'" height="'+c+'"></canvas>')}else{a=document.getElementById("CSCanvas");b=self.cdy.canvas.clientWidth;c=self.cdy.canvas.clientHeight;var d=document.getElementById("CanvasWrapper");d?(d.style.display="flex",d.style["flex-wrap"]="wrap",d.insertAdjacentHTML("beforeend",'<div style="position: relative; width: '+
b+"px; height: "+c+'px;"><canvas id="'+printPreviewInstanceName+'" style="border: none;position: absolute; top: 0px; left: 0px;" width="'+b+'" height="'+c+'"></canvas></div>')):a.insertAdjacentHTML("afterend",'<div style="position: relative; width: '+b+"px; height: "+c+'px;"><canvas id="'+printPreviewInstanceName+'" style="border: none;position: absolute; top: 0px; left: 0px;" width="'+b+'" height="'+c+'"></canvas></div>')}isPrintPreviewCanvasInitialized=!0}
function initPrintPreviewGL(a){previewShaderProgram=new ShaderProgram(a,"attribute vec3 aPosition;attribute vec3 aNormal;varying vec3 fragmentPosition;varying vec3 fragmentNormal;uniform mat4 uProjectionMatrix;uniform mat4 uModelViewMatrix;uniform mat4 uModelMatrix;void main() {fragmentPosition = (uModelMatrix * vec4(aPosition, 1.0)).xyz;fragmentNormal = (uModelMatrix * vec4(aNormal, 1.0)).xyz;gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0);}","precision highp float;\nuniform vec3 cameraPosition;\nuniform vec3 lightPosition;\nuniform vec3 objectColor;\nvarying vec3 fragmentPosition;\nvarying vec3 fragmentNormal;\nvec3 light(vec3 n, vec3 l, vec3 v, float spec, vec3 color) {\nvec3 h = normalize(v + l);\nfloat kd = clamp(dot(n,l), 0.0, 1.0) * 0.4;\nfloat ks = pow(clamp(dot(n,h), 0.0, 1.0), 8.0)*spec;\nreturn vec3(kd*color + vec3(ks));}\nvoid main()\n{\nvec3 n = normalize(fragmentNormal);\nvec3 v = normalize(cameraPosition - fragmentPosition);\nfloat ka = 0.2;\nvec3 lightColor1 = light(n, normalize(vec3(5.0, -3.0, 1.0)), v, 0.2, vec3(0.3, 0.3, 0.5));\nvec3 lightColor2 = light(n, normalize(vec3(-1.2, 0.6, 1.0)), v, 0.3, vec3(0.6, 0.6, 0.6));\ngl_FragColor = vec4(lightColor1 + lightColor2 + vec3(ka), 1.0);\n}\n");
isPrintPreviewGLInitialized=!0}function setWaitForMeshGeneration(a){waitingForMeshCreation=a}function getWaitForMeshGeneration(){return waitingForMeshCreation}function setPreviewMesh(a){a!==previewMesh&&(previewMesh=a,needsRecreatePreviewRenderData=!0)}function setMeshCreationWorker(a){meshCreationWorker&&meshCreationWorker.terminate();meshCreationWorker=a}
function createPrintPreviewRenderData(a){for(var b=[],c=[],d=0;d<previewMesh.indices.length;d+=3){var g=previewMesh.vertices[previewMesh.indices[d+0]],f=previewMesh.vertices[previewMesh.indices[d+2]];g=vec3normalize(vec3cross(vec3sub(previewMesh.vertices[previewMesh.indices[d+1]],g),vec3sub(f,g)));for(f=0;3>f;f++){var e=previewMesh.vertices[previewMesh.indices[d+f]];b.push(.1*e.x);b.push(.1*e.y);b.push(.1*e.z);c.push(g.x);c.push(g.y);c.push(g.z)}}previewVertexPositions=new Float32Array(b);previewVertexNormals=
new Float32Array(c);previewVertexBuffer=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,previewVertexBuffer);a.bufferData(a.ARRAY_BUFFER,previewVertexPositions.byteLength+previewVertexNormals.byteLength,a.STATIC_DRAW);a.bufferSubData(a.ARRAY_BUFFER,0,previewVertexPositions);a.bufferSubData(a.ARRAY_BUFFER,previewVertexPositions.byteLength,previewVertexNormals);needsRecreatePreviewRenderData=!1;console.log("Updated preview.")}
function renderPrintPreview(a){isPrintPreviewGLInitialized||initPrintPreviewGL(a);needsRecreatePreviewRenderData&&createPrintPreviewRenderData(a);a.clearColor(.22,.22,.22,1);a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT);waitingForMeshCreation&&renderWaitSymbol(a);if(null!==previewMesh&&!waitingForMeshCreation){var b=CindyJS._pluginRegistry.Cindy3D.instances[printPreviewInstanceName].camera;previewShaderProgram.use(a);previewShaderProgram.uniform.cameraPosition([-b.mvMatrix[3],-b.mvMatrix[7],-b.mvMatrix[11],
1].slice(0,3));previewShaderProgram.uniform.uProjectionMatrix(b.projectionMatrix);previewShaderProgram.uniform.uModelViewMatrix(transpose4(b.mvMatrix));previewShaderProgram.uniform.uModelMatrix(transpose4(b.modelMatrix));b=previewVertexPositions.byteLength;var c=a.getAttribLocation(previewShaderProgram.handle,"aPosition");a.enableVertexAttribArray(c);var d=a.getAttribLocation(previewShaderProgram.handle,"aNormal");a.enableVertexAttribArray(d);a.bindBuffer(a.ARRAY_BUFFER,previewVertexBuffer);a.vertexAttribPointer(c,
3,a.FLOAT,!1,0,0);a.vertexAttribPointer(d,3,a.FLOAT,!1,0,b);a.drawArrays(a.TRIANGLES,0,previewMesh.indices.length);a.disableVertexAttribArray(c);a.disableVertexAttribArray(d)}}
function renderWaitSymbol(a){if(!fullscreenQuadVertexBuffer){waitSymbolShaderProgram=new ShaderProgram(a,"attribute vec3 aPos;attribute vec2 aTexCoord;varying vec2 iUv;void main() {iUv = aTexCoord;gl_Position = vec4(aPos, 1.0);}","precision highp float;\nvarying vec2 iUv;\nuniform float time;\n#define EPSILON 0.02\nfloat getSmoothRectangle(float x, float minval, float maxval) {\nreturn smoothstep(minval-EPSILON, minval+EPSILON, x) - smoothstep(maxval-EPSILON, maxval+EPSILON, x);\n}\n#define PI 3.14159265358979323846\nvoid main()\n{\nvec2 unitCirclePos = normalize(iUv*2.0 - vec2(1.0));\nvec2 position = (iUv*2.0 - vec2(1.0)) * 8.0;\nfloat len = length(position);\nfloat interpolationFactor = getSmoothRectangle(len, 0.8, 1.0);\nfloat angle = atan(unitCirclePos.y, unitCirclePos.x);\nvec3 color = vec3(mod(angle+PI+time, 2.0*PI)/(2.0*PI)/2.0 + 0.3);\ngl_FragColor = vec4(interpolationFactor*color, 1.0);\n}");fullscreenQuadVertexBuffer=
a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,fullscreenQuadVertexBuffer);var b=new Float32Array([-1,-1,0,1,-1,0,-1,1,0,1,1,0]),c=new Float32Array([0,0,1,0,0,1,1,1]);a.bufferData(a.ARRAY_BUFFER,48+c.byteLength,a.STATIC_DRAW);a.bufferSubData(a.ARRAY_BUFFER,0,b);a.bufferSubData(a.ARRAY_BUFFER,48,c)}waitSymbolShaderProgram.use(a);waitSymbolShaderProgram.uniform.time([Date.now()/1E3%(2*Math.PI)]);b=a.getAttribLocation(waitSymbolShaderProgram.handle,"aPos");a.enableVertexAttribArray(b);c=a.getAttribLocation(waitSymbolShaderProgram.handle,
"aTexCoord");a.enableVertexAttribArray(c);a.bindBuffer(a.ARRAY_BUFFER,fullscreenQuadVertexBuffer);a.vertexAttribPointer(b,3,a.FLOAT,!1,0,0);a.vertexAttribPointer(c,2,a.FLOAT,!1,0,48);a.drawArrays(a.TRIANGLE_STRIP,0,4);a.disableVertexAttribArray(b);a.disableVertexAttribArray(c)}
function drawPrintPreview(a){a=a.instance.evokeCS;a('begin3d(name->"'+printPreviewInstanceName+'");');a("depthrange3d(0.2, 1000.0);");CindyJS._pluginRegistry.Cindy3D.instances[printPreviewInstanceName].externalRenderHook=renderPrintPreview;a("end3d();")};var PrintUiSettings=function(){this.exportTriangles=this.exportCylinders=this.exportSpheres=!0;this.cylinderQuality=this.sphereQuality=16;this.radiusFactor=this.lineSubdivisions=1;this.modelScale=10;this.extrudeSurfaces=!0;this.extrusionRadius=.1;this.smoothEdges=!0;this.clipToSphere=!1;this.isoOffset=.01;this.gridResolution=50;this.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;this.gamma=.1},reconstructionAlgorithms={SNAPMC:"snapMC",MARCHINGCUBES:"marchingCubes"},printUiSettings=new PrintUiSettings;
function cindyPrintUpdateExportSpheres(){var a=document.getElementById("exportSpheres");printUiSettings.exportSpheres=a.checked}function cindyPrintUpdateExportCylinders(){var a=document.getElementById("exportCylinders");printUiSettings.exportCylinders=a.checked}function cindyPrintUpdateExportTriangles(){var a=document.getElementById("exportTriangles");printUiSettings.exportTriangles=a.checked}
function cindyPrintUpdateSphereQuality(){var a=document.getElementById("sphereQuality");printUiSettings.sphereQuality=1*a.value}function cindyPrintUpdateCylinderQuality(){var a=document.getElementById("cylinderQuality");printUiSettings.cylinderQuality=1*a.value}function cindyPrintUpdateLineSubdivisions(){var a=document.getElementById("lineSubdivisions");printUiSettings.lineSubdivisions=a.value/50}
function cindyPrintUpdateRadiusFactor(){var a=document.getElementById("radiusFactor");printUiSettings.radiusFactor=a.value/50}function cindyPrintUpdateModelScale(){var a=document.getElementById("modelScale");printUiSettings.modelScale=1*a.value}function cindyPrintUpdateExtrudeSurfaces(){var a=document.getElementById("extrudeSurfaces");printUiSettings.extrudeSurfaces=a.checked}
function cindyPrintUpdateExtrusionRadius(){var a=document.getElementById("extrusionRadius");printUiSettings.extrusionRadius=a.value/100}function cindyPrintUpdateSmoothEdges(){var a=document.getElementById("smoothEdges");printUiSettings.smoothEdges=a.checked}function cindyPrintUpdateClipToSphere(){var a=document.getElementById("clipToSphere");printUiSettings.clipToSphere=a.checked}
function cindyPrintUpdateIsoOffset(){var a=document.getElementById("isoOffset");printUiSettings.isoOffset=a.value/100;self.cdy.evokeCS("F(p) := (fun(p.x, p.y, p.z) - "+printUiSettings.isoOffset+");")}function cindyPrintUpdateGridResolution(){var a=document.getElementById("gridResolution");printUiSettings.gridResolution=1*a.value}
function cindyPrintUpdateReconstructionAlgorithm(){switch(document.getElementById("reconstructionAlgorithm").value){case "marchingCubes":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.MARCHINGCUBES;break;case "snapmc0.0":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=0;break;case "snapmc0.1":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=.1;break;case "snapmc0.2":printUiSettings.reconstructionAlgorithm=
reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=.2;break;case "snapmc0.3":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=.3;break;case "snapmc0.4":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC;printUiSettings.gamma=.4;break;case "snapmc0.5":printUiSettings.reconstructionAlgorithm=reconstructionAlgorithms.SNAPMC,printUiSettings.gamma=.5}}self.cindyPrintUpdateExportSpheres=cindyPrintUpdateExportSpheres;
self.cindyPrintUpdateExportCylinders=cindyPrintUpdateExportCylinders;self.cindyPrintUpdateExportTriangles=cindyPrintUpdateExportTriangles;self.cindyPrintUpdateSphereQuality=cindyPrintUpdateSphereQuality;self.cindyPrintUpdateCylinderQuality=cindyPrintUpdateCylinderQuality;self.cindyPrintUpdateLineSubdivisions=cindyPrintUpdateLineSubdivisions;self.cindyPrintUpdateRadiusFactor=cindyPrintUpdateRadiusFactor;self.cindyPrintUpdateModelScale=cindyPrintUpdateModelScale;
self.cindyPrintUpdateExtrudeSurfaces=cindyPrintUpdateExtrudeSurfaces;self.cindyPrintUpdateExtrusionRadius=cindyPrintUpdateExtrusionRadius;self.cindyPrintUpdateSmoothEdges=cindyPrintUpdateSmoothEdges;self.cindyPrintUpdateClipToSphere=cindyPrintUpdateClipToSphere;self.cindyPrintUpdateIsoOffset=cindyPrintUpdateIsoOffset;self.cindyPrintUpdateGridResolution=cindyPrintUpdateGridResolution;self.cindyPrintUpdateReconstructionAlgorithm=cindyPrintUpdateReconstructionAlgorithm;
function uiStringCindy3D(a){var b=CindyJS.getBaseDir()+"images/cindyprint/";return'<input type="checkbox" id="exportSpheres" onclick="cindyPrintUpdateExportSpheres()" checked> Spheres <image class=\'smallimg\' src=\''+b+'SphereHighRes.png\'/><input type="checkbox" id="exportCylinders" onclick="cindyPrintUpdateExportCylinders()" checked> Cylinders <image class=\'smallimg\' src=\''+b+'CylinderHighRes.png\'/><input type="checkbox" id="exportTriangles" onclick="cindyPrintUpdateExportTriangles()" checked> Triangles  <image class=\'smallimg\' src=\''+
b+"Triangles.png'/><br><table>    <tr><th>Sphere quality</th><th><image src='"+b+'SphereLowRes.png\'/></th><th><div class="slidecontainer"><input type="range" min="8" max="64" value="16" class="slider" id="sphereQuality" oninput="cindyPrintUpdateSphereQuality()"></th><th><image src=\''+b+"SphereHighRes.png'/></th></tr>    <tr><th>Cylinder quality</th><th><image src='"+b+'CylinderLowRes.png\'/></th><th><div class="slidecontainer"><input type="range" min="8" max="64" value="16" class="slider" id="cylinderQuality" oninput="cindyPrintUpdateCylinderQuality()"></th><th><image src=\''+
b+"CylinderHighRes.png'/></th></tr>    <tr><th>Radius factor</th><th><image src='"+b+'SphereSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="50" class="slider" id="radiusFactor" oninput="cindyPrintUpdateRadiusFactor()"></th><th><image src=\''+b+"SphereHighRes.png'/></th></tr>    <tr><th>Model scale</th><th><image src='"+b+'SizeSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="10" class="slider" id="modelScale" oninput="cindyPrintUpdateModelScale()"></th><th><image src=\''+
b+'SizeLarge.png\'/></th></tr></table><input type="checkbox" id="extrudeSurfaces" onclick="cindyPrintUpdateExtrudeSurfaces()" checked> Extrude the triangle surfaces<table>    <tr><th>Extrusion radius</th><th><image src=\''+b+'ExtrudeSurfaceSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="0" max="100" value="10" class="slider" id="extrusionRadius" oninput="cindyPrintUpdateExtrusionRadius()"></th><th><image src=\''+b+'ExtrudeSurfaceLarge.png\'/></th></tr></table><input type="checkbox" id="smoothEdges" onclick="cindyPrintUpdateSmoothEdges()" checked> Smooth extrusion edges<br><button onclick="cdy.evokeCS(\'savecsgmesh(&quot;'+
a+"&quot;)');\">Export mesh</button><button onclick=\"cdy.evokeCS('updatepreviewcdy3d()');\">Update Preview</button>"}
function uiStringTubes(a,b,c,d,g){var f=CindyJS.getBaseDir()+"images/cindyprint/",e="true";g||(e="false");return"<table>    <tr><th>Cylinder quality</th><th><image src='"+f+'CylinderLowRes.png\'/></th><th><div class="slidecontainer"><input type="range" min="8" max="64" value="16" class="slider" id="cylinderQuality" oninput="cindyPrintUpdateCylinderQuality()"></th><th><image src=\''+f+"CylinderHighRes.png'/></th></tr>    <tr><th>Line subdivisions</th><th><image src='"+f+'LineSubdivisionLow.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="50" class="slider" id="lineSubdivisions" oninput="cindyPrintUpdateLineSubdivisions()"></th><th><image src=\''+
f+"LineSubdivisionHigh.png'/></th></tr>    <tr><th>Radius factor</th><th><image src='"+f+'TubeThin.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="50" class="slider" id="radiusFactor" oninput="cindyPrintUpdateRadiusFactor()"></th><th><image src=\''+f+"TubeThick.png'/></th></tr>    <tr><th>Model scale</th><th><image src='"+f+'SizeSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="10" class="slider" id="modelScale" oninput="cindyPrintUpdateModelScale()"></th><th><image src=\''+
f+"SizeLarge.png'/></th></tr></table><button onclick=\"cdy.evokeCS('savetubemesh(&quot;"+a+"&quot;, "+b+"(' + document.getElementById('lineSubdivisions').value/50 + '*("+c+")), "+d+"/20, "+e+");');\">Export mesh</button><button onclick=\"cdy.evokeCS('updatepreviewtubes("+b+"(' + document.getElementById('lineSubdivisions').value/50 + '*("+c+")), "+d+"/20, "+e+");');\">Update Preview</button>"}
function uiStringCindyGL(a,b){var c=CindyJS.getBaseDir()+"images/cindyprint/";return'<input type="checkbox" id="extrudeSurfaces" onclick="cindyPrintUpdateExtrudeSurfaces()" checked> Extrude the triangle surfaces<table>    <tr><th>Extrusion radius</th><th><image src=\''+c+'ExtrudeSurfaceSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="0" max="100" value="10" class="slider" id="extrusionRadius" oninput="cindyPrintUpdateExtrusionRadius()"></th><th><image src=\''+c+'ExtrudeSurfaceLarge.png\'/></th></tr></table><input type="checkbox" id="smoothEdges" onclick="cindyPrintUpdateSmoothEdges()" checked> Smooth extrusion edges<input type="checkbox" id="clipToSphere" onclick="cindyPrintUpdateClipToSphere()"> Clip geometry to sphere<table>    <tr><th>Sphere quality</th><th><image src=\''+
c+'SphereLowRes.png\'/></th><th><div class="slidecontainer"><input type="range" min="8" max="32" value="16" class="slider" id="sphereQuality" oninput="cindyPrintUpdateSphereQuality()"></th><th><image src=\''+c+"SphereHighRes.png'/></th></tr>    <tr><th>Model scale</th><th><image src='"+c+'SizeSmall.png\'/></th><th><div class="slidecontainer"><input type="range" min="1" max="100" value="10" class="slider" id="modelScale" oninput="cindyPrintUpdateModelScale()"></th><th><image src=\''+c+"SizeLarge.png'/></th></tr>    <tr><th>Iso offset</th><th><image src='"+
c+'IsoA.png\'/></th><th><div class="slidecontainer"><input type="range" min="0" max="100" value="0" class="slider" id="isoOffset" oninput="cindyPrintUpdateIsoOffset()"></th><th><image src=\''+c+"IsoB.png'/></tr>    <tr><th>Grid resolution</th><th><image src='"+c+'GridResLow.png\'/></th><th><div class="slidecontainer"><input type="range" min="16" max="128" value="50" class="slider" id="gridResolution" oninput="cindyPrintUpdateGridResolution()"></th><th><image src=\''+c+'ExtrudeSurfaceSmall.png\'/></th></tr></table>Implicit surface reconstruction algorithm <select name="reconstructionAlgorithm" id="reconstructionAlgorithm" onchange="cindyPrintUpdateReconstructionAlgorithm()"> <option value="marchingCubes">Marching Cubes</option><option value="snapmc0.0">SnapMC (&gamma;=0.0)</option><option selected value="snapmc0.1">SnapMC (&gamma;=0.1)</option><option value="snapmc0.2">SnapMC (&gamma;=0.2)</option><option value="snapmc0.3">SnapMC (&gamma;=0.3)</option><option value="snapmc0.4">SnapMC (&gamma;=0.4)</option><option value="snapmc0.5">SnapMC (&gamma;=0.5)</option></select><br><button onclick="cdy.evokeCS(\'saveisomeshtofile(&quot;'+
a+"&quot;, "+b+");');\">Export Mesh</button><button onclick=\"cdy.evokeCS('updatepreviewcdygl("+b+")');\">Update Preview</button>"}
var uiStringStyle="<style>.vertaligncontainer {  display: flex;}table {  border-collapse: collapse;  text-align:left;}th {    font-weight: normal;}/* https://www.w3schools.com/howto/howto_js_rangeslider.asp */.slidecontainer {  width: 220px;  display:inline-block;  margin-left:10px;  vertical-align: baseline;}.slider {  -webkit-appearance: none;  width: 100%;  height: 15px;  border-radius: 5px;  background: #d3d3d3;  outline: none;  opacity: 0.7;  -webkit-transition: .2s;  transition: opacity .2s;}.slider:hover {  opacity: 1;}.slider::-webkit-slider-thumb {  -webkit-appearance: none;  appearance: none;  width: 20px;  height: 20px;  border-radius: 50%;  background: #4CAF50;  cursor: pointer;}.slider::-moz-range-thumb {  width: 20px;  height: 20px;  border-radius: 50%;  background: #4CAF50;  cursor: pointer;}th > img {  width: 22px;  height: 22px;  text-align:center;  vertical-align:middle;  margin-left:5px;  margin-right:-8px;}.smallimg {  width: 22px;  height: 22px;  text-align:center;  vertical-align:middle;  margin-left:1px;  margin-right:14px;}th {  display: table-cell;  text-align:center;  vertical-align:middle;}</style>",cindyBaseDir=
null;function getCindyBaseDir(){if(null!==cindyBaseDir)return cindyBaseDir;for(var a=document.getElementsByTagName("script"),b=0;b<a.length;++b){var c=a[b].src;if(c){var d=/Cindy\.js$/.exec(c);if(d)return cindyBaseDir=c.substr(0,d.index)}}console.error("Could not find <script> tag for Cindy.js");return cindyBaseDir};function TriangleMesh(){this.vertices=[];this.normals=[];this.indices=[]}TriangleMesh.prototype.scale=function(a){for(var b=0;b<this.vertices.length;b++)this.vertices[b]=vec3mul(a,this.vertices[b])};
TriangleMesh.prototype.computeSmoothNormals=function(){this.normals=[];for(var a=0;a<this.vertices.length;a++){for(var b=new vec3(0,0,0),c=0,d=0;d<this.indices.length;d+=3)if(this.indices[d]==a||this.indices[d+1]==a||this.indices[d+2]==a){var g=this.indices[d],f=this.indices[d+2],e=vec3sub(this.vertices[this.indices[d+1]],this.vertices[g]);g=vec3sub(this.vertices[f],this.vertices[g]);e=vec3cross(e,g);g=vec3length(e);1E-6<g&&(e=vec3mul(1/g,e));b=vec3add(b,e);c++}0==c&&alert("Error in createNormals: numTrianglesSharedBy == 0");
b=vec3mul(1/c,b);this.normals.push(b)}};TriangleMesh.prototype.saveToObjFile=function(a){for(var b="o printmesh\ns 1\n",c=0;c<this.vertices.length;c++){var d=this.vertices[c];b=b+"v "+d.x+" "+d.y+" "+d.z+"\n";0<this.normals.length&&(d=this.normals[c],b=b+"vn "+d.x+" "+d.y+" "+d.z+"\n")}for(c=0;c<this.indices.length;c+=3){d=this.indices[c];var g=this.indices[c+1],f=this.indices[c+2];b=b+"f "+d+"//"+d+" "+g+"//"+g+" "+f+"//"+f+"\n"}downloadTextFile(a,b)};
TriangleMesh.prototype.saveToAsciiStlFile=function(a){for(var b="solid printmesh\n\n",c=0;c<this.indices.length;c+=3){var d=this.vertices[this.indices[c]],g=this.vertices[this.indices[c+2]],f=vec3sub(this.vertices[this.indices[c+1]],d);d=vec3sub(g,d);f=vec3normalize(vec3cross(f,d));b=b+"facet normal "+f.x+" "+f.y+" "+f.z+"\n";b+="\touter loop\n";for(f=0;3>f;f++)d=this.vertices[this.indices[c+f]],b=b+"\t\tvertex "+d.x+" "+d.y+" "+d.z+"\n";b+="\tendloop\nendfacet\n"}downloadTextFile(a,b+"\nendsolid printmesh\n")};
TriangleMesh.prototype.saveToBinaryStlFile=function(a){for(var b=new BinaryFileWriter(84+this.indices.length/3*50),c=0;20>c;c++)b.writeUint32(0);b.writeUint32(this.indices.length/3);for(c=0;c<this.indices.length;c+=3){var d=this.vertices[this.indices[c]],g=this.vertices[this.indices[c+1]],f=this.vertices[this.indices[c+2]],e=vec3sub(g,d),l=vec3sub(f,d);e=vec3normalize(vec3cross(e,l));b.writeVec3(e);b.writeVec3(d);b.writeVec3(g);b.writeVec3(f);b.writeUint16(0)}downloadBlobAsFile(a,b.toBlob())};
TriangleMesh.prototype.saveToFile=function(a){var b=new MeshGraph(this);0>=this.vertices.length?alert("TriangleMesh.prototype.saveToFile: The mesh is empty."):(b.hasNoHoles()||alert("TriangleMesh.prototype.saveToFile: The mesh has holes or is not a closed surface."),b.isFullyConnected()||alert("TriangleMesh.prototype.saveToFile: The mesh consists of multiple components."),a.endsWith(".obj")?this.saveToObjFile(a):a.endsWith(".stl")?this.saveToBinaryStlFile(a):alert("TriangleMesh.prototype.saveToFile: Unsupported mesh format."))};function vec3(a,b,c){this.x=a;this.y=b;this.z=c}vec3.prototype.set=function(a,b,c){this.x=a;this.y=b;this.z=c};function vec3add(a,b){return new vec3(a.x+b.x,a.y+b.y,a.z+b.z)}function vec3sub(a,b){return new vec3(a.x-b.x,a.y-b.y,a.z-b.z)}function vec3mul(a,b){return new vec3(b.x*a,b.y*a,b.z*a)}function vec3div(a,b){return new vec3(b.x/a,b.y/a,b.z/a)}function vec3lengthsq(a){return a.x*a.x+a.y*a.y+a.z*a.z}function vec3length(a){return Math.sqrt(a.x*a.x+a.y*a.y+a.z*a.z)}
function vec3dot(a,b){return a.x*b.x+a.y*b.y+a.z*b.z}function vec3cross(a,b){return new vec3(a.y*b.z-a.z*b.y,a.z*b.x-a.x*b.z,a.x*b.y-a.y*b.x)}function vec3normalize(a){return vec3mul(1/vec3length(a),a)}function cindyscriptToVec3(a){return new vec3(a.value[0].value.real,a.value[1].value.real,a.value[2].value.real)}function vec3tolist(a){return[a.x,a.y,a.z]};var CSG;if("undefined"===typeof CindyJS)importScripts("csg.js"),self.CSG=self.csg.CSG,self.CAG=self.csg.CAG;else{var csgReady=function(){self.CSG=self.csg.CSG;self.CAG=self.csg.CAG};CindyJS.loadScript("csg","csg.js",csgReady)}var csgResolution=8,csgResolutionSphere=16,csgResolutionCylinder=8;function setCsgResolution(a){csgResolution=a}function setCsgResolutionSphere(a){csgResolutionSphere=a}function setCsgResolutionCylinder(a){csgResolutionCylinder=a}
function createCSGSphere(a,b){return self.CSG.sphere({center:a,radius:b,resolution:csgResolutionSphere})}function createCSGCylinder(a,b,c){return self.CSG.roundedCylinder({start:a,end:b,radius:c,resolution:csgResolutionCylinder})}function convertCindy3DTrianglesToPolyhedron(a){a=cindyTrianglePointsToIndexedMesh(a);return convertTriangleMeshToCSGPolyhedron(a)}
function convertTriangleMeshToCSGPolyhedron(a){for(var b=[],c=0;c<a.vertices.length;c++){var d=a.vertices[c];b.push([d.x,d.y,d.z])}c=[];for(d=0;d<a.indices.length;d+=3)c.push([a.indices[d+2],a.indices[d+1],a.indices[d]]);return self.CSG.polyhedron({points:b,faces:c})}
function mergeCindy3DObjectsToMesh(a,b,c){for(var d=[],g=0;g<a.length;g++)d.push(createCSGSphere(a[g].pos,a[g].radius));for(a=0;a<b.length;a++)d.push(createCSGCylinder(b[a].pos1,b[a].pos2,b[a].radius));for(b=0;b<c.length;b++)d.push(convertCindy3DTrianglesToPolyhedron(c[b].trianglePoints));return mergeObjects(d)}function mergeObjects(a){a=(new self.CSG).union(a);return convertCSGPolygonsToTriangleMesh(a)}
function intersectObjects(a){a=(new self.CSG).intersect(a);return convertCSGPolygonsToTriangleMesh(a)}function convertCSGPolygonsToTriangleMesh(a){a=a.toTriangles();for(var b=[],c=0;c<a.length;c++)for(var d=a[c].vertices,g=0;3>g;g++){var f=d[g].pos;b.push(new vec3(f._x,f._y,f._z))}return trianglePointsToIndexedMesh(b)}function cindyTrianglePointsToIndexedMesh(a,b){a=a.map(function(a){return new vec3(a[0],a[1],a[2])});return trianglePointsToIndexedMesh(a,void 0,b)};function createOpenSurfaceShellMeshWithNormals(a,b){0==a.normals.length&&a.computeSmoothNormals();var c=[],d=[];c=a.indices.concat(a.indices.map(function(b){return b+a.vertices.length}));d=a.vertices.concat(a.vertices);for(var g=0;g<a.indices.length;g+=3){var f=c[g];c[g]=c[g+2];c[g+2]=f}for(g=0;g<a.vertices.length;g++){f=a.vertices[g];var e=a.normals[g],l=vec3mul(b,e);e=vec3mul(-b,e);d[g]=vec3add(f,e);d[g+a.vertices.length]=vec3add(f,l)}b=new MeshGraph(a,!1);for(g=0;g<b.edges.length;g++)1==b.edges[g].meshEdgeCount&&
(l=b.edges[g].connectedNodes,f=l[0],l=l[1],e=l+a.vertices.length,c=c.concat([e,f+a.vertices.length,f,l,e,f]));b=new TriangleMesh;b.indices=c;b.vertices=d;return b}
function createOpenSurfaceShellMeshWithNormalsAndRoundEdges(a,b){0==a.normals.length&&a.computeSmoothNormals();var c=[],d=[];c=a.indices.concat(a.indices.map(function(b){return b+a.vertices.length}));d=a.vertices.concat(a.vertices);for(var g=0;g<a.indices.length;g+=3){var f=c[g];c[g]=c[g+2];c[g+2]=f}for(g=0;g<a.vertices.length;g++){f=a.vertices[g];var e=a.normals[g],l=vec3mul(b,e);e=vec3mul(-b,e);d[g]=vec3add(f,e);d[g+a.vertices.length]=vec3add(f,l)}addTubesOnBorderEdges(a,a.vertices,a.indices,d,
c,8,b);b=new TriangleMesh;b.indices=c;b.vertices=d;return b}
function getBorderEdgeLoops(a){for(var b=new Set,c=[],d=0;d<a.edges.length;d++)if(1==a.edges[d].meshEdgeCount&&!b.has(a.edges[d])){b.add(a.edges[d]);var g=a.edges[d].connectedNodes,f=g[0];g=g[1];for(var e=f,l=[f];g!=e;){var k=null;for(f=0;f<a.edges.length;f++)if(1==a.edges[f].meshEdgeCount&&-1!==a.edges[f].connectedNodes.indexOf(g)&&!b.has(a.edges[f])){k=a.edges[f];break}b.add(k);k.connectedNodes[0]==g?(f=k.connectedNodes[0],g=k.connectedNodes[1]):(f=k.connectedNodes[1],g=k.connectedNodes[0]);l.push(f)}c.push(l)}return c}
var halfCirclePointData=[];function initArcVertices(a,b,c,d){var g=d/(a-1);d=Math.tan(g);g=Math.cos(g);b=new vec3(b*Math.cos(c),b*Math.sin(c),0);halfCirclePointData=[];for(c=0;c<a;c++){halfCirclePointData.push(b);var f=new vec3(-b.y,b.x,0);b=vec3add(b,vec3mul(d,f));b=vec3mul(g,b)}}
function getTransformedCircleVertices(a,b,c){for(var d=vec3cross(b,c),g=[],f=0;f<halfCirclePointData.length;f++){var e=halfCirclePointData[f];e=new vec3(e.x*b.x+e.y*d.x+e.z*c.x+a.x,e.x*b.y+e.y*d.y+e.z*c.y+a.y,e.x*b.z+e.y*d.z+e.z*c.z+a.z);g.push(e)}return g}
function addTubesOnBorderEdges(a,b,c,d,g,f,e){initArcVertices(f-2,e,-Math.PI/2+Math.PI/(f-1),Math.PI-2*Math.PI/(f-1));f=new MeshGraph(a,!1);c=d.length;f=getBorderEdgeLoops(f);for(e=0;e<f.length;e++)for(var l=0;l<f[e].length;l++){var k=f[e][(l-1+f[e].length)%f[e].length],h=f[e][l],n=f[e][(l+1)%f[e].length],p=b[h],m=b[n],q=vec3add(vec3sub(p,b[k]),vec3sub(m,p));m=vec3length(q);if(!(1E-4>m)){q=vec3mul(1/m,q);m=h;var r=n;h+=a.vertices.length;n+=a.vertices.length;k=vec3cross(vec3sub(d[h],d[k]),vec3sub(d[h],
d[m]));var v=vec3cross(vec3sub(d[n],d[m]),vec3sub(d[n],d[r]));k=vec3normalize(vec3add(k,v));p=getTransformedCircleVertices(p,k,q);for(q=0;q<p.length;q++)d.push(p[q]);q=[];k=[];q.push(m);k.push(r);for(m=0;m<p.length;m++)q.push(c+m),l<f[e].length-1?k.push(c+p.length+m):k.push(c-p.length*(f[e].length-1)+m);q.push(h);k.push(n);c+=p.length;for(m=0;m<q.length-1;m++)g.push(k[m+1]),g.push(q[m+1]),g.push(q[m]),g.push(k[m]),g.push(k[m+1]),g.push(q[m])}}};var circlePointData=[],circlePointDataTubeRadius=0;function initCircleVertices(a,b){circlePointData=[];circlePointDataTubeRadius=b;var c=6.2831852/a,d=Math.tan(c);c=Math.cos(c);b=new vec3(b,0,0);for(var g=0;g<a;g++){circlePointData.push(b);var f=new vec3(-b.y,b.x,0);b=vec3add(b,vec3mul(d,f));b=vec3mul(c,b)}}
function insertOrientedCirclePoints(a,b,c,d,g){var f=g;.01>vec3length(vec3cross(f,d))&&(f=new vec3(0,1,0));f=vec3normalize(vec3sub(f,vec3mul(vec3dot(f,d),d)));g.set(f.x,f.y,f.z);g=vec3cross(d,f);for(var e=0;e<circlePointData.length;e++){var l=circlePointData[e];l=new vec3(l.x*f.x+l.y*g.x+l.z*d.x+c.x,l.x*f.y+l.y*g.y+l.z*d.y+c.y,l.x*f.z+l.y*g.z+l.z*d.z+c.z);a.push(l);l=vec3normalize(vec3sub(l,c));b.push(l)}}
function createTubeMesh(a,b,c,d){var g,f,e,l,k,h,n,p,m,q,r,v,w,y,x,t,u,C,F,N,L,B,G,E,H,I;return $jscomp.asyncExecutePromiseGeneratorProgram(function(D){g=printUiSettings.cylinderQuality;circlePointData.length==g&&b==circlePointDataTubeRadius||initCircleVertices(g,b);f=a.length;if(c&&3>f)return console.log("createClosedTubeMesh: Closed tube too short."),D.return(null);if(!c&&2>f)return console.log("createClosedTubeMesh: Open tube too short."),D.return(null);e=new TriangleMesh;l=e.vertices;k=e.indices;
h=e.normals;n=new vec3(1,0,0);p=[];for(var z=m=0;z<f;z++)q=vec3sub(a[(z+1)%f],a[z]),c||z!=f-1||(q=vec3sub(a[z],a[z-1])),r=vec3length(q),1E-5>r||(q=vec3normalize(q),insertOrientedCirclePoints(l,h,a[z],q,n),p.push(new vec3(n.x,n.y,n.z)),m++);for(z=0;z<m-1;z++)for(var A=0;A<g;A++)k.push(z*g+A),k.push(z*g+(A+1)%g),k.push((z+1)%m*g+(A+1)%g),k.push(z*g+A),k.push((z+1)%m*g+(A+1)%g),k.push((z+1)%m*g+A);if(c)for(v=p[m-1],w=p[0],y=Math.atan2(vec3length(vec3cross(v,w)),vec3dot(v,w)),y=(y+2*Math.PI)%(2*Math.PI),
x=Math.round(y/(2*Math.PI)*g),z=0;z<g;z++)k.push((m-1)*g+z%g),k.push((m-1)*g+(z+1)%g),k.push(0*g+(z+1+x)%g),k.push((m-1)*g+z%g),k.push(0*g+(z+1+x)%g),k.push(0*g+(z+x)%g);else t=g,u=Math.ceil(g/2),N=a[0],L=vec3sub(a[0],a[1]),L=vec3normalize(L),B=p[0],G=a[f-1],E=vec3sub(a[f-1],a[f-2]),E=vec3normalize(E),H=p[m-1],I=function(a,c,d,e){var f=vec3cross(d,c);c=vec3mul(b,c);d=vec3mul(b,d);f=vec3mul(b,f);for(var g=l.length-t,h=1;h<=u;h++){F=.5*Math.PI*(1-h/u);for(var m=0;m<t;m++){C=-2*Math.PI*m/t;var n=new vec3(Math.cos(C)*
Math.sin(F),Math.sin(C)*Math.sin(F),Math.cos(F));n=new vec3(n.x*d.x+n.y*f.x+n.z*c.x+a.x,n.x*d.y+n.y*f.y+n.z*c.y+a.y,n.x*d.z+n.y*f.z+n.z*c.z+a.z);l.push(n);if(h==u)break}}for(a=0;a<u;a++)for(c=0;c<t;c++)e&&0==a?(k.push((2*t-c)%t+a*t),k.push((2*t-c-1)%t+a*t),k.push(g+c%t+(a+1)*t),k.push((2*t-c-1)%t+a*t),k.push(g+(c+1)%t+(a+1)*t),k.push(g+c%t+(a+1)*t)):a<u-1?(k.push(g+c%t+a*t),k.push(g+(c+1)%t+a*t),k.push(g+c%t+(a+1)*t),k.push(g+(c+1)%t+a*t),k.push(g+(c+1)%t+(a+1)*t),k.push(g+c%t+(a+1)*t)):(k.push(g+
c%t+a*t),k.push(g+(c+1)%t+a*t),k.push(g+0+(a+1)*t))},I(G,E,H,!1),I(N,L,B,!0);d(e);D.jumpToEnd()})};function generateIsoMeshFromScalarFunction(a,b,c,d,g,f,e){a=constructCartesianGridScalarField(a,b,c,d,g);useWebWorkers?(b=new Worker(getCindyBaseDir()+"CindyPrintWorker.js"),setMeshCreationWorker(b),b.onmessage=function(a){a=a.data;a.__proto__=TriangleMesh.prototype;setMeshCreationWorker(null);e(a)},b.postMessage({printUiSettings:printUiSettings,command:"generateIsoMeshFromScalarFunction",baseDir:getCindyBaseDir(),cartesianGrid:a,isoLevel:f})):generateIsoMeshFromGrid(a.gridPoints,a.gridValues,a.gridNormals,
f,function(a,b){a=trianglePointsToIndexedMesh(a,b,1E-6);printUiSettings.extrudeSurfaces&&(a=printUiSettings.smoothEdges?createOpenSurfaceShellMeshWithNormalsAndRoundEdges(a,printUiSettings.extrusionRadius):createOpenSurfaceShellMeshWithNormals(a,printUiSettings.extrusionRadius));e(a)})}function generateClosedIsoMeshFromScalarFunction(a,b,c,d,g){a=constructCartesianGridScalarField(a,b,c,d);return generateIsoMeshFromGrid(a.gridPoints,a.gridValues,a.gridNormals,g)}
function constructCartesianGridScalarField(a,b,c,d,g){for(var f=[],e=[],l=[],k=0;k<c;k++){for(var h=[],n=[],p=[],m=0;m<c;m++){for(var q=[],r=[],v=[],w=0;w<c;w++){var y=new vec3(a.x+w*b,a.y+m*b,a.z+k*b);q.push(y);r.push(d(y));v.push(g(y))}h.push(q);n.push(r);p.push(v)}f.push(h);e.push(n);l.push(p)}return{gridPoints:f,gridValues:e,gridNormals:l}}
function constructCartesianSnapGridScalarField(a,b){var c={gridValues:[],snapBackTo:[],snapBackToNormals:[],weights:[]};c.gridValues=deepCopy(a.gridValues);for(var d=0;d<a.gridPoints.length-1;d++)for(var g=0;g<a.gridPoints[0].length-1;g++)for(var f=0;f<a.gridPoints[0][0].length-1;f++)snapAtEdge(a,c,b,d,g,f,d+1,g,f),snapAtEdge(a,c,b,d,g,f,d,g+1,f),snapAtEdge(a,c,b,d,g,f,d,g,f+1);return c}
var deepCopy=function(a){var b=[];a.forEach(function(a){Array.isArray(a)?b.push(deepCopy(a)):"object"===typeof a?b.push(deepCopyObject(a)):b.push(a)});return b},deepCopyObject=function(a){var b={};a=$jscomp.makeIterator(Object.entries(a));for(var c=a.next();!c.done;c=a.next()){var d=$jscomp.makeIterator(c.value);c=d.next().value;d=d.next().value;Array.isArray(d)?b[c]=deepCopy(d):b[c]="object"===typeof d?deepCopyObject(d):d}return b};
function snapAtEdge(a,b,c,d,g,f,e,l,k){var h=printUiSettings.gamma,n=h,p=h;if(a.gridValues[d][g][f]<c&&a.gridValues[e][l][k]>c||a.gridValues[d][g][f]>c&&a.gridValues[e][l][k]<c)p=a.gridValues[e][l][k]-a.gridValues[d][g][f],1E-5<p||-1E-5>p?(n=(a.gridValues[e][l][k]-c)/p,p=(c-a.gridValues[d][g][f])/p):p=n=.5;p<h?snapToVertex(b,a.gridPoints,a.gridNormals,c,p,d,g,f,e,l,k):n<h&&snapToVertex(b,a.gridPoints,a.gridNormals,c,n,e,l,k,d,g,f)}
function snapToVertex(a,b,c,d,g,f,e,l,k,h,n){a.gridValues[f][e][l]!=d?(a.gridValues[f][e][l]=d,createArrayIfNecessary(a.snapBackTo,f,e),createArrayIfNecessary(a.snapBackToNormals,f,e),createArrayIfNecessary(a.weights,f,e),a.snapBackTo[f][e][l]=b[k][h][n],a.snapBackToNormals[f][e][l]=c[k][h][n],a.weights[f][e][l]=g):void 0!=a.weights[f]&&void 0!=a.weights[f][e]&&void 0!=a.weights[f][e][l]&&a.weights[f][e][l]>g&&(a.snapBackTo[f][e][l]=b[k][h][n],a.snapBackToNormals[f][e][l]=c[k][h][n],a.weights[f][e][l]=
g)}function createArrayIfNecessary(a,b,c){void 0==a[b]?(a[b]=[],a[b][c]=[]):void 0==a[b][c]&&(a[b][c]=[])}function GridCell(){this.v=[];this.f=[];this.n=[];for(var a=0;8>a;a++)this.v.push(new vec3(0,0,0)),this.f.push(0),this.n.push(new vec3(0,0,0))}function vertexInterpIso(a,b,c,d,g){if(1E-5>Math.abs(a-d))return b;if(1E-5>Math.abs(a-g))return c;if(1E-5>Math.abs(d-g))return b;a=(a-d)/(g-d);d=new vec3(0,0,0);d.x=b.x+a*(c.x-b.x);d.y=b.y+a*(c.y-b.y);d.z=b.z+a*(c.z-b.z);return d}
function normalInterpIso(a,b,c,d,g){a=vertexInterpIso(a,b,c,d,g);return vec3normalize(a)}
function generateIsoMeshFromGrid(a,b,c,d,g){var f,e,l,k,h,n,p,m,q,r,v;return $jscomp.asyncExecutePromiseGeneratorProgram(function(w){f=a.length;if(useWebWorkers&&(e=self.navigator.hardwareConcurrency||4,1<e))return generateIsoMeshFromGridParallel(a,b,c,d,e,g),w.return();printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC&&(k={gridPoints:a,gridValues:b,gridNormals:c},l=constructCartesianSnapGridScalarField(k,d));h=new GridCell;n=[];p=[];for(var y=0;y<f-1;y++)for(var x=0;x<f-1;x++)for(var t=
0;t<f-1;t++){for(var u=0;8>u;u++){m=new vec3(t,x,y);if(printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC){if(1==u||3==u||5==u||7==u)m.x+=1;if(2==u||3==u||6==u||7==u)m.y+=1;if(4==u||5==u||6==u||7==u)m.z+=1}else{if(1==u||2==u||5==u||6==u)m.x+=1;if(4==u||5==u||6==u||7==u)m.y+=1;if(2==u||3==u||6==u||7==u)m.z+=1}h.v[u]=a[m.z][m.y][m.x];h.n[u]=c[m.z][m.y][m.x];h.f[u]=printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC?l.gridValues[m.z][m.y][m.x]:b[m.z][m.y][m.x]}q=
void 0;q=printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC?polygonizeGridCellSnapMC(h,d,l,y,x,t):polygonizeGridCellMarchingCubes(h,d);r=q.trianglePoints;v=q.triangleNormals;n=n.concat(r);p=p.concat(v)}g(n,p);w.jumpToEnd()})}function MCWorkerJob(a,b,c){this.workerID=a;this.gridCells=b;this.isoLevel=c;this.command="generateIsoMeshFromScalarFunction_PARALLEL";this.printUiSettings=self.printUiSettings}
function MCWorkerJobSnapMC(a,b,c,d,g){this.workerID=a;this.gridCells=b;this.isoLevel=c;this.snapGrid=d;this.indices=g;this.command="generateIsoMeshFromScalarFunctionSnapMC_PARALLEL";this.printUiSettings=self.printUiSettings}
function generateIsoMeshFromGridParallel(a,b,c,d,g,f){function e(a){for(var b=a.data.trianglePoints,c=a.data.triangleNormals,d=0;d<b.length;d++)b[d].__proto__=vec3.prototype;for(d=0;d<c.length;d++)c[d].__proto__=vec3.prototype;k=k.concat(b);h=h.concat(c);C--;if(0==C){for(b=0;b<p.length;b++)p[b].terminate();f(k,h)}0<m.length&&(a=a.data.workerID,b=m.pop(),b.workerID=a,p[a].postMessage(b))}var l=a.length,k=[],h=[],n;printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC&&(n=constructCartesianSnapGridScalarField({gridPoints:a,
gridValues:b,gridNormals:c},d));for(var p=[],m=[],q=0;q<l-1;q++){for(var r=[],v=[],w=0;w<l-1;w++)for(var y=0;y<l-1;y++){for(var x=new GridCell,t=0;8>t;t++){var u=new vec3(y,w,q);if(printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC){if(1==t||3==t||5==t||7==t)u.x+=1;if(2==t||3==t||6==t||7==t)u.y+=1;if(4==t||5==t||6==t||7==t)u.z+=1}else{if(1==t||2==t||5==t||6==t)u.x+=1;if(4==t||5==t||6==t||7==t)u.y+=1;if(2==t||3==t||6==t||7==t)u.z+=1}x.v[t]=a[u.z][u.y][u.x];x.n[t]=c[u.z][u.y][u.x];
x.f[t]=printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC?n.gridValues[u.z][u.y][u.x]:b[u.z][u.y][u.x]}printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC&&v.push([q,w,y]);r.push(x)}printUiSettings.reconstructionAlgorithm==reconstructionAlgorithms.SNAPMC?m.push(new MCWorkerJobSnapMC(-1,r,d,n,v)):m.push(new MCWorkerJob(-1,r,d))}var C=m.length;for(a=0;a<g&&0<m.length;a++)b=m.pop(),b.workerID=a,c="",c=self.baseDir?self.baseDir:getCindyBaseDir(),c=new Worker(c+
"CindyPrintWorker.js"),c.onmessage=e,c.postMessage(b),p.push(c)};/*

 The marching cubes look-up table and C code that is the base for the following code
 was released under public domain by Cory Bloyd. 
 For the tables see: http://paulbourke.net/geometry/polygonise/	
*/
var edgeTable=[0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,
3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,
3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0],triTable=[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1],[9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1],[3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1],[3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1],[3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1],[9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1],[4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1],[9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1],[2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1],[8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1],[9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1],[4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1],[3,10,1,3,11,10,7,8,4,-1,
-1,-1,-1,-1,-1,-1],[1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1],[4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1],[4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1],[9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1],[1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1],[5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1],[2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1],[9,5,4,2,
3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1],[0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1],[2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1],[10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1],[4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1],[5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1],[5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1],[9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1],[0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1],[1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1],[10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1],[8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1],[2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1],[7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1],[9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1],[2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1],[11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1],[9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1],[5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1],[11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1],[11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[10,6,5,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1],[1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1],[9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1],[5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1],[2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1],[0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1],[5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,
-1],[6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1],[0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1],[3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1],[6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1],[5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1],[1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1],[10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1],[6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1],[1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1],[8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1],[7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1],[3,11,2,7,8,
4,10,6,5,-1,-1,-1,-1,-1,-1,-1],[5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1],[0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1],[9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1],[8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1],[5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1],[0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1],[6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1],[10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1],[10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1],[8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1],[1,4,9,1,2,4,2,6,4,-1,-1,
-1,-1,-1,-1,-1],[3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1],[0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1],[10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1],[0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1],[3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1],[6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1],[9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1],[8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1],[3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1],[6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,
-1,-1],[0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1],[10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1],[10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1],[1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1],[2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1],[7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1],[7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1],[2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1],[1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1],[11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1],[8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1],[0,9,1,11,6,7,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1],[7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1],[7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1],[10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1],[2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1],[6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1],[7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1],[7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1],[2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1],[1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1],[10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1],[10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1],[0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1],[7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1],[6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1],[8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1],[9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1],[6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,
-1,-1],[1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1],[4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1],[10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1],[8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1],[0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1],[1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1],[8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1],[10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1],[4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1],[10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1,-1],[5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1],[11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1],[9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1],[6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1],[7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1],[3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1],[7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1],[9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1],[3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1],[6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1],[9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1],[1,6,10,1,7,6,1,0,7,8,7,0,
9,5,4,-1],[4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,-1],[7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1],[6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1],[3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1],[0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1],[6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1],[0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1],[11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1],[6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1],[5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1],[9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1],[1,5,8,
1,8,0,5,6,8,3,8,2,6,2,8,-1],[1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1],[10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1],[0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1],[5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1],[10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1],[11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1],[9,
7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1],[7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1],[2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1],[8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1],[9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1],[9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1],[1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1],[9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1],[9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1],[5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1],[0,1,9,8,4,10,8,
10,11,10,4,5,-1,-1,-1,-1],[10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1],[2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1],[0,4,11,0,11,3,4,5,11,2,11,1,5,1,11,-1],[0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1],[9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1],[5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1],[3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1],[5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1],[8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1],[0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,
-1],[9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1],[0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1],[1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1,-1],[3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1],[4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1],[9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1],[11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1],[11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1],[2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1],[9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1],[3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1],[1,10,
2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1],[4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1],[4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1],[0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1],[3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1],[3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1],[0,2,11,8,0,11,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1],[3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1],[9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1],[1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]];
function polygonizeGridCellMarchingCubes(a,b){var c=0;a.f[0]<b&&(c|=1);a.f[1]<b&&(c|=2);a.f[2]<b&&(c|=4);a.f[3]<b&&(c|=8);a.f[4]<b&&(c|=16);a.f[5]<b&&(c|=32);a.f[6]<b&&(c|=64);a.f[7]<b&&(c|=128);if(0==edgeTable[c])return{trianglePoints:[],triangleNormals:[]};var d=[0,0,0,0,0,0,0,0,0,0,0,0],g=[0,0,0,0,0,0,0,0,0,0,0,0];edgeTable[c]&1&&(d[0]=vertexInterpIso(b,a.v[0],a.v[1],a.f[0],a.f[1]),g[0]=normalInterpIso(b,a.n[0],a.n[1],a.f[0],a.f[1]));edgeTable[c]&2&&(d[1]=vertexInterpIso(b,a.v[1],a.v[2],a.f[1],
a.f[2]),g[1]=normalInterpIso(b,a.n[1],a.n[2],a.f[1],a.f[2]));edgeTable[c]&4&&(d[2]=vertexInterpIso(b,a.v[2],a.v[3],a.f[2],a.f[3]),g[2]=normalInterpIso(b,a.n[2],a.n[3],a.f[2],a.f[3]));edgeTable[c]&8&&(d[3]=vertexInterpIso(b,a.v[3],a.v[0],a.f[3],a.f[0]),g[3]=normalInterpIso(b,a.n[3],a.n[0],a.f[3],a.f[0]));edgeTable[c]&16&&(d[4]=vertexInterpIso(b,a.v[4],a.v[5],a.f[4],a.f[5]),g[4]=normalInterpIso(b,a.n[4],a.n[5],a.f[4],a.f[5]));edgeTable[c]&32&&(d[5]=vertexInterpIso(b,a.v[5],a.v[6],a.f[5],a.f[6]),g[5]=
normalInterpIso(b,a.n[5],a.n[6],a.f[5],a.f[6]));edgeTable[c]&64&&(d[6]=vertexInterpIso(b,a.v[6],a.v[7],a.f[6],a.f[7]),g[6]=normalInterpIso(b,a.n[6],a.n[7],a.f[6],a.f[7]));edgeTable[c]&128&&(d[7]=vertexInterpIso(b,a.v[7],a.v[4],a.f[7],a.f[4]),g[7]=normalInterpIso(b,a.n[7],a.n[4],a.f[7],a.f[4]));edgeTable[c]&256&&(d[8]=vertexInterpIso(b,a.v[0],a.v[4],a.f[0],a.f[4]),g[8]=normalInterpIso(b,a.n[0],a.n[4],a.f[0],a.f[4]));edgeTable[c]&512&&(d[9]=vertexInterpIso(b,a.v[1],a.v[5],a.f[1],a.f[5]),g[9]=normalInterpIso(b,
a.n[1],a.n[5],a.f[1],a.f[5]));edgeTable[c]&1024&&(d[10]=vertexInterpIso(b,a.v[2],a.v[6],a.f[2],a.f[6]),g[10]=normalInterpIso(b,a.n[2],a.n[6],a.f[2],a.f[6]));edgeTable[c]&2048&&(d[11]=vertexInterpIso(b,a.v[3],a.v[7],a.f[3],a.f[7]),g[11]=normalInterpIso(b,a.n[3],a.n[7],a.f[3],a.f[7]));a=[];b=[];for(var f=0;-1!=triTable[c][f];f+=3)a.push(d[triTable[c][f]]),a.push(d[triTable[c][f+1]]),a.push(d[triTable[c][f+2]]),b.push(g[triTable[c][f]]),b.push(g[triTable[c][f+1]]),b.push(g[triTable[c][f+2]]);return{trianglePoints:a,
triangleNormals:b}};function polygonizeGridCellSnapMC(a,b,c,d,g,f){var e=!1;if(a.f[0]<b)for(var l=1;8>l;l++)a.f[l]>=b&&(e=!0);else for(l=1;8>l;l++)a.f[l]<b&&(e=!0);if(!e)return{trianglePoints:[],triangleNormals:[]};for(l=e=0;8>l;l++)a.f[l]>b?e+=positive[l]:a.f[l]==b&&(e+=equals[l]);l=[];for(var k=[],h,n,p=0;p<isoTable[e].length;p++)if(8>isoTable[e][p]){n=d;var m=g,q=f;h=isoTable[e][p];for(var r=0;3>r;r++){if(1==h%2)switch(r){case 0:q++;break;case 1:m++;break;case 2:n++}h=Math.floor(h/2)}void 0!=c.snapBackTo&&void 0!=
c.snapBackTo[n]&&void 0!=c.snapBackTo[n][m]&&void 0!=c.snapBackTo[n][m][q]?(h=snapBack(a.v[isoTable[e][p]],c.snapBackTo[n][m][q],c.weights[n][m][q]),l.push(h),n=snapBackNormal(a.n[isoTable[e][p]],c.snapBackToNormals[n][m][q],c.weights[n][m][q])):(h=a.v[isoTable[e][p]],l.push(h),n=a.n[isoTable[e][p]]);k.push(n)}else switch(isoTable[e][p]){case 8:h=vertexInterpIsoSnapMC(b,a.v[0],a.v[1],a.f[0],a.f[1]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[0],a.n[1],a.f[0],a.f[1]));break;case 9:h=vertexInterpIsoSnapMC(b,
a.v[0],a.v[2],a.f[0],a.f[2]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[0],a.n[2],a.f[0],a.f[2]));break;case 10:h=vertexInterpIsoSnapMC(b,a.v[1],a.v[3],a.f[1],a.f[3]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[1],a.n[3],a.f[1],a.f[3]));break;case 11:h=vertexInterpIsoSnapMC(b,a.v[2],a.v[3],a.f[2],a.f[3]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[2],a.n[3],a.f[2],a.f[3]));break;case 12:h=vertexInterpIsoSnapMC(b,a.v[0],a.v[4],a.f[0],a.f[4]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[0],a.n[4],
a.f[0],a.f[4]));break;case 13:h=vertexInterpIsoSnapMC(b,a.v[1],a.v[5],a.f[1],a.f[5]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[1],a.n[5],a.f[1],a.f[5]));break;case 14:h=vertexInterpIsoSnapMC(b,a.v[2],a.v[6],a.f[2],a.f[6]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[2],a.n[6],a.f[2],a.f[6]));break;case 15:h=vertexInterpIsoSnapMC(b,a.v[3],a.v[7],a.f[3],a.f[7]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[3],a.n[7],a.f[3],a.f[7]));break;case 16:h=vertexInterpIsoSnapMC(b,a.v[4],a.v[5],a.f[4],a.f[5]);
l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[4],a.n[5],a.f[4],a.f[5]));break;case 17:h=vertexInterpIsoSnapMC(b,a.v[4],a.v[6],a.f[4],a.f[6]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[4],a.n[6],a.f[4],a.f[6]));break;case 18:h=vertexInterpIsoSnapMC(b,a.v[5],a.v[7],a.f[5],a.f[7]);l.push(h);k.push(normalInterpIsoSnapMC(b,a.n[5],a.n[7],a.f[5],a.f[7]));break;case 19:h=vertexInterpIsoSnapMC(b,a.v[6],a.v[7],a.f[6],a.f[7]),l.push(h),k.push(normalInterpIsoSnapMC(b,a.n[6],a.n[7],a.f[6],a.f[7]))}return{trianglePoints:l,
triangleNormals:k}}function snapBack(a,b,c){var d=new vec3(0,0,0);d.x=a.x+c*(b.x-a.x);d.y=a.y+c*(b.y-a.y);d.z=a.z+c*(b.z-a.z);return d}function snapBackNormal(a,b,c){a=snapBack(a,b,c);return vec3normalize(a)}function vertexInterpIsoSnapMC(a,b,c,d,g){a=(a-d)/(g-d);d=new vec3(0,0,0);d.x=b.x+a*(c.x-b.x);d.y=b.y+a*(c.y-b.y);d.z=b.z+a*(c.z-b.z);return d}function normalInterpIsoSnapMC(a,b,c,d,g){a=vertexInterpIsoSnapMC(a,b,c,d,g);return vec3normalize(a)}
var positive=[2,6,18,54,162,486,1458,4374],equals=[1,3,9,27,81,243,729,2187],isoTable=[[],[],[8,12,9],[],[],[1,12,9],[8,10,13],[0,10,13],[10,12,9,13,12,10],[],[],[2,8,12],[],[1,0,2],[1,12,2],[2,13,8,2,10,13],[0,2,13,10,13,2],[13,12,2,10,13,2],[9,14,11],[0,14,11],[11,8,12,14,11,12],[11,1,14,1,9,14],[1,14,11,1,0,14],[1,14,11,1,12,14],[11,10,13,14,11,13,14,13,9,9,13,8],[0,14,13,10,13,11,11,13,14],[10,13,11,13,14,11,13,12,14],[],[],[3,8,12,3,12,9],[],[1,0,3],[1,12,3,9,3,12],[3,13,8],[0,3,13],[9,3,12,
13,12,3],[],[2,3,0],[2,3,12,8,12,3],[2,3,1],[1,0,2,1,2,3],[1,12,3,3,12,2],[2,3,13,2,13,8],[0,2,13,3,13,2],[3,12,2,13,12,3],[3,9,14],[0,14,3],[8,12,3,14,3,12],[9,14,1,1,14,3],[1,14,3,1,0,14],[1,12,3,3,12,14],[9,13,8,14,13,9,14,3,13],[0,14,13,3,13,14],[13,14,3,13,12,14],[10,11,15],[11,15,0,0,15,10],[11,12,9,15,12,11,15,10,12,10,8,12],[1,11,15],[1,0,15,0,11,15],[1,12,15,9,11,12,11,15,12],[11,13,8,15,13,11],[0,15,13,0,11,15],[9,11,12,11,15,12,13,12,15],[2,15,10],[2,15,0,0,15,10],[2,15,12,8,12,10,10,12,
15],[2,15,1],[1,0,15,0,2,15],[1,12,15,15,12,2],[2,15,13,2,13,8],[0,2,13,15,13,2],[15,12,2,13,12,15],[10,9,14,15,10,14],[0,14,15,0,15,10],[8,12,10,10,12,15,14,15,12],[9,14,1,1,14,15],[1,14,15,1,0,14],[1,12,15,15,12,14],[9,13,8,14,13,9,14,15,13],[0,14,13,15,13,14],[13,14,15,13,12,14],[],[],[4,9,8],[],[1,4,0],[1,4,9],[4,8,10,4,10,13],[0,10,4,13,4,10],[10,4,9,13,4,10],[],[2,0,4],[2,8,4],[],[1,4,2],[1,4,2],[2,10,4,2,4,8,10,13,4],[10,4,2,13,4,10],[10,4,2,13,4,10],[4,11,9,4,14,11],[0,4,11,14,11,4],[11,8,
4,14,11,4],[14,11,4,11,1,4,1,9,4],[1,4,11,11,4,14],[1,4,11,11,4,14],[11,13,14,11,10,13,14,13,4,9,4,8],[10,13,11,13,14,11,13,4,14],[10,13,11,13,14,11,13,4,14],[],[],[3,4,9,3,8,4],[],[1,4,3,0,3,4],[1,4,3,9,3,4],[3,13,4,3,4,8],[0,3,4,13,4,3],[9,3,4,13,4,3],[],[2,3,4,0,4,3],[2,3,4,8,4,3],[2,3,4,2,4,1,1,4,3],[1,4,3,3,4,2],[1,4,3,3,4,2],[2,3,4,2,4,8,13,4,3],[3,4,2,13,4,3],[3,4,2,13,4,3],[3,4,14,3,9,4],[0,4,3,14,3,4],[8,4,3,14,3,4],[9,4,1,1,4,3,14,3,4],[1,4,3,3,4,14],[1,4,3,3,4,14],[9,4,8,13,4,3,14,3,4],
[3,4,14,13,4,3],[3,4,14,13,4,3],[4,15,10,4,10,11,4,11,15],[0,4,10,11,4,0,15,4,11,15,10,4],[10,8,4,15,10,4,15,4,11,11,4,9],[1,11,4,15,1,4,15,4,11],[1,4,15,0,11,4,11,15,4],[1,4,15,9,11,4,11,15,4],[11,4,8,15,4,11,15,13,4],[0,11,4,11,15,4,13,4,15],[9,11,4,11,15,4,13,4,15],[2,4,10,15,4,2,15,10,4],[2,15,4,0,4,10,10,4,15],[2,15,4,8,4,10,10,4,15],[2,15,4,2,4,1,1,4,15],[1,4,15,15,4,2],[1,4,15,15,4,2],[2,15,4,2,4,8,13,4,15],[15,4,2,13,4,15],[15,4,2,13,4,15],[10,9,4,15,10,4,15,4,14],[0,4,10,10,4,15,14,15,4],
[8,4,10,10,4,15,14,15,4],[9,4,1,1,4,15,14,15,4],[1,4,15,15,4,14],[1,4,15,15,4,14],[9,4,8,13,4,15,14,15,4],[13,4,15,15,4,14],[13,4,15,15,4,14],[12,16,17],[0,16,17],[16,9,8,17,9,16],[16,17,1,1,17,12],[1,16,17,1,17,0],[1,16,17,1,17,9],[16,10,13,17,10,16,17,12,10,12,8,10],[0,10,17,13,16,10,16,17,10],[13,16,10,16,17,10,10,17,9],[17,2,16,2,12,16],[2,16,17,2,0,16],[2,16,17,2,8,16],[2,12,1,2,1,16,2,16,17],[1,16,2,16,17,2],[1,16,2,16,17,2],[2,12,8,2,10,17,17,10,16,10,13,16],[10,17,2,10,16,17,13,16,10],[10,
17,2,10,16,17,13,16,10],[16,14,11,17,14,16,16,11,12,12,11,9],[0,16,11,14,16,17,14,11,16],[14,16,17,14,11,16,11,8,16],[14,11,16,14,16,17,11,1,16,1,9,12],[1,16,11,11,16,14,16,17,14],[1,16,11,11,16,14,16,17,14],[11,13,14,11,10,13,14,16,17,14,13,16,9,12,8],[10,13,11,13,14,11,13,16,14,16,17,14],[10,13,11,13,14,11,13,16,14,16,17,14],[17,3,16,17,12,3,3,12,16],[3,16,17,3,17,0,3,0,16],[3,16,17,3,17,9,3,8,16],[3,17,12,3,16,17,3,1,16,3,12,1],[1,16,3,0,3,17,16,17,3],[1,16,3,9,3,17,16,17,3],[3,17,12,3,16,17,3,
13,16,3,12,8],[0,3,17,16,17,3,13,16,3],[9,3,17,16,17,3,13,16,3],[3,16,17,3,17,2,3,2,12,3,12,16],[2,3,17,0,16,3,16,17,3],[2,3,17,8,16,3,16,17,3],[2,3,17,2,12,1,1,16,3,16,17,3],[1,16,3,3,17,2,16,17,3],[1,16,3,3,17,2,16,17,3],[2,3,17,2,12,8,13,16,3,16,17,3],[3,17,2,16,17,3,13,16,3],[3,17,2,16,17,3,13,16,3],[3,12,16,3,16,17,3,17,14,3,9,12],[0,16,3,17,3,16,14,3,17],[8,16,3,17,3,16,14,3,17],[9,12,1,1,16,3,17,3,16,14,3,17],[1,16,3,3,17,14,3,16,17],[1,16,3,3,17,14,3,16,17],[9,12,8,13,16,3,17,3,16,14,3,17],
[3,17,14,3,16,17,13,16,3],[3,17,14,3,16,17,13,16,3],[17,12,11,17,11,15,17,15,16,16,15,10,16,10,12,12,10,11],[0,16,10,15,16,17,15,17,11,11,17,0,15,10,16],[10,8,16,15,10,16,15,16,17,15,17,11,11,17,9],[1,11,12,12,11,17,15,17,11,15,16,17,15,1,16],[1,16,15,0,11,17,11,15,17,16,17,15],[1,16,15,9,11,17,16,17,15,11,15,17],[11,12,8,11,17,12,15,17,11,15,16,17,15,13,16],[0,11,17,11,15,17,16,17,15,13,16,15],[9,11,17,16,17,15,13,16,15,11,15,17],[2,12,10,15,16,17,15,17,2,15,10,16,12,16,10],[2,15,17,0,16,10,10,16,
15,16,17,15],[2,15,17,8,16,10,16,17,15,10,16,15],[2,15,17,2,12,1,1,16,15,16,17,15],[1,16,15,15,17,2,16,17,15],[1,16,15,15,17,2,16,17,15],[2,15,17,2,12,8,13,16,15,16,17,15],[15,17,2,13,16,15,16,17,15],[15,17,2,13,16,15,16,17,15],[10,9,12,10,12,16,15,10,16,15,16,17,15,17,14],[0,16,10,10,16,15,16,17,15,14,15,17],[8,16,10,16,17,15,10,16,15,14,15,17],[9,12,1,1,16,15,14,15,17,16,17,15],[1,16,15,15,17,14,16,17,15],[1,16,15,15,17,14,16,17,15],[9,12,8,13,16,15,16,17,15,14,15,17],[13,16,15,16,17,15,15,17,14],
[13,16,15,16,17,15,15,17,14],[],[],[5,9,8,5,12,9],[],[1,5,0],[1,5,9,12,9,5],[5,8,10],[0,10,5],[12,9,5,10,5,9],[],[],[2,5,12,2,8,5],[],[1,5,2,0,2,5],[1,5,2,12,2,5],[2,10,5,2,5,8],[0,2,5,10,5,2],[12,2,5,10,5,2],[5,9,14,5,11,9,5,14,11],[0,5,11,14,5,0,14,11,5],[11,8,5,14,11,5,14,5,12],[1,9,5,11,1,5,14,11,5,14,5,9],[1,5,11,0,14,5,11,5,14],[1,5,11,12,14,5,11,5,14],[9,5,8,14,5,9,14,11,5,11,10,5],[0,14,5,10,5,11,11,5,14],[12,14,5,11,5,14,10,5,11],[],[],[3,5,9,3,8,5,9,5,12],[3,5,1],[0,3,5],[9,3,5,12,9,5],
[3,5,8],[0,3,5],[9,3,5,12,9,5],[],[2,3,5,2,5,0,0,5,3],[2,3,5,2,5,12,8,5,3],[2,3,5,2,5,1],[0,2,5,3,5,2],[12,2,5,3,5,2],[2,3,5,2,5,8],[0,2,5,3,5,2],[12,2,5,3,5,2],[3,5,14,3,9,5,14,5,9],[14,5,0,14,3,5,0,5,3],[14,5,12,14,3,5,8,5,3],[9,5,1,14,5,9,14,3,5],[0,14,5,3,5,14],[12,14,5,3,5,14],[9,5,8,14,5,9,14,3,5],[0,14,5,3,5,14],[12,14,5,3,5,14],[5,10,11,5,11,15],[15,5,11,11,5,0,0,5,10],[11,15,12,11,12,9,15,5,12,10,8,5],[1,11,5,15,5,11],[0,11,5,11,15,5],[9,11,12,12,11,15,12,15,5],[11,5,8,15,5,11],[0,11,5,11,
15,5],[9,11,12,12,11,15,12,15,5],[15,5,2,2,5,10],[2,15,5,2,5,0,0,5,10],[2,15,5,2,5,12,8,5,10],[2,15,5,2,5,1],[0,2,5,15,5,2],[12,2,5,15,5,2],[2,15,5,2,5,8],[0,2,5,15,5,2],[12,2,5,15,5,2],[15,5,14,14,5,9,10,9,5],[14,5,0,14,15,5,0,5,10],[14,5,12,14,15,5,8,5,10],[9,5,1,14,5,9,14,15,5],[0,14,5,15,5,14],[12,14,5,15,5,14],[9,5,8,14,5,9,14,15,5],[0,14,5,15,5,14],[12,14,5,15,5,14],[],[4,0,5],[4,9,5,8,5,9],[4,1,5],[1,4,0,1,5,4],[1,5,9,5,4,9],[4,10,5,4,8,10],[0,10,4,5,4,10],[5,4,9,10,5,9],[],[2,5,4,2,0,5],[2,
5,4,2,8,5],[2,4,1,2,5,4,2,1,5],[1,5,2,5,4,2],[1,5,2,5,4,2],[2,4,8,2,5,4,2,10,5],[5,4,2,10,5,2],[5,4,2,10,5,2],[4,14,5,4,5,9,11,9,5,14,11,5],[11,0,5,14,11,5,14,5,4],[11,8,5,14,11,5,14,5,4],[9,4,1,11,1,5,14,11,5,14,5,4],[1,5,11,11,5,14,5,4,14],[1,5,11,11,5,14,5,4,14],[9,4,8,11,10,5,14,11,5,14,5,4],[10,5,11,11,5,14,5,4,14],[10,5,11,11,5,14,5,4,14],[],[3,4,0,3,5,4,3,0,5],[3,4,9,3,5,4,3,8,5],[3,4,1,3,5,4],[0,3,4,5,4,3],[9,3,4,5,4,3],[3,4,8,3,5,4],[0,3,4,5,4,3],[9,3,4,5,4,3],[],[2,3,4,0,5,3,5,4,3],[2,3,
4,8,5,3,5,4,3],[2,3,4,2,4,1,5,4,3],[3,4,2,5,4,3],[3,4,2,5,4,3],[2,3,4,2,4,8,5,4,3],[3,4,2,5,4,3],[3,4,2,5,4,3],[3,5,14,3,9,5,5,9,4,14,5,4],[0,5,3,5,14,3,5,4,14],[8,5,3,5,14,3,5,4,14],[9,4,1,5,14,3,5,4,14],[5,14,3,5,4,14],[5,14,3,5,4,14],[9,4,8,5,14,3,5,4,14],[5,14,3,5,4,14],[5,14,3,5,4,14],[4,15,5,4,5,10,4,10,11,4,11,15],[10,0,5,11,4,0,15,4,11,15,5,4],[10,8,5,11,4,9,15,4,11,15,5,4],[11,4,1,15,4,11,15,5,4],[0,11,4,11,15,4,5,4,15],[9,11,4,11,15,4,5,4,15],[11,4,8,15,4,11,15,5,4],[0,11,4,11,15,4,5,4,
15],[9,11,4,11,15,4,5,4,15],[5,10,4,15,5,4,15,4,2,2,4,10],[2,15,4,0,5,10,5,4,15],[2,15,4,8,5,10,5,4,15],[2,15,4,2,4,1,5,4,15],[15,4,2,5,4,15],[15,4,2,5,4,15],[2,15,4,2,4,8,5,4,15],[15,4,2,5,4,15],[15,4,2,5,4,15],[15,5,14,14,5,4,5,9,4,10,9,5],[0,5,10,5,14,15,5,4,14],[8,5,10,5,14,15,5,4,14],[9,4,1,5,14,15,5,4,14],[5,14,15,5,4,14],[5,14,15,5,4,14],[9,4,8,5,14,15,5,4,14],[5,14,15,5,4,14],[5,14,15,5,4,14],[5,17,12],[0,5,17],[8,5,9,17,9,5],[12,1,17,1,5,17],[1,5,17,1,17,0],[1,5,9,5,17,9],[12,8,10,17,12,
10,17,10,5],[0,10,17,5,17,10],[10,5,17,10,17,9],[17,2,5,2,12,5],[2,5,17,2,0,5],[2,5,17,2,8,5],[2,5,17,2,1,5,2,12,1],[1,5,2,5,17,2],[1,5,2,5,17,2],[2,5,17,2,10,5,2,12,8],[5,17,2,10,5,2],[5,17,2,10,5,2],[17,14,5,14,11,5,11,9,5,12,5,9],[11,0,5,14,11,5,14,5,17],[11,8,5,14,11,5,14,5,17],[9,12,1,11,1,5,14,11,5,14,5,17],[1,5,11,11,5,14,5,17,14],[1,5,11,11,5,14,5,17,14],[9,12,8,11,10,5,14,11,5,14,5,17],[10,5,11,11,5,14,5,17,14],[10,5,11,11,5,14,5,17,14],[17,12,3,17,3,5,3,12,5],[3,5,17,3,17,0,3,0,5],[3,5,
17,3,17,9,3,8,5],[3,5,17,3,17,12,3,12,1],[0,3,17,5,17,3],[9,3,17,5,17,3],[3,5,17,3,17,12,3,12,8],[0,3,17,5,17,3],[9,3,17,5,17,3],[3,5,17,3,17,2,3,2,12,3,12,5],[2,3,17,0,5,3,5,17,3],[2,3,17,8,5,3,5,17,3],[2,3,17,2,12,1,5,17,3],[3,17,2,5,17,3],[3,17,2,5,17,3],[2,3,17,2,12,8,5,17,3],[3,17,2,5,17,3],[3,17,2,5,17,3],[3,5,14,3,9,5,5,9,12,14,5,17],[0,5,3,5,14,3,5,17,14],[8,5,3,5,14,3,5,17,14],[9,12,1,5,14,3,5,17,14],[5,14,3,5,17,14],[5,14,3,5,17,14],[9,12,8,5,14,3,5,17,14],[5,14,3,5,17,14],[5,14,3,5,17,
14],[17,12,11,17,11,15,17,15,5,12,10,11,12,5,10],[10,0,5,15,5,17,15,17,11,11,17,0],[10,8,5,15,5,17,15,17,11,11,17,9],[15,5,17,15,17,11,11,17,12,11,12,1],[0,11,17,11,15,17,5,17,15],[9,11,17,5,17,15,11,15,17],[15,5,17,15,17,11,11,17,12,11,12,8],[0,11,17,11,15,17,5,17,15],[9,11,17,5,17,15,11,15,17],[5,10,12,15,17,2,15,5,17,2,12,10],[2,15,17,0,5,10,5,17,15],[2,15,17,8,5,10,5,17,15],[2,15,17,2,12,1,5,17,15],[15,17,2,5,17,15],[15,17,2,5,17,15],[2,15,17,2,12,8,5,17,15],[15,17,2,5,17,15],[15,17,2,5,17,15],
[15,5,17,15,17,14,10,12,5,10,9,12],[0,5,10,5,17,15,17,14,15],[8,5,10,5,17,15,17,14,15],[9,12,1,5,17,15,17,14,15],[5,17,15,17,14,15],[5,17,15,17,14,15],[9,12,8,5,17,15,17,14,15],[5,17,15,17,14,15],[5,17,15,17,14,15],[13,18,16],[16,0,18,0,13,18],[16,12,9,18,16,9,18,9,13,13,9,8],[1,18,16],[1,18,0,0,18,16],[1,18,9,12,9,16,16,9,18],[16,8,10,18,16,10],[0,10,18,0,18,16],[12,9,16,16,9,18,10,18,9],[18,16,2,18,2,13,2,16,13],[2,13,18,2,18,16,2,16,0,2,0,13],[2,13,18,2,18,16,2,16,12,2,8,13],[2,18,16,2,1,18,2,
16,1],[1,18,2,0,2,16,16,2,18],[1,18,2,12,2,16,16,2,18],[2,18,16,2,10,18,2,16,8],[0,2,16,16,2,18,10,18,2],[12,2,16,16,2,18,10,18,2],[18,11,13,18,14,11,18,16,14,16,9,14,16,13,9,13,11,9],[0,13,11,13,18,11,14,11,18,14,18,16,14,16,0],[11,8,13,11,13,18,14,11,18,14,18,16,14,16,12],[1,9,16,14,18,16,14,11,18,11,1,18,14,16,9],[1,18,11,0,14,16,11,18,14,16,14,18],[1,18,11,12,14,16,16,14,18,11,18,14],[9,16,8,14,16,9,14,18,16,14,11,18,11,10,18],[0,14,16,10,18,11,16,14,18,11,18,14],[12,14,16,16,14,18,11,18,14,10,
18,11],[18,16,3,3,16,13],[3,0,13,3,16,0,3,18,16],[3,8,13,3,18,9,18,16,9,9,16,12],[3,18,16,3,16,1],[0,3,16,16,3,18],[9,3,18,9,18,16,12,9,16],[3,18,16,3,16,8],[0,3,16,16,3,18],[9,3,18,9,18,16,12,9,16],[3,2,13,3,18,2,2,18,16,2,16,13],[2,3,18,2,18,16,2,16,0,0,13,3],[2,3,18,2,18,16,2,16,12,8,13,3],[2,3,18,2,18,16,2,16,1],[0,2,16,16,2,18,3,18,2],[12,2,16,16,2,18,3,18,2],[2,3,18,2,18,16,2,16,8],[0,2,16,16,2,18,3,18,2],[12,2,16,16,2,18,3,18,2],[3,9,13,3,18,14,14,18,16,14,16,9,13,9,16],[14,16,0,14,18,16,14,
3,18,0,13,3],[14,16,12,14,18,16,14,3,18,8,13,3],[9,16,1,14,16,9,14,18,16,14,3,18],[0,14,16,3,18,14,16,14,18],[12,14,16,16,14,18,3,18,14],[9,16,8,14,16,9,14,18,16,14,3,18],[0,14,16,3,18,14,16,14,18],[12,14,16,16,14,18,3,18,14],[16,11,15,18,16,15,16,13,11,13,10,11],[15,16,11,15,18,16,11,16,0,0,13,10],[11,15,12,11,12,9,15,18,16,15,16,12,10,8,13],[1,11,16,15,18,16,15,16,11],[0,11,16,11,15,16,16,15,18],[9,11,12,12,11,15,12,15,16,16,15,18],[15,18,16,15,16,11,11,16,8],[0,11,16,11,15,16,16,15,18],[9,11,12,
12,11,15,12,15,16,16,15,18],[15,18,2,18,16,2,2,16,13,2,13,10],[2,15,18,2,18,16,2,16,0,0,13,10],[2,15,18,2,18,16,2,16,12,8,13,10],[2,15,18,2,18,16,2,16,1],[0,2,16,18,16,2,15,18,2],[12,2,16,18,16,2,15,18,2],[2,15,18,2,18,16,2,16,8],[0,2,16,18,16,2,15,18,2],[12,2,16,18,16,2,15,18,2],[15,18,14,14,18,16,14,16,9,13,9,16,10,9,13],[14,16,0,14,18,16,14,15,18,0,13,10],[14,16,12,14,18,16,14,15,18,8,13,10],[9,16,1,14,16,9,14,18,16,14,15,18],[0,14,16,15,18,14,16,14,18],[12,14,16,16,14,18,15,18,14],[9,16,8,14,
16,9,14,18,16,14,15,18],[0,14,16,15,18,14,16,14,18],[12,14,16,16,14,18,15,18,14],[4,13,18],[4,0,18,0,13,18],[4,9,18,8,13,9,13,18,9],[4,1,18],[1,18,0,0,18,4],[1,18,9,18,4,9],[4,10,18,4,8,10],[0,10,4,18,4,10],[18,4,9,10,18,9],[4,13,2,4,2,18,2,13,18],[2,18,4,2,13,18,2,0,13],[2,18,4,2,13,18,2,8,13],[2,4,1,2,18,4,2,1,18],[1,18,2,18,4,2],[1,18,2,18,4,2],[2,4,8,2,18,4,2,10,18],[18,4,2,10,18,2],[18,4,2,10,18,2],[4,13,9,4,14,18,14,11,18,11,9,13,11,13,18],[11,0,13,11,13,18,14,11,18,14,18,4],[11,8,13,11,13,
18,14,11,18,14,18,4],[9,4,1,11,1,18,14,11,18,14,18,4],[1,18,11,11,18,14,18,4,14],[1,18,11,11,18,14,18,4,14],[9,4,8,11,10,18,14,11,18,14,18,4],[10,18,11,18,4,14,11,18,14],[10,18,11,18,4,14,11,18,14],[4,13,3,4,3,18],[3,4,0,3,18,4,3,0,13],[3,4,9,3,18,4,3,8,13],[3,4,1,3,18,4],[0,3,4,18,4,3],[9,3,4,18,4,3],[3,4,8,3,18,4],[0,3,4,18,4,3],[9,3,4,18,4,3],[3,18,2,3,2,13,18,4,2,2,4,13],[2,3,18,2,18,4,0,13,3],[2,3,18,2,18,4,8,13,3],[2,3,18,2,18,4,2,4,1],[18,4,2,3,18,2],[18,4,2,3,18,2],[2,3,18,2,18,4,2,4,8],[18,
4,2,3,18,2],[18,4,2,3,18,2],[3,18,14,3,9,13,14,18,4,13,9,4],[0,13,3,18,4,14,18,14,3],[8,13,3,18,4,14,18,14,3],[9,4,1,18,4,14,18,14,3],[18,14,3,18,4,14],[18,14,3,18,4,14],[9,4,8,18,4,14,18,14,3],[18,14,3,18,4,14],[18,14,3,18,4,14],[4,13,10,4,10,11,4,11,15,4,15,18],[10,0,13,11,4,0,15,4,11,15,18,4],[10,8,13,11,4,9,15,4,11,15,18,4],[11,4,1,15,4,11,15,18,4],[0,11,4,11,15,4,18,4,15],[9,11,4,11,15,4,18,4,15],[11,4,8,15,4,11,15,18,4],[0,11,4,11,15,4,18,4,15],[9,11,4,11,15,4,18,4,15],[15,18,4,15,4,2,2,4,10,
13,10,4],[2,15,4,0,13,10,18,4,15],[2,15,4,8,13,10,18,4,15],[2,15,4,2,4,1,18,4,15],[15,4,2,18,4,15],[15,4,2,18,4,15],[2,15,4,2,4,8,18,4,15],[15,4,2,18,4,15],[15,4,2,18,4,15],[15,18,14,14,18,4,13,9,4,10,9,13],[0,13,10,18,4,14,18,14,15],[8,13,10,18,4,14,18,14,15],[9,4,1,18,4,14,18,14,15],[18,4,14,18,14,15],[18,4,14,18,14,15],[9,4,8,18,4,14,18,14,15],[18,4,14,18,14,15],[18,4,14,18,14,15],[13,17,12,18,17,13],[0,18,17,0,13,18],[8,13,9,13,18,9,17,9,18],[12,1,17,1,18,17],[1,18,17,1,17,0],[1,18,9,18,17,9],
[12,8,10,17,12,10,17,10,18],[0,10,17,18,17,10],[10,18,17,10,17,9],[17,2,18,2,13,18,2,12,13],[2,18,17,2,13,18,2,0,13],[2,18,17,2,13,18,2,8,13],[2,18,17,2,1,18,2,12,1],[1,18,2,18,17,2],[1,18,2,18,17,2],[2,18,17,2,10,18,2,12,8],[18,17,2,10,18,2],[18,17,2,10,18,2],[17,14,18,11,13,18,14,11,18,11,9,13,12,13,9],[11,0,13,11,13,18,14,11,18,14,18,17],[11,8,13,11,13,18,14,11,18,14,18,17],[9,12,1,11,1,18,14,11,18,14,18,17],[1,18,11,11,18,14,18,17,14],[1,18,11,11,18,14,18,17,14],[9,12,8,11,10,18,14,11,18,14,18,
17],[10,18,11,18,17,14,11,18,14],[10,18,11,18,17,14,11,18,14],[17,12,3,17,3,18,3,12,13],[3,18,17,3,17,0,3,0,13],[3,18,17,3,17,9,3,8,13],[3,18,17,3,17,12,3,12,1],[0,3,17,18,17,3],[9,3,17,18,17,3],[3,18,17,3,17,12,3,12,8],[0,3,17,18,17,3],[9,3,17,18,17,3],[3,18,17,3,17,2,3,2,12,3,12,13],[2,3,17,0,13,3,18,17,3],[2,3,17,8,13,3,18,17,3],[2,3,17,2,12,1,18,17,3],[3,17,2,18,17,3],[3,17,2,18,17,3],[2,3,17,2,12,8,18,17,3],[3,17,2,18,17,3],[3,17,2,18,17,3],[3,18,14,3,9,13,14,18,17,13,9,12],[0,13,3,18,17,14,
18,14,3],[8,13,3,18,17,14,18,14,3],[9,12,1,18,17,14,18,14,3],[18,14,3,18,17,14],[18,14,3,18,17,14],[9,12,8,18,17,14,18,14,3],[18,14,3,18,17,14],[18,14,3,18,17,14],[17,12,11,17,11,15,17,15,18,12,10,11,12,13,10],[10,0,13,15,18,17,15,17,11,11,17,0],[10,8,13,15,18,17,15,17,11,11,17,9],[15,18,17,15,17,11,11,17,12,11,12,1],[0,11,17,11,15,17,18,17,15],[9,11,17,11,15,17,18,17,15],[15,18,17,15,17,11,11,17,12,11,12,8],[0,11,17,11,15,17,18,17,15],[9,11,17,11,15,17,18,17,15],[15,17,2,15,18,17,2,12,10,13,10,12],
[2,15,17,0,13,10,18,17,15],[2,15,17,8,13,10,18,17,15],[2,15,17,2,12,1,18,17,15],[15,17,2,18,17,15],[15,17,2,18,17,15],[2,15,17,2,12,8,18,17,15],[15,17,2,18,17,15],[15,17,2,18,17,15],[15,18,17,15,17,14,10,12,13,10,9,12],[0,13,10,17,14,15,18,17,15],[8,13,10,17,14,15,18,17,15],[9,12,1,17,14,15,18,17,15],[17,14,15,18,17,15],[17,14,15,18,17,15],[9,12,8,17,14,15,18,17,15],[17,14,15,18,17,15],[17,14,15,18,17,15],[],[],[6,8,12,6,9,8],[],[],[1,12,6,1,6,9],[6,13,8,6,8,10,6,10,13],[0,10,6,13,0,6,13,6,10],[10,
6,9,13,6,10,13,12,6],[],[2,0,6],[2,8,6,12,6,8],[],[1,6,2,1,0,6],[1,6,2,1,12,6],[2,10,6,2,6,8,10,13,6,13,8,6],[13,0,6,13,6,10,10,6,2],[13,12,6,13,6,10,10,6,2],[6,11,9],[0,6,11],[12,6,8,11,8,6],[11,1,6,1,9,6],[1,6,11,1,0,6],[1,6,11,1,12,6],[11,10,6,10,13,6,13,8,6,9,6,8],[13,0,6,13,6,10,10,6,11],[13,12,6,13,6,10,10,6,11],[],[],[3,6,9,3,8,6,12,6,8],[],[1,6,3,1,0,6,0,3,6],[1,6,3,1,12,6,9,3,6],[3,13,6,3,6,8,13,8,6],[13,0,6,13,6,3,0,3,6],[13,12,6,13,6,3,9,3,6],[3,2,6],[0,6,3],[8,6,3,12,6,8],[2,6,1,1,6,3],
[1,6,3,1,0,6],[1,6,3,1,12,6],[2,6,8,8,6,13,13,6,3],[13,0,6,13,6,3],[13,12,6,13,6,3],[3,9,6],[0,6,3],[8,6,3,12,6,8],[9,6,1,1,6,3],[1,6,3,1,0,6],[1,6,3,1,12,6],[8,6,13,9,6,8,13,6,3],[13,0,6,13,6,3],[13,12,6,13,6,3],[6,15,10,6,10,11],[11,6,0,0,6,10,15,10,6],[11,6,9,10,8,12,10,12,15,15,12,6],[15,1,6,1,11,6],[1,6,15,1,0,6,0,11,6],[1,6,15,1,12,6,9,11,6],[15,13,6,13,8,6,11,6,8],[13,0,6,13,6,15,0,11,6],[13,12,6,13,6,15,9,11,6],[2,6,10,15,10,6],[0,6,10,10,6,15],[8,12,10,12,15,10,12,6,15],[2,6,1,1,6,15],[1,
6,15,1,0,6],[1,6,15,1,12,6],[2,6,8,8,6,13,13,6,15],[13,0,6,13,6,15],[13,12,6,13,6,15],[10,9,6,15,10,6],[0,6,10,10,6,15],[8,12,10,12,15,10,12,6,15],[9,6,1,1,6,15],[1,6,15,1,0,6],[1,6,15,1,12,6],[8,6,13,9,6,8,13,6,15],[13,0,6,13,6,15],[13,12,6,13,6,15],[],[4,6,0],[4,6,8,9,8,6],[],[1,4,6,1,6,0],[1,4,6,1,6,9],[4,6,13,4,8,6,10,6,8,13,6,10],[10,6,0,13,6,10,13,4,6],[10,6,9,13,6,10,13,4,6],[4,6,2],[2,0,4,2,4,6],[2,8,6,6,8,4],[2,4,1,2,1,6,1,4,6],[1,6,2,1,4,6],[1,6,2,1,4,6],[2,4,8,2,10,6,10,13,6,13,4,6],[10,
6,2,13,6,10,13,4,6],[10,6,2,13,6,10,13,4,6],[4,6,11,4,11,9],[0,4,11,6,11,4],[6,8,4,11,8,6],[9,4,1,1,4,6,11,1,6],[1,6,11,1,4,6],[1,6,11,1,4,6],[9,4,8,10,13,6,11,10,6,13,4,6],[10,6,11,13,6,10,13,4,6],[10,6,11,13,6,10,13,4,6],[],[3,0,4,3,4,6,3,6,0],[3,8,4,3,4,6,3,6,9],[],[1,4,3,0,3,6,6,3,4],[1,4,3,9,3,6,6,3,4],[3,13,6,3,6,8,6,4,8,13,4,6],[0,3,6,6,3,13,6,13,4],[9,3,6,6,3,13,6,13,4],[3,2,4,3,4,6],[0,4,3,6,3,4],[8,4,3,6,3,4],[2,4,1,1,4,3,6,3,4],[1,4,3,3,4,6],[1,4,3,3,4,6],[2,4,8,6,3,13,6,13,4],[3,13,6,
13,4,6],[3,13,6,13,4,6],[3,9,4,3,4,6],[0,4,3,6,3,4],[8,4,3,6,3,4],[9,4,1,1,4,3,6,3,4],[1,4,3,3,4,6],[1,4,3,3,4,6],[9,4,8,6,3,13,6,13,4],[3,13,6,13,4,6],[3,13,6,13,4,6],[4,6,15,4,11,6,4,10,11,4,15,10],[11,6,0,10,0,4,15,10,4,15,4,6],[11,6,9,10,8,4,15,10,4,15,4,6],[6,4,11,15,4,6,15,1,4,1,11,4],[1,4,15,0,11,6,6,15,4],[1,4,15,9,11,6,6,15,4],[15,13,6,13,4,6,6,4,8,11,6,8],[0,11,6,6,15,13,6,13,4],[9,11,6,6,15,13,6,13,4],[10,2,4,15,10,4,15,4,6],[0,4,10,10,4,15,6,15,4],[8,4,10,10,4,15,6,15,4],[2,4,1,1,4,15,
6,15,4],[1,4,15,15,4,6],[1,4,15,15,4,6],[2,4,8,6,15,13,6,13,4],[15,13,6,13,4,6],[15,13,6,13,4,6],[10,9,4,15,10,4,15,4,6],[0,4,10,10,4,15,6,15,4],[8,4,10,10,4,15,6,15,4],[9,4,1,1,4,15,6,15,4],[1,4,15,15,4,6],[1,4,15,15,4,6],[9,4,8,6,15,13,6,13,4],[15,13,6,13,4,6],[15,13,6,13,4,6],[6,12,16],[0,16,6],[9,8,6,16,6,8],[16,6,1,1,6,12],[1,16,6,1,6,0],[1,16,6,1,6,9],[16,6,13,13,6,10,10,6,8,12,8,6],[10,6,0,13,6,10,13,16,6],[10,6,9,13,6,10,13,16,6],[12,16,2,2,16,6],[2,16,6,2,0,16],[2,8,6,6,8,16],[2,1,6,2,12,
1,1,16,6],[1,6,2,1,16,6],[1,6,2,1,16,6],[2,10,6,2,12,8,10,13,6,13,16,6],[10,6,2,13,6,10,13,16,6],[10,6,2,13,6,10,13,16,6],[12,11,9,16,11,12,16,6,11],[0,16,11,6,11,16],[11,16,6,11,8,16],[9,12,1,1,16,6,11,1,6],[1,6,11,1,16,6],[1,6,11,1,16,6],[9,12,8,10,13,6,11,10,6,13,16,6],[10,6,11,13,6,10,13,16,6],[10,6,11,13,6,10,13,16,6],[16,3,12,16,6,3,3,6,12],[3,16,6,3,0,16,3,6,0],[3,16,6,3,8,16,3,6,9],[3,16,6,3,1,16,3,12,1,3,6,12],[1,16,3,0,3,6,6,3,16],[1,16,3,9,3,6,6,3,16],[3,13,6,3,6,8,6,12,8,13,16,6],[0,3,
6,6,3,13,6,13,16],[9,3,6,6,3,13,6,13,16],[3,16,6,3,12,16,3,2,12],[0,16,3,6,3,16],[8,16,3,6,3,16],[2,12,1,1,16,3,6,3,16],[1,16,3,3,16,6],[1,16,3,3,16,6],[2,12,8,6,3,13,6,13,16],[3,13,6,13,16,6],[3,13,6,13,16,6],[3,16,6,3,12,16,3,9,12],[0,16,3,6,3,16],[8,16,3,6,3,16],[9,12,1,1,16,3,6,3,16],[1,16,3,3,16,6],[1,16,3,3,16,6],[9,12,8,6,3,13,6,13,16],[3,13,6,13,16,6],[3,13,6,13,16,6],[16,10,12,16,15,10,16,6,15,12,10,11,12,11,6],[11,6,0,15,16,6,15,10,16,10,0,16],[11,6,9,15,16,6,15,10,16,10,8,16],[6,12,11,
15,1,16,15,16,6,1,11,12],[1,16,15,0,11,6,6,15,16],[1,16,15,9,11,6,6,15,16],[15,16,6,15,13,16,11,6,12,11,12,8],[0,11,6,6,15,16,16,15,13],[9,11,6,6,15,16,16,15,13],[15,16,6,15,10,16,10,12,16,10,2,12],[0,16,10,10,16,15,6,15,16],[8,16,10,6,15,16,10,16,15],[2,12,1,1,16,15,6,15,16],[1,16,15,15,16,6],[1,16,15,15,16,6],[2,12,8,6,15,16,16,15,13],[15,13,16,15,16,6],[15,13,16,15,16,6],[15,16,6,15,10,16,10,12,16,10,9,12],[0,16,10,10,16,15,6,15,16],[8,16,10,6,15,16,10,16,15],[9,12,1,1,16,15,6,15,16],[1,16,15,
15,16,6],[1,16,15,15,16,6],[9,12,8,6,15,16,16,15,13],[15,13,16,15,16,6],[15,13,16,15,16,6],[],[],[5,12,6,5,6,8,9,8,6],[],[1,5,6,1,6,0,0,6,5],[1,5,6,1,6,9,12,6,5],[5,6,10,5,8,6,10,6,8],[10,6,0,10,5,6,0,6,5],[10,6,9,10,5,6,12,6,5],[],[2,0,5,2,5,6,0,6,5],[2,8,5,2,5,6,12,6,5],[],[1,5,2,0,6,5,6,2,5],[1,5,2,6,2,5,12,6,5],[2,10,6,2,6,8,6,5,8,10,5,6],[0,6,5,6,2,10,6,10,5],[6,2,10,6,10,5,12,6,5],[5,6,11,5,9,6,5,11,9],[0,6,5,11,0,5,11,5,6],[11,8,5,11,5,6,12,6,5],[6,5,9,11,5,6,11,1,5,1,9,5],[1,5,11,0,6,5,6,
11,5],[1,5,11,6,11,5,12,6,5],[11,10,6,10,5,6,6,5,8,9,6,8],[0,6,5,6,11,10,6,10,5],[6,11,10,6,10,5,12,6,5],[],[3,0,5,3,5,6,3,6,0,0,6,5],[3,8,5,3,5,6,3,6,9,12,6,5],[3,5,6,3,6,1,1,6,5],[0,6,5,0,3,6,6,3,5],[9,3,6,6,3,5,12,6,5],[3,5,6,3,6,8,8,6,5],[0,6,5,0,3,6,6,3,5],[9,3,6,6,3,5,12,6,5],[3,2,5,3,5,6,2,6,5],[6,5,0,6,3,5,0,5,3],[6,5,12,6,3,5,8,5,3],[2,6,5,2,5,1,6,3,5],[0,6,5,3,5,6],[3,5,6,12,6,5],[2,6,8,8,6,5,6,3,5],[0,6,5,3,5,6],[3,5,6,12,6,5],[3,9,5,3,5,6,9,6,5],[6,5,0,6,3,5,0,5,3],[6,5,12,6,3,5,8,5,3],
[9,5,1,9,6,5,6,3,5],[0,6,5,3,5,6],[3,5,6,12,6,5],[8,6,5,9,6,8,6,3,5],[0,6,5,3,5,6],[3,5,6,12,6,5],[5,6,15,5,10,6,11,6,10],[10,0,5,0,6,5,11,6,0,15,5,6],[10,8,5,11,6,9,12,6,5,15,5,6],[11,6,1,1,6,5,15,5,6],[0,6,5,0,11,6,6,15,5],[9,11,6,6,15,5,12,6,5],[8,6,5,11,6,8,15,5,6],[0,6,5,0,11,6,6,15,5],[9,11,6,6,15,5,12,6,5],[10,2,5,2,6,5,15,5,6],[6,5,0,6,15,5,0,5,10],[6,5,12,6,15,5,8,5,10],[2,6,5,2,5,1,6,15,5],[0,6,5,15,5,6],[15,5,6,12,6,5],[2,6,8,8,6,5,6,15,5],[0,6,5,15,5,6],[15,5,6,12,6,5],[10,9,5,9,6,5,15,
5,6],[6,5,0,6,15,5,0,5,10],[6,5,12,6,15,5,8,5,10],[9,5,1,9,6,5,6,15,5],[0,6,5,15,5,6],[15,5,6,12,6,5],[8,6,5,9,6,8,6,15,5],[0,6,5,15,5,6],[15,5,6,12,6,5],[5,6,4],[0,5,6],[8,5,6,9,8,6],[4,1,6,1,5,6],[1,5,6,1,6,0],[1,5,6,1,6,9],[4,8,6,8,10,6,10,5,6],[10,6,0,10,5,6],[10,6,9,10,5,6],[4,5,2,2,5,6],[2,5,6,2,0,5],[2,5,6,2,8,5],[2,4,1,2,5,6,2,1,5],[1,5,2,5,6,2],[1,5,2,5,6,2],[2,4,8,2,10,6,10,5,6],[10,6,2,5,6,10],[10,6,2,5,6,10],[4,5,9,9,5,11,11,5,6],[11,0,5,11,5,6],[11,8,5,11,5,6],[9,4,1,11,1,5,11,5,6],[1,
5,11,5,6,11],[1,5,11,5,6,11],[9,4,8,10,5,6,11,10,6],[10,6,11,5,6,10],[10,6,11,5,6,10],[4,5,3,4,3,6,3,5,6],[3,5,6,3,6,0,3,0,5],[3,5,6,3,6,9,3,8,5],[3,4,1,3,6,4,3,5,6],[0,3,6,5,6,3],[9,3,6,5,6,3],[3,6,8,3,5,6,8,6,4],[0,3,6,5,6,3],[9,3,6,5,6,3],[3,2,4,3,4,5,3,5,6],[0,5,3,5,6,3],[8,5,3,5,6,3],[2,4,1,5,6,3],[5,6,3],[5,6,3],[2,4,8,5,6,3],[5,6,3],[5,6,3],[3,9,5,3,5,6,9,4,5],[0,5,3,5,6,3],[8,5,3,5,6,3],[9,4,1,5,6,3],[5,6,3],[5,6,3],[9,4,8,5,6,3],[5,6,3],[5,6,3],[4,5,10,4,11,6,4,10,11,15,5,6],[15,5,6,11,6,
0,10,0,5],[15,5,6,11,6,9,10,8,5],[15,5,6,11,6,4,11,4,1],[0,11,6,5,6,15],[9,11,6,5,6,15],[11,6,8,8,6,4,15,5,6],[0,11,6,5,6,15],[9,11,6,5,6,15],[15,5,6,10,4,5,10,2,4],[0,5,10,5,6,15],[8,5,10,5,6,15],[2,4,1,5,6,15],[5,6,15],[5,6,15],[2,4,8,5,6,15],[5,6,15],[5,6,15],[10,9,5,9,4,5,15,5,6],[0,5,10,5,6,15],[8,5,10,5,6,15],[9,4,1,5,6,15],[5,6,15],[5,6,15],[9,4,8,5,6,15],[5,6,15],[5,6,15],[5,6,12],[0,5,6],[8,5,6,9,8,6],[12,1,6,1,5,6],[1,5,6,1,6,0],[1,5,6,1,6,9],[8,10,6,12,8,6,10,5,6],[10,6,0,10,5,6],[10,6,
9,10,5,6],[12,5,2,2,5,6],[2,5,6,2,0,5],[2,5,6,2,8,5],[2,5,6,2,1,5,2,12,1],[1,5,2,5,6,2],[1,5,2,5,6,2],[2,10,6,2,12,8,10,5,6],[10,6,2,5,6,10],[10,6,2,5,6,10],[12,5,9,9,5,11,11,5,6],[11,0,5,11,5,6],[11,8,5,11,5,6],[9,12,1,11,1,5,11,5,6],[1,5,11,5,6,11],[1,5,11,5,6,11],[9,12,8,10,5,6,11,10,6],[10,6,11,5,6,10],[10,6,11,5,6,10],[12,3,6,12,5,3,3,5,6],[3,5,6,3,6,0,3,0,5],[3,5,6,3,6,9,3,8,5],[3,6,12,3,12,1,3,5,6],[0,3,6,5,6,3],[9,3,6,5,6,3],[3,6,8,3,5,6,8,6,12],[0,3,6,5,6,3],[9,3,6,5,6,3],[3,12,5,3,2,12,
3,5,6],[0,5,3,5,6,3],[8,5,3,5,6,3],[2,12,1,5,6,3],[5,6,3],[5,6,3],[2,12,8,5,6,3],[5,6,3],[5,6,3],[3,9,5,3,5,6,9,12,5],[0,5,3,5,6,3],[8,5,3,5,6,3],[9,12,1,5,6,3],[5,6,3],[5,6,3],[9,12,8,5,6,3],[5,6,3],[5,6,3],[12,11,6,12,10,11,12,5,10,15,5,6],[15,5,6,11,6,0,10,0,5],[15,5,6,11,6,9,10,8,5],[15,5,6,11,12,1,11,6,12],[0,11,6,5,6,15],[9,11,6,5,6,15],[11,6,12,11,12,8,15,5,6],[0,11,6,5,6,15],[9,11,6,5,6,15],[15,5,6,10,2,12,10,12,5],[0,5,10,5,6,15],[8,5,10,5,6,15],[2,12,1,5,6,15],[5,6,15],[5,6,15],[2,12,8,
5,6,15],[5,6,15],[5,6,15],[10,12,5,10,9,12,15,5,6],[0,5,10,5,6,15],[8,5,10,5,6,15],[9,12,1,5,6,15],[5,6,15],[5,6,15],[9,12,8,5,6,15],[5,6,15],[5,6,15],[6,13,18,6,16,13],[16,0,6,0,13,6,18,6,13],[16,12,6,9,8,13,9,13,18,9,18,6],[18,6,1,1,6,16],[1,18,6,1,6,0,0,6,16],[1,18,6,1,6,9,12,6,16],[18,6,10,10,6,8,16,8,6],[10,6,0,10,18,6,0,6,16],[10,6,9,10,18,6,12,6,16],[18,2,13,18,6,2,2,6,16,13,2,16],[2,18,6,2,13,18,2,0,13,0,6,16],[2,18,6,2,13,18,2,8,13,12,6,16],[2,18,6,2,1,18,2,16,1,2,6,16],[1,18,2,0,6,16,6,
2,18],[1,18,2,6,2,18,12,6,16],[2,10,6,2,6,8,6,16,8,10,18,6],[0,6,16,6,2,10,6,10,18],[6,2,10,6,10,18,12,6,16],[18,11,13,18,6,11,13,11,9,16,13,9,16,9,6],[0,6,16,11,18,6,11,13,18,11,0,13],[11,18,6,11,13,18,11,8,13,12,6,16],[6,16,9,11,1,18,11,18,6,1,9,16],[1,18,11,0,6,16,6,11,18],[1,18,11,6,11,18,12,6,16],[11,18,6,11,10,18,9,6,16,9,16,8],[0,6,16,6,11,18,18,11,10],[6,11,18,12,6,16,18,11,10],[18,6,3,3,6,13,16,13,6],[3,18,6,3,6,0,3,0,13,0,6,16],[3,18,6,3,6,9,3,8,13,12,6,16],[3,18,6,3,6,1,1,6,16],[0,6,16,
0,3,6,6,3,18],[9,3,6,6,3,18,12,6,16],[3,18,6,3,6,8,8,6,16],[0,6,16,0,3,6,6,3,18],[9,3,6,6,3,18,12,6,16],[3,18,6,3,2,13,13,2,16,2,6,16],[6,16,0,6,3,18,0,13,3],[6,16,12,6,3,18,8,13,3],[2,6,16,2,16,1,6,3,18],[0,6,16,3,18,6],[3,18,6,12,6,16],[2,6,8,8,6,16,6,3,18],[0,6,16,3,18,6],[3,18,6,12,6,16],[3,18,6,3,9,13,13,9,16,9,6,16],[6,16,0,6,3,18,0,13,3],[6,16,12,6,3,18,8,13,3],[9,16,1,9,6,16,6,3,18],[0,6,16,3,18,6],[3,18,6,12,6,16],[9,16,8,9,6,16,6,3,18],[0,6,16,3,18,6],[3,18,6,12,6,16],[18,6,15,11,13,10,
11,16,13,11,6,16],[10,0,13,0,6,16,11,6,0,15,18,6],[10,8,13,11,6,9,12,6,16,15,18,6],[11,6,1,1,6,16,15,18,6],[0,6,16,0,11,6,6,15,18],[9,11,6,6,15,18,12,6,16],[8,6,16,11,6,8,15,18,6],[0,6,16,0,11,6,6,15,18],[9,11,6,6,15,18,12,6,16],[10,2,13,13,2,16,2,6,16,15,18,6],[6,16,0,6,15,18,0,13,10],[6,16,12,6,15,18,8,13,10],[2,6,16,2,16,1,6,15,18],[0,6,16,15,18,6],[15,18,6,12,6,16],[2,6,8,8,6,16,6,15,18],[0,6,16,15,18,6],[15,18,6,12,6,16],[10,9,13,13,9,16,9,6,16,15,18,6],[6,16,0,6,15,18,0,13,10],[6,16,12,6,15,
18,8,13,10],[9,16,1,9,6,16,6,15,18],[0,6,16,15,18,6],[15,18,6,12,6,16],[9,16,8,9,6,16,6,15,18],[0,6,16,15,18,6],[15,18,6,12,6,16],[4,13,6,18,6,13],[0,13,6,13,18,6],[9,8,13,9,13,18,9,18,6],[4,1,6,1,18,6],[1,18,6,1,6,0],[1,18,6,1,6,9],[4,8,6,8,10,6,10,18,6],[10,6,0,10,18,6],[10,6,9,10,18,6],[4,13,2,13,18,2,2,18,6],[2,18,6,2,13,18,2,0,13],[2,18,6,2,13,18,2,8,13],[2,4,1,2,18,6,2,1,18],[1,18,2,18,6,2],[1,18,2,18,6,2],[2,4,8,2,10,6,10,18,6],[10,6,2,18,6,10],[10,6,2,18,6,10],[4,13,9,9,13,11,11,18,6,13,18,
11],[11,0,13,11,13,18,11,18,6],[11,8,13,11,13,18,11,18,6],[9,4,1,11,1,18,11,18,6],[1,18,11,18,6,11],[1,18,11,18,6,11],[9,4,8,11,10,18,11,18,6],[10,18,11,18,6,11],[10,18,11,18,6,11],[4,3,6,4,13,3,3,18,6],[3,18,6,3,6,0,3,0,13],[3,18,6,3,6,9,3,8,13],[3,4,1,3,6,4,3,18,6],[0,3,6,18,6,3],[9,3,6,18,6,3],[3,6,8,3,18,6,8,6,4],[0,3,6,18,6,3],[9,3,6,18,6,3],[3,2,13,3,18,6,13,2,4],[0,13,3,18,6,3],[8,13,3,18,6,3],[2,4,1,18,6,3],[18,6,3],[18,6,3],[2,4,8,18,6,3],[18,6,3],[18,6,3],[3,9,13,3,18,6,9,4,13],[0,13,3,
18,6,3],[8,13,3,18,6,3],[9,4,1,18,6,3],[18,6,3],[18,6,3],[9,4,8,18,6,3],[18,6,3],[18,6,3],[4,11,6,4,10,11,4,13,10,15,18,6],[15,18,6,11,6,0,10,0,13],[15,18,6,11,6,9,10,8,13],[15,18,6,11,6,4,11,4,1],[0,11,6,18,6,15],[9,11,6,18,6,15],[11,6,8,8,6,4,15,18,6],[0,11,6,18,6,15],[9,11,6,18,6,15],[15,18,6,10,4,13,10,2,4],[0,13,10,18,6,15],[8,13,10,18,6,15],[2,4,1,18,6,15],[18,6,15],[18,6,15],[2,4,8,18,6,15],[18,6,15],[18,6,15],[10,9,13,9,4,13,15,18,6],[0,13,10,18,6,15],[8,13,10,18,6,15],[9,4,1,18,6,15],[18,
6,15],[18,6,15],[9,4,8,18,6,15],[18,6,15],[18,6,15],[13,6,12,18,6,13],[0,13,6,13,18,6],[9,8,13,9,13,18,9,18,6],[12,1,6,1,18,6],[1,18,6,1,6,0],[1,18,6,1,6,9],[8,10,6,12,8,6,10,18,6],[10,6,0,10,18,6],[10,6,9,10,18,6],[12,13,2,13,18,2,2,18,6],[2,18,6,2,13,18,2,0,13],[2,18,6,2,13,18,2,8,13],[2,18,6,2,1,18,2,12,1],[1,18,2,18,6,2],[1,18,2,18,6,2],[2,10,6,2,12,8,10,18,6],[10,6,2,18,6,10],[10,6,2,18,6,10],[12,13,9,13,18,11,9,13,11,11,18,6],[11,0,13,11,13,18,11,18,6],[11,8,13,11,13,18,11,18,6],[9,12,1,11,
1,18,11,18,6],[1,18,11,18,6,11],[1,18,11,18,6,11],[9,12,8,11,10,18,11,18,6],[10,18,11,18,6,11],[10,18,11,18,6,11],[12,3,6,12,13,3,3,18,6],[3,18,6,3,6,0,3,0,13],[3,18,6,3,6,9,3,8,13],[3,6,12,3,12,1,3,18,6],[0,3,6,18,6,3],[9,3,6,18,6,3],[3,6,8,3,18,6,8,6,12],[0,3,6,18,6,3],[9,3,6,18,6,3],[3,12,13,3,2,12,3,18,6],[0,13,3,18,6,3],[8,13,3,18,6,3],[2,12,1,18,6,3],[18,6,3],[18,6,3],[2,12,8,18,6,3],[18,6,3],[18,6,3],[3,9,13,3,18,6,9,12,13],[0,13,3,18,6,3],[8,13,3,18,6,3],[9,12,1,18,6,3],[18,6,3],[18,6,3],
[9,12,8,18,6,3],[18,6,3],[18,6,3],[12,11,6,12,10,11,12,13,10,15,18,6],[15,18,6,11,6,0,10,0,13],[15,18,6,11,6,9,10,8,13],[15,18,6,11,12,1,11,6,12],[0,11,6,18,6,15],[9,11,6,18,6,15],[11,6,12,11,12,8,15,18,6],[0,11,6,18,6,15],[9,11,6,18,6,15],[15,18,6,10,2,12,10,12,13],[0,13,10,18,6,15],[8,13,10,18,6,15],[2,12,1,18,6,15],[18,6,15],[18,6,15],[2,12,8,18,6,15],[18,6,15],[18,6,15],[10,12,13,10,9,12,15,18,6],[0,13,10,18,6,15],[8,13,10,18,6,15],[9,12,1,18,6,15],[18,6,15],[18,6,15],[9,12,8,18,6,15],[18,6,15],
[18,6,15],[14,17,19],[17,19,0,0,19,14],[14,9,8,19,14,8,19,8,17,17,8,12],[19,1,17,19,14,1,1,14,17],[1,19,14,1,17,19,1,0,17,1,14,0],[1,19,14,1,17,19,1,12,17,1,14,9],[19,14,10,19,10,13,19,13,17,17,13,8,17,8,14,14,8,10],[0,10,14,14,10,19,13,19,10,13,17,19,13,0,17],[10,14,9,10,19,14,13,19,10,13,17,19,13,12,17],[2,17,19],[2,0,19,0,17,19],[2,8,19,12,17,8,17,19,8],[2,17,1,2,1,19,1,17,19],[1,19,2,1,17,19,1,0,17],[1,19,2,1,17,19,1,12,17],[2,17,8,2,10,19,10,13,19,13,8,17,13,17,19],[13,0,17,13,17,19,13,19,10,
10,19,2],[13,12,17,13,17,19,13,19,10,10,19,2],[17,11,9,19,11,17],[0,19,11,0,17,19],[12,17,8,17,19,8,11,8,19],[11,1,19,1,17,19,1,9,17],[1,19,11,1,17,19,1,0,17],[1,19,11,1,17,19,1,12,17],[11,10,19,13,17,19,10,13,19,13,8,17,9,17,8],[13,0,17,13,17,19,13,19,10,10,19,11],[13,12,17,13,17,19,13,19,10,10,19,11],[19,3,17,3,14,17],[3,14,0,3,0,17,3,17,19],[3,8,19,3,14,9,12,17,8,19,8,17],[3,14,1,3,1,19,1,17,19,1,14,17],[1,19,3,1,17,19,1,0,17,0,3,14],[1,19,3,1,17,19,1,12,17,9,3,14],[3,14,8,3,13,19,13,17,19,13,
8,17,14,17,8],[13,0,17,13,17,19,13,19,3,0,3,14],[13,12,17,13,17,19,13,19,3,9,3,14],[3,17,19,3,2,17],[0,17,3,17,19,3],[8,19,3,8,17,19,12,17,8],[2,17,1,17,19,1,1,19,3],[1,19,3,1,17,19,1,0,17],[1,19,3,1,17,19,1,12,17],[2,17,8,8,17,13,17,19,13,13,19,3],[13,0,17,13,17,19,13,19,3],[13,12,17,13,17,19,13,19,3],[3,17,19,3,9,17],[0,17,3,17,19,3],[8,19,3,8,17,19,12,17,8],[9,17,1,17,19,1,1,19,3],[1,19,3,1,17,19,1,0,17],[1,19,3,1,17,19,1,12,17],[8,17,13,9,17,8,17,19,13,13,19,3],[13,0,17,13,17,19,13,19,3],[13,
12,17,13,17,19,13,19,3],[14,10,11,17,10,14,17,15,10,19,15,17],[11,14,0,0,17,10,15,10,17,15,17,19],[11,14,9,10,8,12,10,12,15,15,12,17,15,17,19],[15,1,19,19,1,17,1,14,17,1,11,14],[1,19,15,1,17,19,1,0,17,0,11,14],[1,19,15,1,17,19,1,12,17,9,11,14],[15,13,19,13,17,19,13,8,17,14,17,8,11,14,8],[13,0,17,13,17,19,13,19,15,0,11,14],[13,12,17,13,17,19,13,19,15,9,11,14],[2,17,10,15,17,19,15,10,17],[0,17,10,10,17,15,17,19,15],[8,12,10,12,15,10,12,17,15,17,19,15],[2,17,1,1,17,19,1,19,15],[1,19,15,1,17,19,1,0,17],
[1,19,15,1,17,19,1,12,17],[2,17,8,8,17,13,17,19,13,13,19,15],[13,0,17,13,17,19,13,19,15],[13,12,17,13,17,19,13,19,15],[15,17,19,15,10,17,10,9,17],[0,17,10,10,17,15,17,19,15],[8,12,10,12,15,10,12,17,15,17,19,15],[9,17,1,1,17,19,1,19,15],[1,19,15,1,17,19,1,0,17],[1,19,15,1,17,19,1,12,17],[8,17,13,9,17,8,17,19,13,13,19,15],[13,0,17,13,17,19,13,19,15],[13,12,17,13,17,19,13,19,15],[4,19,14],[4,19,0,0,19,14],[4,19,8,9,8,14,14,8,19],[4,1,14,4,19,1,1,19,14],[1,4,19,1,19,14,1,14,0],[1,4,19,1,19,14,1,14,9],
[4,8,14,4,19,13,13,19,10,10,14,8,10,19,14],[10,14,0,10,19,14,13,19,10,13,4,19],[10,14,9,10,19,14,13,19,10,13,4,19],[4,19,2],[2,0,19,0,4,19],[2,8,19,19,8,4],[2,4,1,2,1,19,1,4,19],[1,19,2,1,4,19],[1,19,2,1,4,19],[2,4,8,2,10,19,10,13,19,13,4,19],[10,19,2,13,19,10,13,4,19],[10,19,2,13,19,10,13,4,19],[4,19,11,4,11,9],[0,4,11,19,11,4],[19,8,4,11,8,19],[9,4,1,1,4,19,11,1,19],[1,19,11,1,4,19],[1,19,11,1,4,19],[9,4,8,10,13,19,11,10,19,13,4,19],[10,19,11,13,19,10,13,4,19],[10,19,11,13,19,10,13,4,19],[4,3,14,
4,19,3],[3,0,4,3,4,19,3,14,0],[3,8,4,3,4,19,3,14,9],[3,1,19,3,14,1,19,1,4,1,14,4],[1,19,3,1,4,19,0,3,14],[1,19,3,1,4,19,9,3,14],[3,13,19,3,14,8,13,4,19,14,4,8],[0,3,14,19,13,4,19,3,13],[9,3,14,19,13,4,19,3,13],[3,2,4,3,4,19],[0,4,3,19,3,4],[8,4,3,19,3,4],[2,4,1,1,4,19,1,19,3],[1,19,3,1,4,19],[1,19,3,1,4,19],[2,4,8,19,3,13,19,13,4],[3,13,19,13,4,19],[3,13,19,13,4,19],[3,9,4,3,4,19],[0,4,3,19,3,4],[8,4,3,19,3,4],[9,4,1,1,4,19,1,19,3],[1,19,3,1,4,19],[1,19,3,1,4,19],[9,4,8,19,3,13,19,13,4],[3,13,19,
13,4,19],[3,13,19,13,4,19],[4,11,14,4,10,11,4,15,10,4,19,15],[11,14,0,10,0,4,15,10,4,15,4,19],[11,14,9,10,8,4,15,10,4,15,4,19],[15,4,19,15,1,4,1,11,4,14,4,11],[1,4,15,0,11,14,19,15,4],[1,4,15,9,11,14,19,15,4],[15,13,19,13,4,19,14,4,8,11,14,8],[0,11,14,19,13,4,19,15,13],[9,11,14,19,13,4,19,15,13],[10,2,4,15,10,4,15,4,19],[0,4,10,10,4,15,19,15,4],[8,4,10,10,4,15,19,15,4],[2,4,1,1,4,15,19,15,4],[1,4,15,15,4,19],[1,4,15,15,4,19],[2,4,8,19,13,4,19,15,13],[15,13,19,13,4,19],[15,13,19,13,4,19],[10,9,4,15,
10,4,15,4,19],[0,4,10,10,4,15,19,15,4],[8,4,10,10,4,15,19,15,4],[9,4,1,1,4,15,19,15,4],[1,4,15,15,4,19],[1,4,15,15,4,19],[9,4,8,19,13,4,19,15,13],[15,13,19,13,4,19],[15,13,19,13,4,19],[14,12,16,19,14,16],[0,16,19,0,19,14],[9,8,14,14,8,19,16,19,8],[16,19,1,1,19,14,1,14,12],[1,16,19,1,19,14,1,14,0],[1,16,19,1,19,14,1,14,9],[16,19,13,10,19,14,13,19,10,10,14,8,12,8,14],[10,14,0,10,19,14,13,19,10,13,16,19],[10,14,9,10,19,14,13,19,10,13,16,19],[12,16,2,2,16,19],[2,16,19,2,0,16],[2,8,19,19,8,16],[2,1,19,
2,12,1,1,16,19],[1,19,2,1,16,19],[1,19,2,1,16,19],[2,10,19,2,12,8,10,13,19,13,16,19],[10,19,2,13,19,10,13,16,19],[10,19,2,13,19,10,13,16,19],[12,11,9,16,11,12,16,19,11],[0,16,11,19,11,16],[11,16,19,11,8,16],[9,12,1,1,16,19,11,1,19],[1,19,11,1,16,19],[1,19,11,1,16,19],[9,12,8,10,13,19,11,10,19,13,16,19],[10,19,11,13,19,10,13,16,19],[10,19,11,13,19,10,13,16,19],[16,3,12,16,19,3,3,14,12],[3,16,19,3,0,16,3,14,0],[3,16,19,3,8,16,3,14,9],[3,16,19,3,1,16,3,12,1,3,14,12],[1,16,3,0,3,14,19,3,16],[1,16,3,9,
3,14,19,3,16],[3,13,19,3,14,8,13,16,19,14,12,8],[0,3,14,19,13,16,19,3,13],[9,3,14,19,13,16,19,3,13],[3,16,19,3,12,16,3,2,12],[0,16,3,19,3,16],[8,16,3,19,3,16],[2,12,1,1,16,3,19,3,16],[1,16,3,3,16,19],[1,16,3,3,16,19],[2,12,8,19,3,13,19,13,16],[3,13,19,13,16,19],[3,13,19,13,16,19],[3,16,19,3,12,16,3,9,12],[0,16,3,19,3,16],[8,16,3,19,3,16],[9,12,1,1,16,3,19,3,16],[1,16,3,3,16,19],[1,16,3,3,16,19],[9,12,8,19,3,13,19,13,16],[3,13,19,13,16,19],[3,13,19,13,16,19],[16,10,12,16,15,10,16,19,15,12,10,11,12,
11,14],[11,14,0,15,16,19,15,10,16,10,0,16],[11,14,9,15,16,19,15,10,16,10,8,16],[15,1,16,15,16,19,1,11,12,14,12,11],[1,16,15,0,11,14,19,15,16],[1,16,15,9,11,14,19,15,16],[15,16,19,15,13,16,11,14,12,11,12,8],[0,11,14,16,15,13,19,15,16],[9,11,14,16,15,13,19,15,16],[15,16,19,15,10,16,10,12,16,10,2,12],[0,16,10,10,16,15,19,15,16],[8,16,10,10,16,15,19,15,16],[2,12,1,1,16,15,19,15,16],[1,16,15,15,16,19],[1,16,15,15,16,19],[2,12,8,16,15,13,19,15,16],[15,13,16,15,16,19],[15,13,16,15,16,19],[15,16,19,15,10,
16,10,12,16,10,9,12],[0,16,10,10,16,15,19,15,16],[8,16,10,10,16,15,19,15,16],[9,12,1,1,16,15,19,15,16],[1,16,15,15,16,19],[1,16,15,15,16,19],[9,12,8,16,15,13,19,15,16],[15,13,16,15,16,19],[15,13,16,15,16,19],[19,14,5,5,14,17],[5,19,14,5,14,0,5,0,17],[5,19,8,5,12,17,9,8,14,19,14,8],[5,1,17,5,19,1,1,19,14,1,14,17],[1,5,19,1,19,14,1,14,0,0,17,5],[1,5,19,1,19,14,1,14,9,12,17,5],[5,8,17,5,19,10,10,19,14,10,14,8,14,17,8],[10,14,0,10,19,14,10,5,19,0,17,5],[10,14,9,10,19,14,10,5,19,12,17,5],[5,2,17,5,19,
2],[2,0,5,2,5,19,0,17,5],[2,8,5,2,5,19,12,17,5],[2,1,19,2,17,1,19,1,5,1,17,5],[1,19,2,1,5,19,0,17,5],[1,19,2,1,5,19,12,17,5],[2,10,19,2,17,8,10,5,19,17,5,8],[0,17,5,19,10,5,19,2,10],[12,17,5,19,10,5,19,2,10],[5,9,17,5,11,9,5,19,11],[0,17,5,11,0,5,11,5,19],[11,8,5,11,5,19,12,17,5],[11,5,19,11,1,5,1,9,5,17,5,9],[1,5,11,0,17,5,19,11,5],[1,5,11,12,17,5,19,11,5],[11,10,19,10,5,19,17,5,8,9,17,8],[0,17,5,19,10,5,19,11,10],[12,17,5,19,10,5,19,11,10],[5,14,17,5,3,14,5,19,3],[3,0,5,3,5,19,3,14,0,0,17,5],[3,
8,5,3,5,19,3,14,9,12,17,5],[3,5,19,3,14,1,14,17,1,1,17,5],[0,17,5,0,3,14,19,3,5],[9,3,14,12,17,5,19,3,5],[3,5,19,3,14,8,8,17,5,14,17,8],[0,17,5,0,3,14,19,3,5],[9,3,14,12,17,5,19,3,5],[3,2,5,3,5,19,2,17,5],[19,3,5,0,5,3,17,5,0],[19,3,5,8,5,3,17,5,12],[2,17,1,17,5,1,19,3,5],[0,17,5,3,5,19],[3,5,19,12,17,5],[2,17,8,8,17,5,19,3,5],[0,17,5,3,5,19],[3,5,19,12,17,5],[3,9,5,3,5,19,9,17,5],[19,3,5,0,5,3,17,5,0],[19,3,5,8,5,3,17,5,12],[9,5,1,9,17,5,19,3,5],[0,17,5,3,5,19],[3,5,19,12,17,5],[8,17,5,9,17,8,19,
3,5],[0,17,5,3,5,19],[3,5,19,12,17,5],[5,10,17,5,19,15,11,14,10,17,10,14],[10,0,5,0,17,5,11,14,0,15,5,19],[10,8,5,11,14,9,12,17,5,15,5,19],[11,14,1,14,17,1,1,17,5,15,5,19],[0,17,5,0,11,14,19,15,5],[9,11,14,12,17,5,19,15,5],[8,17,5,14,17,8,11,14,8,15,5,19],[0,17,5,0,11,14,19,15,5],[9,11,14,12,17,5,19,15,5],[10,2,5,2,17,5,15,5,19],[19,15,5,0,5,10,17,5,0],[19,15,5,17,5,12,8,5,10],[2,17,1,17,5,1,19,15,5],[0,17,5,15,5,19],[15,5,19,12,17,5],[2,17,8,8,17,5,19,15,5],[0,17,5,15,5,19],[15,5,19,12,17,5],[10,
9,5,9,17,5,15,5,19],[19,15,5,0,5,10,17,5,0],[19,15,5,17,5,12,8,5,10],[9,5,1,9,17,5,19,15,5],[0,17,5,15,5,19],[15,5,19,12,17,5],[8,17,5,9,17,8,19,15,5],[0,17,5,15,5,19],[15,5,19,12,17,5],[5,19,14,5,14,4],[0,5,14,14,5,19],[8,5,19,8,19,14,9,8,14],[4,1,14,14,1,19,1,5,19],[1,5,19,1,19,14,1,14,0],[1,5,19,1,19,14,1,14,9],[4,8,14,8,10,14,14,10,19,10,5,19],[10,14,0,10,19,14,10,5,19],[10,14,9,10,19,14,10,5,19],[4,5,2,2,5,19],[2,5,19,2,0,5],[2,5,19,2,8,5],[2,4,1,2,1,19,19,1,5],[1,19,2,1,5,19],[1,19,2,1,5,19],
[2,4,8,2,10,19,10,5,19],[10,19,2,5,19,10],[10,19,2,5,19,10],[4,5,9,9,5,11,11,5,19],[11,0,5,11,5,19],[11,8,5,11,5,19],[9,4,1,11,1,5,11,5,19],[1,5,11,5,19,11],[1,5,11,5,19,11],[9,4,8,10,5,19,11,10,19],[10,19,11,5,19,10],[10,19,11,5,19,10],[4,5,3,4,3,14,3,5,19],[3,14,0,3,0,5,3,5,19],[3,14,9,3,8,5,3,5,19],[3,14,1,3,5,19,14,4,1],[0,3,14,5,19,3],[9,3,14,5,19,3],[3,14,8,3,5,19,8,14,4],[0,3,14,5,19,3],[9,3,14,5,19,3],[3,2,4,3,4,5,3,5,19],[0,5,3,5,19,3],[8,5,3,5,19,3],[2,4,1,5,19,3],[5,19,3],[5,19,3],[2,4,
8,5,19,3],[5,19,3],[5,19,3],[3,9,5,3,5,19,9,4,5],[0,5,3,5,19,3],[8,5,3,5,19,3],[9,4,1,5,19,3],[5,19,3],[5,19,3],[9,4,8,5,19,3],[5,19,3],[5,19,3],[4,5,10,4,11,14,4,10,11,15,5,19],[15,5,19,11,14,0,10,0,5],[15,5,19,11,14,9,10,8,5],[15,5,19,11,14,4,11,4,1],[0,11,14,5,19,15],[9,11,14,5,19,15],[11,14,8,8,14,4,15,5,19],[0,11,14,5,19,15],[9,11,14,5,19,15],[15,5,19,10,4,5,10,2,4],[0,5,10,5,19,15],[8,5,10,5,19,15],[2,4,1,5,19,15],[5,19,15],[5,19,15],[2,4,8,5,19,15],[5,19,15],[5,19,15],[10,9,5,9,4,5,15,5,19],
[0,5,10,5,19,15],[8,5,10,5,19,15],[9,4,1,5,19,15],[5,19,15],[5,19,15],[9,4,8,5,19,15],[5,19,15],[5,19,15],[5,19,14,5,14,12],[0,5,14,14,5,19],[8,5,19,8,19,14,9,8,14],[12,1,14,14,1,19,1,5,19],[1,5,19,1,19,14,1,14,0],[1,5,19,1,19,14,1,14,9],[8,10,14,12,8,14,14,10,19,10,5,19],[10,14,0,10,19,14,10,5,19],[10,14,9,10,19,14,10,5,19],[12,5,2,2,5,19],[2,5,19,2,0,5],[2,5,19,2,8,5],[2,1,19,2,12,1,19,1,5],[1,19,2,1,5,19],[1,19,2,1,5,19],[2,10,19,2,12,8,10,5,19],[10,19,2,5,19,10],[10,19,2,5,19,10],[12,5,9,9,5,
11,11,5,19],[11,0,5,11,5,19],[11,8,5,11,5,19],[9,12,1,11,1,5,11,5,19],[1,5,11,5,19,11],[1,5,11,5,19,11],[9,12,8,10,5,19,11,10,19],[10,19,11,5,19,10],[10,19,11,5,19,10],[12,3,14,12,5,3,3,5,19],[3,14,0,3,0,5,3,5,19],[3,14,9,3,8,5,3,5,19],[3,14,12,3,12,1,3,5,19],[0,3,14,5,19,3],[9,3,14,5,19,3],[3,14,8,3,5,19,8,14,12],[0,3,14,5,19,3],[9,3,14,5,19,3],[3,12,5,3,2,12,3,5,19],[0,5,3,5,19,3],[8,5,3,5,19,3],[2,12,1,5,19,3],[5,19,3],[5,19,3],[2,12,8,5,19,3],[5,19,3],[5,19,3],[3,9,5,3,5,19,9,12,5],[0,5,3,5,19,
3],[8,5,3,5,19,3],[9,12,1,5,19,3],[5,19,3],[5,19,3],[9,12,8,5,19,3],[5,19,3],[5,19,3],[12,11,14,12,10,11,12,5,10,15,5,19],[15,5,19,11,14,0,10,0,5],[15,5,19,11,14,9,10,8,5],[15,5,19,11,12,1,11,14,12],[0,11,14,5,19,15],[9,11,14,5,19,15],[11,14,12,11,12,8,15,5,19],[0,11,14,5,19,15],[9,11,14,5,19,15],[15,5,19,10,2,12,10,12,5],[0,5,10,5,19,15],[8,5,10,5,19,15],[2,12,1,5,19,15],[5,19,15],[5,19,15],[2,12,8,5,19,15],[5,19,15],[5,19,15],[10,12,5,10,9,12,15,5,19],[0,5,10,5,19,15],[8,5,10,5,19,15],[9,12,1,5,
19,15],[5,19,15],[5,19,15],[9,12,8,5,19,15],[5,19,15],[5,19,15],[19,14,18,18,14,13,14,16,13,17,16,14],[16,0,17,0,13,14,14,13,18,14,18,19],[16,12,17,9,8,13,9,13,14,14,18,19,14,13,18],[1,18,19,1,19,14,1,14,17,1,17,16],[1,18,19,1,19,14,1,14,0,0,17,16],[1,18,19,1,19,14,1,14,9,12,17,16],[18,19,10,10,19,14,10,14,8,14,17,8,16,8,17],[10,14,0,10,19,14,10,18,19,0,17,16],[10,14,9,10,19,14,10,18,19,12,17,16],[18,2,13,18,19,2,2,17,16,13,2,16],[2,18,19,2,13,18,2,0,13,0,17,16],[2,18,19,2,13,18,2,8,13,12,17,16],
[2,18,19,2,1,18,2,16,1,2,17,16],[1,18,2,0,17,16,19,2,18],[1,18,2,12,17,16,19,2,18],[2,10,19,2,17,8,10,18,19,17,16,8],[0,17,16,19,10,18,19,2,10],[12,17,16,19,10,18,19,2,10],[18,11,13,18,19,11,13,11,9,16,13,9,16,9,17],[0,17,16,11,18,19,11,13,18,11,0,13],[11,18,19,11,13,18,11,8,13,12,17,16],[11,1,18,11,18,19,1,9,16,17,16,9],[1,18,11,0,17,16,19,11,18],[1,18,11,12,17,16,19,11,18],[11,18,19,11,10,18,9,17,16,9,16,8],[0,17,16,18,11,10,19,11,18],[12,17,16,18,11,10,19,11,18],[18,19,3,3,14,13,14,16,13,14,17,
16],[3,18,19,3,14,0,3,0,13,0,17,16],[3,18,19,3,14,9,3,8,13,12,17,16],[3,18,19,3,14,1,14,17,1,17,16,1],[0,17,16,0,3,14,19,3,18],[9,3,14,12,17,16,19,3,18],[3,18,19,3,14,8,8,17,16,14,17,8],[0,17,16,0,3,14,19,3,18],[9,3,14,12,17,16,19,3,18],[3,18,19,3,2,13,13,2,16,2,17,16],[19,3,18,0,13,3,17,16,0],[19,3,18,8,13,3,17,16,12],[2,17,16,2,16,1,19,3,18],[0,17,16,3,18,19],[3,18,19,12,17,16],[2,17,8,8,17,16,19,3,18],[0,17,16,3,18,19],[3,18,19,12,17,16],[3,18,19,3,9,13,13,9,16,9,17,16],[19,3,18,0,13,3,17,16,0],
[19,3,18,8,13,3,17,16,12],[9,16,1,9,17,16,19,3,18],[0,17,16,3,18,19],[3,18,19,12,17,16],[9,16,8,9,17,16,19,3,18],[0,17,16,3,18,19],[3,18,19,12,17,16],[18,19,15,11,13,10,11,14,13,14,17,16,14,16,13],[10,0,13,0,17,16,11,14,0,15,18,19],[10,8,13,11,14,9,12,17,16,15,18,19],[11,14,1,14,17,1,17,16,1,15,18,19],[0,17,16,0,11,14,19,15,18],[9,11,14,12,17,16,19,15,18],[8,17,16,14,17,8,11,14,8,15,18,19],[0,17,16,0,11,14,19,15,18],[9,11,14,12,17,16,19,15,18],[10,2,13,13,2,16,2,17,16,15,18,19],[19,15,18,0,13,10,
17,16,0],[19,15,18,17,16,12,8,13,10],[2,17,16,2,16,1,19,15,18],[0,17,16,15,18,19],[15,18,19,12,17,16],[2,17,8,8,17,16,19,15,18],[0,17,16,15,18,19],[15,18,19,12,17,16],[10,9,13,13,9,16,9,17,16,15,18,19],[19,15,18,0,13,10,17,16,0],[19,15,18,17,16,12,8,13,10],[9,16,1,9,17,16,19,15,18],[0,17,16,15,18,19],[15,18,19,12,17,16],[9,16,8,9,17,16,19,15,18],[0,17,16,15,18,19],[15,18,19,12,17,16],[4,13,14,14,18,19,14,13,18],[0,13,14,14,13,18,14,18,19],[9,8,13,9,13,14,14,18,19,14,13,18],[4,1,14,14,1,19,19,1,18],
[1,18,19,1,19,14,1,14,0],[1,18,19,1,19,14,1,14,9],[4,8,14,8,10,14,14,10,19,10,18,19],[10,14,0,10,19,14,10,18,19],[10,14,9,10,19,14,10,18,19],[4,13,2,13,18,2,2,18,19],[2,18,19,2,13,18,2,0,13],[2,18,19,2,13,18,2,8,13],[2,4,1,2,18,19,2,1,18],[1,18,2,18,19,2],[1,18,2,18,19,2],[2,4,8,2,10,19,10,18,19],[10,19,2,18,19,10],[10,19,2,18,19,10],[4,13,9,9,13,11,11,18,19,13,18,11],[11,0,13,11,13,18,11,18,19],[11,8,13,11,13,18,11,18,19],[9,4,1,11,1,18,11,18,19],[1,18,11,18,19,11],[1,18,11,18,19,11],[9,4,8,11,10,
18,11,18,19],[10,18,11,18,19,11],[10,18,11,18,19,11],[4,3,14,4,13,3,3,18,19],[3,14,0,3,0,13,3,18,19],[3,14,9,3,8,13,3,18,19],[3,14,1,3,18,19,14,4,1],[0,3,14,18,19,3],[9,3,14,18,19,3],[3,14,8,3,18,19,8,14,4],[0,3,14,18,19,3],[9,3,14,18,19,3],[3,2,13,3,18,19,13,2,4],[0,13,3,18,19,3],[8,13,3,18,19,3],[2,4,1,18,19,3],[18,19,3],[18,19,3],[2,4,8,18,19,3],[18,19,3],[18,19,3],[3,9,13,3,18,19,9,4,13],[0,13,3,18,19,3],[8,13,3,18,19,3],[9,4,1,18,19,3],[18,19,3],[18,19,3],[9,4,8,18,19,3],[18,19,3],[18,19,3],
[4,11,14,4,10,11,4,13,10,15,18,19],[15,18,19,11,14,0,10,0,13],[15,18,19,11,14,9,10,8,13],[15,18,19,11,14,4,11,4,1],[0,11,14,18,19,15],[9,11,14,18,19,15],[11,14,8,8,14,4,15,18,19],[0,11,14,18,19,15],[9,11,14,18,19,15],[15,18,19,10,4,13,10,2,4],[0,13,10,18,19,15],[8,13,10,18,19,15],[2,4,1,18,19,15],[18,19,15],[18,19,15],[2,4,8,18,19,15],[18,19,15],[18,19,15],[10,9,13,9,4,13,15,18,19],[0,13,10,18,19,15],[8,13,10,18,19,15],[9,4,1,18,19,15],[18,19,15],[18,19,15],[9,4,8,18,19,15],[18,19,15],[18,19,15],
[18,19,14,13,18,14,13,14,12],[0,13,14,14,13,18,14,18,19],[9,8,13,9,13,14,14,18,19,14,13,18],[12,1,14,14,1,19,19,1,18],[1,18,19,1,19,14,1,14,0],[1,18,19,1,19,14,1,14,9],[8,10,14,12,8,14,14,10,19,10,18,19],[10,14,0,10,19,14,10,18,19],[10,14,9,10,19,14,10,18,19],[12,13,2,13,18,2,2,18,19],[2,18,19,2,13,18,2,0,13],[2,18,19,2,13,18,2,8,13],[2,18,19,2,1,18,2,12,1],[1,18,2,18,19,2],[1,18,2,18,19,2],[2,10,19,2,12,8,10,18,19],[10,19,2,18,19,10],[10,19,2,18,19,10],[12,13,9,13,18,11,9,13,11,11,18,19],[11,0,13,
11,13,18,11,18,19],[11,8,13,11,13,18,11,18,19],[9,12,1,11,1,18,11,18,19],[1,18,11,18,19,11],[1,18,11,18,19,11],[9,12,8,11,10,18,11,18,19],[10,18,11,18,19,11],[10,18,11,18,19,11],[12,3,14,12,13,3,3,18,19],[3,14,0,3,0,13,3,18,19],[3,14,9,3,8,13,3,18,19],[3,14,12,3,12,1,3,18,19],[0,3,14,18,19,3],[9,3,14,18,19,3],[3,14,8,3,18,19,8,14,12],[0,3,14,18,19,3],[9,3,14,18,19,3],[3,12,13,3,2,12,3,18,19],[0,13,3,18,19,3],[8,13,3,18,19,3],[2,12,1,18,19,3],[18,19,3],[18,19,3],[2,12,8,18,19,3],[18,19,3],[18,19,3],
[3,9,13,3,18,19,9,12,13],[0,13,3,18,19,3],[8,13,3,18,19,3],[9,12,1,18,19,3],[18,19,3],[18,19,3],[9,12,8,18,19,3],[18,19,3],[18,19,3],[12,11,14,12,10,11,12,13,10,15,18,19],[15,18,19,11,14,0,10,0,13],[15,18,19,11,14,9,10,8,13],[15,18,19,11,12,1,11,14,12],[0,11,14,18,19,15],[9,11,14,18,19,15],[11,14,12,11,12,8,15,18,19],[0,11,14,18,19,15],[9,11,14,18,19,15],[15,18,19,10,2,12,10,12,13],[0,13,10,18,19,15],[8,13,10,18,19,15],[2,12,1,18,19,15],[18,19,15],[18,19,15],[2,12,8,18,19,15],[18,19,15],[18,19,15],
[10,12,13,10,9,12,15,18,19],[0,13,10,18,19,15],[8,13,10,18,19,15],[9,12,1,18,19,15],[18,19,15],[18,19,15],[9,12,8,18,19,15],[18,19,15],[18,19,15],[],[],[7,8,12,7,9,8,7,12,9],[],[],[1,12,7,1,7,9,12,9,7],[7,13,8,7,8,10],[13,0,7,0,10,7],[13,12,7,12,9,7,10,7,9],[],[],[2,7,12,2,8,7,12,7,8],[],[1,7,2,1,0,7,0,2,7],[1,7,2,1,12,7,12,2,7],[2,10,7,2,7,8,13,8,7],[13,0,7,0,2,7,10,7,2],[12,2,7,13,12,7,10,7,2],[7,9,14,7,11,9],[14,7,0,0,7,11],[14,7,12,12,7,8,11,8,7],[11,1,7,1,9,7,14,7,9],[1,7,11,1,0,7,0,14,7],[1,
7,11,1,12,7,12,14,7],[11,10,7,9,13,8,9,14,13,14,7,13],[13,0,7,0,14,7,10,7,11],[12,14,7,13,12,7,10,7,11],[],[],[3,7,9,3,8,7,9,7,12,12,7,8],[3,7,1],[1,0,7,0,3,7],[1,12,7,9,3,7,12,9,7],[3,7,8,13,8,7],[13,0,7,0,3,7],[9,3,7,12,9,7,13,12,7],[3,2,7],[2,7,0,0,7,3],[2,7,12,8,7,3,12,7,8],[2,7,1],[1,0,7,0,2,7],[1,12,7,12,2,7],[2,7,8,8,7,13],[13,0,7,0,2,7],[12,2,7,13,12,7],[3,9,7,14,7,9],[14,7,0,0,7,3],[8,7,3,12,7,8,14,7,12],[9,7,1,14,7,9],[1,0,7,0,14,7],[1,12,7,12,14,7],[9,13,8,9,14,13,14,7,13],[13,0,7,0,14,
7],[12,14,7,13,12,7],[7,10,11],[11,7,0,0,7,10],[11,7,9,9,7,12,12,7,8,10,8,7],[1,11,7],[1,0,7,0,11,7],[1,12,7,9,11,7,12,9,7],[13,8,7,11,7,8],[13,0,7,0,11,7],[9,11,7,12,9,7,13,12,7],[2,7,10],[2,7,0,0,7,10],[2,7,12,8,7,10,12,7,8],[2,7,1],[1,0,7,0,2,7],[1,12,7,12,2,7],[2,7,8,8,7,13],[13,0,7,0,2,7],[12,2,7,13,12,7],[14,7,9,10,9,7],[14,7,0,0,7,10],[8,7,10,12,7,8,14,7,12],[9,7,1,14,7,9],[1,0,7,0,14,7],[1,12,7,12,14,7],[9,13,8,9,14,13,14,7,13],[13,0,7,0,14,7],[12,14,7,13,12,7],[],[],[4,9,7,4,7,8,9,8,7],[],
[1,4,7,1,7,0,0,7,4],[1,4,7,1,7,9,9,7,4],[4,7,13,4,8,7,10,7,8],[10,7,0,0,7,4,13,4,7],[9,7,4,10,7,9,13,4,7],[],[2,7,4,2,0,7,0,4,7],[2,7,4,2,8,7,8,4,7],[2,4,1,2,7,4,2,1,7,1,4,7],[1,7,2,1,4,7,7,4,2],[1,7,2,1,4,7,7,4,2],[2,4,8,2,7,4,2,10,7,13,4,7],[7,4,2,10,7,2,13,4,7],[7,4,2,10,7,2,13,4,7],[4,14,7,4,7,9,11,9,7],[11,0,7,0,4,7,14,7,4],[8,4,7,11,8,7,14,7,4],[9,4,1,1,4,7,11,1,7,14,7,4],[1,7,11,1,4,7,7,4,14],[1,7,11,1,4,7,7,4,14],[9,4,8,11,10,7,13,4,7,14,7,4],[10,7,11,7,4,14,13,4,7],[10,7,11,7,4,14,13,4,7],
[],[],[3,7,9,3,8,7,7,8,4,9,7,4],[3,4,1,3,7,4,1,4,7],[1,4,7,0,3,4,7,4,3],[1,4,7,7,9,3,7,4,9],[3,4,8,3,7,4,13,4,7],[0,3,4,7,4,3,13,4,7],[7,9,3,7,4,9,13,4,7],[3,2,4,3,4,7,2,7,4],[2,7,4,0,4,3,7,3,4],[2,7,4,7,3,8,7,8,4],[2,7,4,2,4,1,1,4,7],[1,4,7,7,4,2],[1,4,7,7,4,2],[2,7,4,2,4,8,13,4,7],[7,4,2,13,4,7],[7,4,2,13,4,7],[3,9,4,3,4,7,14,7,4],[0,4,3,7,3,4,14,7,4],[7,3,8,7,8,4,14,7,4],[9,4,1,1,4,7,14,7,4],[1,4,7,7,4,14],[1,4,7,7,4,14],[9,4,8,13,4,7,14,7,4],[7,4,14,13,4,7],[7,4,14,13,4,7],[4,11,7,4,7,10,4,10,
11],[7,10,4,11,7,4,11,4,0,0,4,10],[11,7,9,9,7,4,7,8,4,10,8,7],[1,4,7,11,4,1,11,7,4],[1,4,7,0,11,4,7,4,11],[1,4,7,7,9,11,7,4,9],[11,4,8,11,7,4,13,4,7],[0,11,4,7,4,11,13,4,7],[7,9,11,7,4,9,13,4,7],[2,7,4,10,2,4,10,4,7],[2,7,4,0,4,10,7,10,4],[2,7,4,7,10,8,7,8,4],[2,7,4,2,4,1,1,4,7],[1,4,7,7,4,2],[1,4,7,7,4,2],[2,7,4,2,4,8,13,4,7],[7,4,2,13,4,7],[7,4,2,13,4,7],[10,9,4,10,4,7,14,7,4],[0,4,10,7,10,4,14,7,4],[7,10,8,7,8,4,14,7,4],[9,4,1,1,4,7,14,7,4],[1,4,7,7,4,14],[1,4,7,7,4,14],[9,4,8,13,4,7,14,7,4],[7,
4,14,13,4,7],[7,4,14,13,4,7],[7,17,12,7,12,16],[17,0,7,0,16,7],[17,9,7,9,8,7,16,7,8],[16,7,1,1,7,12,17,12,7],[1,16,7,1,7,0,0,7,17],[1,16,7,1,7,9,9,7,17],[16,7,13,10,12,8,10,17,12,10,7,17],[10,7,0,0,7,17,13,16,7],[9,7,17,10,7,9,13,16,7],[17,2,7,2,12,7,16,7,12],[2,7,17,2,0,7,0,16,7],[2,7,17,2,8,7,8,16,7],[2,7,17,2,1,7,2,12,1,1,16,7],[1,7,2,1,16,7,7,17,2],[1,7,2,1,16,7,7,17,2],[2,7,17,2,10,7,2,12,8,13,16,7],[7,17,2,10,7,2,13,16,7],[7,17,2,10,7,2,13,16,7],[17,14,7,11,9,12,11,12,16,11,16,7],[11,0,7,0,
16,7,14,7,17],[8,16,7,11,8,7,14,7,17],[9,12,1,1,16,7,11,1,7,14,7,17],[1,7,11,1,16,7,7,17,14],[1,7,11,1,16,7,7,17,14],[9,12,8,11,10,7,13,16,7,14,7,17],[10,7,11,7,17,14,13,16,7],[10,7,11,7,17,14,13,16,7],[17,12,3,17,3,7,3,16,7,12,16,3],[3,7,17,3,17,0,3,0,16,3,16,7],[3,7,9,3,8,7,7,8,16,9,7,17],[3,7,17,3,17,12,3,12,1,1,16,7],[1,16,7,0,3,17,7,17,3],[1,16,7,7,9,3,7,17,9],[3,7,17,3,17,12,3,12,8,13,16,7],[0,3,17,7,17,3,13,16,7],[7,9,3,7,17,9,13,16,7],[3,16,7,3,12,16,3,2,12,2,7,17],[2,7,17,0,16,3,7,3,16],
[2,7,17,7,3,8,7,8,16],[2,7,17,2,12,1,1,16,7],[1,16,7,7,17,2],[1,16,7,7,17,2],[2,7,17,2,12,8,13,16,7],[7,17,2,13,16,7],[7,17,2,13,16,7],[3,16,7,3,12,16,3,9,12,14,7,17],[0,16,3,7,3,16,14,7,17],[7,3,8,7,8,16,14,7,17],[9,12,1,1,16,7,14,7,17],[1,16,7,7,17,14],[1,16,7,7,17,14],[9,12,8,13,16,7,14,7,17],[7,17,14,13,16,7],[7,17,14,13,16,7],[17,12,11,17,11,7,12,10,11,16,10,12,16,7,10],[7,10,16,11,17,0,11,7,17,0,16,10],[11,7,17,11,17,9,10,16,7,10,8,16],[1,16,7,11,7,17,11,17,12,11,12,1],[1,16,7,0,11,17,7,17,
11],[1,16,7,7,17,11,17,9,11],[11,7,17,11,17,12,11,12,8,13,16,7],[0,11,17,7,17,11,13,16,7],[7,17,11,13,16,7,17,9,11],[2,7,17,10,16,7,10,12,16,10,2,12],[2,7,17,0,16,10,7,10,16],[2,7,17,7,10,16,16,10,8],[2,7,17,2,12,1,1,16,7],[1,16,7,7,17,2],[1,16,7,7,17,2],[2,7,17,2,12,8,13,16,7],[7,17,2,13,16,7],[7,17,2,13,16,7],[10,16,7,10,12,16,10,9,12,14,7,17],[0,16,10,7,10,16,14,7,17],[7,10,16,14,7,17,16,10,8],[9,12,1,1,16,7,14,7,17],[1,16,7,7,17,14],[1,16,7,7,17,14],[9,12,8,13,16,7,14,7,17],[7,17,14,13,16,7],
[7,17,14,13,16,7],[],[],[5,12,7,5,7,8,9,8,7,12,9,7],[5,1,7],[1,7,0,0,7,5],[1,7,9,9,7,12,12,7,5],[5,8,7,10,7,8],[10,7,0,0,7,5],[9,7,12,10,7,9,12,7,5],[],[],[2,7,12,2,8,7,7,8,5,12,7,5],[2,5,1,2,7,5,2,1,7],[1,7,2,0,2,5,7,5,2],[1,7,2,7,12,2,7,5,12],[2,5,8,2,7,5,2,10,7],[0,2,5,7,5,2,10,7,2],[7,12,2,10,7,2,7,5,12],[5,14,7,5,7,11,5,11,9,5,9,14],[7,11,5,14,7,5,14,5,0,0,5,11],[14,7,12,12,7,5,7,8,5,11,8,7],[11,1,7,9,5,1,14,5,9,14,7,5],[1,7,11,0,14,5,7,5,14],[1,7,11,7,12,14,7,5,12],[11,10,7,9,5,8,14,5,9,14,
7,5],[0,14,5,10,7,11,7,5,14],[10,7,11,7,12,14,7,5,12],[5,3,7],[3,0,5,3,7,0,0,7,5],[3,8,5,3,7,9,9,7,12,12,7,5],[3,5,1,3,7,5],[0,7,5,0,3,7],[9,3,7,12,9,7,12,7,5],[3,7,8,7,5,8],[0,7,5,0,3,7],[9,3,7,12,9,7,12,7,5],[3,2,5,2,7,5],[2,7,5,2,5,0,0,5,3],[2,7,12,12,7,5,8,5,3],[2,7,5,2,5,1],[0,2,5,7,5,2],[7,12,2,7,5,12],[2,7,5,2,5,8],[0,2,5,7,5,2],[7,12,2,7,5,12],[3,9,5,9,14,5,14,7,5],[14,5,0,14,7,5,0,5,3],[12,7,5,14,7,12,8,5,3],[9,5,1,14,5,9,14,7,5],[0,14,5,7,5,14],[7,5,12,7,12,14],[9,5,8,14,5,9,14,7,5],[0,
14,5,7,5,14],[7,5,12,7,12,14],[5,11,7,5,10,11],[10,0,5,0,7,5,11,7,0],[10,8,5,9,7,12,11,7,9,12,7,5],[1,11,5,7,5,11],[0,7,5,0,11,7],[9,11,7,12,9,7,12,7,5],[7,5,8,11,7,8],[0,7,5,0,11,7],[9,11,7,12,9,7,12,7,5],[10,2,5,2,7,5],[2,7,5,2,5,0,0,5,10],[2,7,12,12,7,5,8,5,10],[2,7,5,2,5,1],[0,2,5,7,5,2],[7,12,2,7,5,12],[2,7,5,2,5,8],[0,2,5,7,5,2],[7,12,2,7,5,12],[10,9,5,9,14,5,14,7,5],[14,5,0,14,7,5,0,5,10],[12,7,5,14,7,12,8,5,10],[9,5,1,14,5,9,14,7,5],[0,14,5,7,5,14],[7,5,12,7,12,14],[9,5,8,14,5,9,14,7,5],[0,
14,5,7,5,14],[7,5,12,7,12,14],[5,7,4],[4,0,7,0,5,7],[4,9,7,8,5,7,9,8,7],[4,1,7],[1,7,0,0,7,4],[1,7,9,9,7,4],[4,8,7,8,10,7],[10,7,0,0,7,4],[9,7,4,10,7,9],[4,5,2,4,2,7,2,5,7],[2,7,4,2,5,7,2,0,5],[2,7,4,2,8,7,8,5,7],[2,4,1,2,7,4,2,1,7],[1,7,2,7,4,2],[1,7,2,7,4,2],[2,4,8,2,7,4,2,10,7],[7,4,2,10,7,2],[7,4,2,10,7,2],[4,5,9,4,14,7,9,5,11,11,5,7],[11,0,5,11,5,7,14,7,4],[8,5,7,11,8,7,14,7,4],[9,4,1,11,1,7,14,7,4],[1,7,11,7,4,14],[1,7,11,7,4,14],[9,4,8,11,10,7,14,7,4],[10,7,11,7,4,14],[10,7,11,7,4,14],[4,5,
3,4,3,7],[3,4,0,3,7,4,3,0,5],[3,7,9,3,8,5,9,7,4],[3,4,1,3,7,4],[0,3,4,7,4,3],[7,9,3,7,4,9],[3,4,8,3,7,4],[0,3,4,7,4,3],[7,9,3,7,4,9],[3,2,4,3,4,5,2,7,4],[2,7,4,0,5,3],[2,7,4,8,5,3],[2,7,4,2,4,1],[7,4,2],[7,4,2],[2,7,4,2,4,8],[7,4,2],[7,4,2],[3,9,5,9,4,5,14,7,4],[0,5,3,14,7,4],[8,5,3,14,7,4],[9,4,1,14,7,4],[7,4,14],[7,4,14],[9,4,8,14,7,4],[7,4,14],[7,4,14],[4,5,10,4,11,7,4,10,11],[11,7,4,11,4,0,10,0,5],[11,7,9,9,7,4,10,8,5],[11,7,4,11,4,1],[0,11,4,7,4,11],[7,4,9,7,9,11],[11,7,4,11,4,8],[0,11,4,7,4,
11],[7,4,9,7,9,11],[10,4,5,10,2,4,2,7,4],[2,7,4,0,5,10],[2,7,4,8,5,10],[2,7,4,2,4,1],[7,4,2],[7,4,2],[2,7,4,2,4,8],[7,4,2],[7,4,2],[10,9,5,9,4,5,14,7,4],[0,5,10,14,7,4],[8,5,10,14,7,4],[9,4,1,14,7,4],[7,4,14],[7,4,14],[9,4,8,14,7,4],[7,4,14],[7,4,14],[5,7,12,17,12,7],[17,0,7,0,5,7],[8,5,7,9,8,7,17,9,7],[12,1,7,17,12,7],[1,7,0,0,7,17],[1,7,9,9,7,17],[8,10,12,12,10,17,17,10,7],[10,7,0,0,7,17],[9,7,17,10,7,9],[12,5,2,2,5,7,17,2,7],[2,7,17,2,5,7,2,0,5],[2,7,17,2,8,7,8,5,7],[2,7,17,2,1,7,2,12,1],[1,7,
2,7,17,2],[1,7,2,7,17,2],[2,7,17,2,10,7,2,12,8],[7,17,2,10,7,2],[7,17,2,10,7,2],[12,5,9,9,5,11,17,14,7,11,5,7],[11,0,5,11,5,7,14,7,17],[8,5,7,11,8,7,14,7,17],[9,12,1,11,1,7,14,7,17],[1,7,11,7,17,14],[1,7,11,7,17,14],[9,12,8,11,10,7,14,7,17],[10,7,11,7,17,14],[10,7,11,7,17,14],[17,12,3,17,3,7,12,5,3],[3,7,17,3,17,0,3,0,5],[3,7,9,3,8,5,9,7,17],[3,7,17,3,17,12,3,12,1],[0,3,17,7,17,3],[7,9,3,7,17,9],[3,7,17,3,17,12,3,12,8],[0,3,17,7,17,3],[7,9,3,7,17,9],[3,12,5,3,2,12,2,7,17],[2,7,17,0,5,3],[2,7,17,8,
5,3],[2,7,17,2,12,1],[7,17,2],[7,17,2],[2,7,17,2,12,8],[7,17,2],[7,17,2],[3,9,5,14,7,17,9,12,5],[0,5,3,14,7,17],[8,5,3,14,7,17],[9,12,1,14,7,17],[7,17,14],[7,17,14],[9,12,8,14,7,17],[7,17,14],[7,17,14],[17,12,11,17,11,7,12,10,11,12,5,10],[11,17,0,11,7,17,10,0,5],[11,7,17,11,17,9,10,8,5],[11,17,12,11,7,17,11,12,1],[0,11,17,7,17,11],[7,17,11,17,9,11],[11,17,12,11,7,17,11,12,8],[0,11,17,7,17,11],[7,17,11,17,9,11],[10,2,12,10,12,5,2,7,17],[2,7,17,0,5,10],[2,7,17,8,5,10],[2,7,17,2,12,1],[7,17,2],[7,17,
2],[2,7,17,2,12,8],[7,17,2],[7,17,2],[10,12,5,10,9,12,14,7,17],[0,5,10,14,7,17],[8,5,10,14,7,17],[9,12,1,14,7,17],[7,17,14],[7,17,14],[9,12,8,14,7,17],[7,17,14],[7,17,14],[7,16,13],[16,0,7,0,13,7],[16,12,7,12,9,7,9,8,7,13,7,8],[1,7,16],[1,7,0,0,7,16],[1,7,9,9,7,12,12,7,16],[10,7,8,16,8,7],[10,7,0,0,7,16],[9,7,12,10,7,9,12,7,16],[16,13,2,16,2,7,2,13,7],[2,7,16,2,16,0,2,0,13,2,13,7],[2,7,12,2,8,7,7,8,13,12,7,16],[2,7,16,2,16,1,2,1,7],[1,7,2,0,2,16,7,16,2],[1,7,2,7,12,2,7,16,12],[2,7,16,2,16,8,2,10,
7],[0,2,16,7,16,2,10,7,2],[7,12,2,10,7,2,7,16,12],[16,13,9,16,9,14,16,14,7,13,11,9,13,7,11],[7,11,13,14,16,0,14,7,16,0,13,11],[14,7,16,14,16,12,11,13,7,11,8,13],[11,1,7,14,7,16,14,16,9,9,16,1],[1,7,11,0,14,16,7,16,14],[1,7,11,7,16,14,16,12,14],[11,10,7,14,7,16,14,16,9,9,16,8],[0,14,16,10,7,11,7,16,14],[10,7,11,7,16,14,16,12,14],[13,3,16,3,7,16],[3,7,0,3,0,13,0,7,16],[3,7,9,3,8,13,9,7,12,12,7,16],[3,7,16,3,16,1],[0,7,16,0,3,7],[9,3,7,12,9,7,12,7,16],[3,7,8,7,16,8],[0,7,16,0,3,7],[9,3,7,12,9,7,12,7,
16],[3,2,13,13,2,16,2,7,16],[2,7,16,2,16,0,0,13,3],[2,7,12,12,7,16,8,13,3],[2,7,16,2,16,1],[0,2,16,7,16,2],[7,12,2,7,16,12],[2,7,16,2,16,8],[0,2,16,7,16,2],[7,12,2,7,16,12],[3,9,13,13,9,16,14,7,16,9,14,16],[14,16,0,14,7,16,0,13,3],[14,16,12,14,7,16,8,13,3],[9,16,1,14,16,9,14,7,16],[0,14,16,7,16,14],[7,16,14,16,12,14],[9,16,8,14,16,9,14,7,16],[0,14,16,7,16,14],[7,16,14,16,12,14],[13,10,11,16,13,11,16,11,7],[10,0,13,0,7,16,11,7,0],[10,8,13,9,7,12,11,7,9,12,7,16],[1,11,16,7,16,11],[0,7,16,0,11,7],[9,
11,7,12,9,7,12,7,16],[11,7,16,11,16,8],[0,7,16,0,11,7],[9,11,7,12,9,7,12,7,16],[10,2,13,13,2,16,2,7,16],[2,7,16,2,16,0,0,13,10],[2,7,12,12,7,16,8,13,10],[2,7,16,2,16,1],[0,2,16,7,16,2],[7,12,2,7,16,12],[2,7,16,2,16,8],[0,2,16,7,16,2],[7,12,2,7,16,12],[10,9,13,13,9,16,9,14,16,14,7,16],[14,16,0,14,7,16,0,13,10],[14,16,12,14,7,16,8,13,10],[9,16,1,14,16,9,14,7,16],[0,14,16,7,16,14],[7,16,14,16,12,14],[9,16,8,14,16,9,14,7,16],[0,14,16,7,16,14],[7,16,14,16,12,14],[4,13,7],[4,0,7,0,13,7],[4,9,7,8,13,7,9,
8,7],[4,1,7],[1,7,0,0,7,4],[1,7,9,9,7,4],[4,8,7,8,10,7],[10,7,0,0,7,4],[9,7,4,10,7,9],[4,2,7,4,13,2,2,13,7],[2,7,4,2,13,7,2,0,13],[2,7,4,2,8,7,8,13,7],[2,4,1,2,7,4,2,1,7],[1,7,2,7,4,2],[1,7,2,7,4,2],[2,4,8,2,7,4,2,10,7],[7,4,2,10,7,2],[7,4,2,10,7,2],[4,14,7,4,13,9,9,13,11,11,13,7],[11,0,13,11,13,7,14,7,4],[11,8,13,11,13,7,14,7,4],[9,4,1,11,1,7,14,7,4],[1,7,11,7,4,14],[1,7,11,7,4,14],[9,4,8,11,10,7,14,7,4],[10,7,11,7,4,14],[10,7,11,7,4,14],[4,3,7,4,13,3],[3,4,0,3,7,4,3,0,13],[3,7,9,3,8,13,9,7,4],[3,
4,1,3,7,4],[0,3,4,7,4,3],[7,9,3,7,4,9],[3,4,8,3,7,4],[0,3,4,7,4,3],[7,9,3,7,4,9],[3,2,13,13,2,4,2,7,4],[2,7,4,0,13,3],[2,7,4,8,13,3],[2,7,4,2,4,1],[7,4,2],[7,4,2],[2,7,4,2,4,8],[7,4,2],[7,4,2],[3,9,13,9,4,13,14,7,4],[0,13,3,14,7,4],[8,13,3,14,7,4],[9,4,1,14,7,4],[7,4,14],[7,4,14],[9,4,8,14,7,4],[7,4,14],[7,4,14],[4,11,7,4,10,11,4,13,10],[11,7,4,11,4,0,10,0,13],[11,7,9,9,7,4,10,8,13],[11,7,4,11,4,1],[0,11,4,7,4,11],[7,4,9,7,9,11],[11,7,4,11,4,8],[0,11,4,7,4,11],[7,4,9,7,9,11],[10,4,13,10,2,4,2,7,4],
[2,7,4,0,13,10],[2,7,4,8,13,10],[2,7,4,2,4,1],[7,4,2],[7,4,2],[2,7,4,2,4,8],[7,4,2],[7,4,2],[10,9,13,9,4,13,14,7,4],[0,13,10,14,7,4],[8,13,10,14,7,4],[9,4,1,14,7,4],[7,4,14],[7,4,14],[9,4,8,14,7,4],[7,4,14],[7,4,14],[17,12,7,13,7,12],[17,0,7,0,13,7],[8,13,7,9,8,7,17,9,7],[12,1,7,17,12,7],[1,7,0,0,7,17],[1,7,9,9,7,17],[8,10,12,12,10,17,17,10,7],[10,7,0,0,7,17],[9,7,17,10,7,9],[12,13,2,2,13,7,17,2,7],[2,7,17,2,13,7,2,0,13],[2,7,17,2,8,7,8,13,7],[2,7,17,2,1,7,2,12,1],[1,7,2,7,17,2],[1,7,2,7,17,2],[2,
7,17,2,10,7,2,12,8],[7,17,2,10,7,2],[7,17,2,10,7,2],[12,13,9,11,13,7,9,13,11,17,14,7],[11,0,13,11,13,7,14,7,17],[11,8,13,11,13,7,14,7,17],[9,12,1,11,1,7,14,7,17],[1,7,11,7,17,14],[1,7,11,7,17,14],[9,12,8,11,10,7,14,7,17],[10,7,11,7,17,14],[10,7,11,7,17,14],[17,12,3,17,3,7,12,13,3],[3,7,17,3,17,0,3,0,13],[3,7,9,3,8,13,9,7,17],[3,7,17,3,17,12,3,12,1],[0,3,17,7,17,3],[7,9,3,7,17,9],[3,7,17,3,17,12,3,12,8],[0,3,17,7,17,3],[7,9,3,7,17,9],[3,12,13,3,2,12,2,7,17],[2,7,17,0,13,3],[2,7,17,8,13,3],[2,7,17,
2,12,1],[7,17,2],[7,17,2],[2,7,17,2,12,8],[7,17,2],[7,17,2],[3,9,13,9,12,13,14,7,17],[0,13,3,14,7,17],[8,13,3,14,7,17],[9,12,1,14,7,17],[7,17,14],[7,17,14],[9,12,8,14,7,17],[7,17,14],[7,17,14],[17,12,11,17,11,7,12,10,11,12,13,10],[11,17,0,11,7,17,10,0,13],[11,7,17,11,17,9,10,8,13],[11,17,12,11,7,17,11,12,1],[0,11,17,7,17,11],[7,17,11,17,9,11],[11,17,12,11,7,17,11,12,8],[0,11,17,7,17,11],[7,17,11,17,9,11],[10,2,12,10,12,13,2,7,17],[2,7,17,0,13,10],[2,7,17,8,13,10],[2,7,17,2,12,1],[7,17,2],[7,17,2],
[2,7,17,2,12,8],[7,17,2],[7,17,2],[10,12,13,10,9,12,14,7,17],[0,13,10,14,7,17],[8,13,10,14,7,17],[9,12,1,14,7,17],[7,17,14],[7,17,14],[9,12,8,14,7,17],[7,17,14],[7,17,14],[],[],[6,7,12,6,9,7,8,7,9,12,7,8],[],[],[1,12,7,1,7,9,7,6,9,12,6,7],[6,7,13,6,10,7,6,8,10,6,13,8],[7,6,10,13,6,7,13,0,6,0,10,6],[13,12,7,12,6,7,7,6,9,10,7,9],[6,7,2],[2,0,7,0,6,7],[2,8,7,8,12,7,12,6,7],[2,6,1,2,1,7,1,6,7],[1,7,2,1,6,7,1,0,6],[1,7,2,1,12,7,12,6,7],[2,6,8,2,10,7,8,6,13,13,6,7],[13,0,6,13,6,7,10,7,2],[12,6,7,13,12,
7,10,7,2],[6,7,9,11,9,7],[11,0,7,0,6,7],[8,12,7,11,8,7,12,6,7],[9,6,1,1,6,7,11,1,7],[1,7,11,1,6,7,1,0,6],[1,7,11,1,12,7,12,6,7],[9,6,8,8,6,13,11,10,7,13,6,7],[13,0,6,13,6,7,10,7,11],[12,6,7,13,12,7,10,7,11],[6,7,3],[3,6,0,3,0,7,0,6,7],[3,6,9,3,8,7,8,12,7,12,6,7],[3,6,1,1,6,7],[1,6,7,1,0,6,0,3,6],[1,12,7,12,6,7,9,3,6],[3,6,8,8,6,13,13,6,7],[13,0,6,13,6,7,0,3,6],[12,6,7,13,12,7,9,3,6],[3,2,6,3,6,7],[0,6,7,0,7,3],[8,7,3,12,7,8,12,6,7],[2,6,1,1,6,7],[1,6,7,1,0,6],[1,12,7,12,6,7],[2,6,8,8,6,13,13,6,7],
[13,0,6,13,6,7],[12,6,7,13,12,7],[3,9,7,7,9,6],[0,6,7,0,7,3],[8,7,3,12,7,8,12,6,7],[9,6,1,1,6,7],[1,6,7,1,0,6],[1,12,7,12,6,7],[8,6,13,9,6,8,13,6,7],[13,0,6,13,6,7],[12,6,7,13,12,7],[6,7,10,6,10,11],[11,6,0,0,6,7,10,0,7],[11,6,9,8,12,7,10,8,7,12,6,7],[11,6,1,1,6,7],[1,6,7,1,0,6,0,11,6],[1,12,7,12,6,7,9,11,6],[11,6,8,8,6,13,13,6,7],[13,0,6,13,6,7,0,11,6],[12,6,7,13,12,7,9,11,6],[2,6,10,7,10,6],[0,6,7,0,7,10],[8,7,10,12,7,8,12,6,7],[2,6,1,1,6,7],[1,6,7,1,0,6],[1,12,7,12,6,7],[2,6,8,8,6,13,13,6,7],[13,
0,6,13,6,7],[12,6,7,13,12,7],[7,9,6,10,9,7],[0,6,7,0,7,10],[8,7,10,12,7,8,12,6,7],[9,6,1,1,6,7],[1,6,7,1,0,6],[1,12,7,12,6,7],[8,6,13,9,6,8,13,6,7],[13,0,6,13,6,7],[12,6,7,13,12,7],[6,4,7],[4,7,0,0,7,6],[4,7,8,8,7,9,9,7,6],[4,1,6,4,7,1,1,7,6],[1,4,7,1,7,6,1,6,0],[1,4,7,1,7,9,9,7,6],[4,8,6,4,7,13,8,10,6,10,7,6],[10,6,0,10,7,6,13,4,7],[9,7,6,10,7,9,13,4,7],[4,7,2],[2,0,7,0,4,7],[2,8,7,8,4,7],[2,4,1,2,1,7,1,4,7],[1,7,2,1,4,7],[1,7,2,1,4,7],[2,4,8,2,10,7,13,4,7],[10,7,2,13,4,7],[10,7,2,13,4,7],[4,7,9,
9,7,11],[11,0,7,0,4,7],[8,4,7,11,8,7],[9,4,1,1,4,7,11,1,7],[1,7,11,1,4,7],[1,7,11,1,4,7],[9,4,8,11,10,7,13,4,7],[10,7,11,13,4,7],[10,7,11,13,4,7],[4,3,6,4,7,3],[3,0,4,3,4,7,3,6,0],[3,8,7,3,6,9,8,4,7],[3,4,1,3,6,4,1,4,7],[1,4,7,0,3,6],[1,4,7,9,3,6],[3,6,8,8,6,4,13,4,7],[0,3,6,13,4,7],[9,3,6,13,4,7],[3,2,4,3,4,7],[0,4,3,7,3,4],[7,3,8,7,8,4],[2,4,1,1,4,7],[1,4,7],[1,4,7],[2,4,8,13,4,7],[13,4,7],[13,4,7],[3,9,4,3,4,7],[0,4,3,7,3,4],[7,3,8,7,8,4],[9,4,1,1,4,7],[1,4,7],[1,4,7],[9,4,8,13,4,7],[13,4,7],[13,
4,7],[4,11,6,4,7,10,4,10,11],[10,4,7,10,0,4,11,6,0],[10,8,7,8,4,7,11,6,9],[11,6,4,11,4,1,1,4,7],[1,4,7,0,11,6],[1,4,7,9,11,6],[11,6,8,8,6,4,13,4,7],[0,11,6,13,4,7],[9,11,6,13,4,7],[10,4,7,10,2,4],[0,4,10,7,10,4],[7,8,4,7,10,8],[2,4,1,1,4,7],[1,4,7],[1,4,7],[2,4,8,13,4,7],[13,4,7],[13,4,7],[10,4,7,10,9,4],[0,4,10,7,10,4],[7,8,4,7,10,8],[9,4,1,1,4,7],[1,4,7],[1,4,7],[9,4,8,13,4,7],[13,4,7],[13,4,7],[6,12,7,16,7,12],[16,7,0,0,7,6],[8,7,9,16,7,8,9,7,6],[12,1,6,1,7,6,16,7,1],[1,16,7,1,7,6,1,6,0],[1,16,
7,1,7,9,9,7,6],[12,8,6,8,10,6,16,7,13,10,7,6],[10,6,0,10,7,6,13,16,7],[9,7,6,10,7,9,13,16,7],[12,7,2,16,7,12],[2,0,7,0,16,7],[2,8,7,8,16,7],[2,1,7,2,12,1,1,16,7],[1,7,2,1,16,7],[1,7,2,1,16,7],[2,10,7,2,12,8,13,16,7],[10,7,2,13,16,7],[10,7,2,13,16,7],[9,12,11,12,16,11,16,7,11],[11,0,7,0,16,7],[8,16,7,11,8,7],[9,12,1,1,16,7,11,1,7],[1,7,11,1,16,7],[1,7,11,1,16,7],[9,12,8,11,10,7,13,16,7],[10,7,11,13,16,7],[10,7,11,13,16,7],[16,3,12,16,7,3,12,3,6],[3,16,7,3,0,16,3,6,0],[3,8,7,3,6,9,8,16,7],[3,6,12,3,
12,1,1,16,7],[1,16,7,0,3,6],[1,16,7,9,3,6],[3,6,8,13,16,7,8,6,12],[0,3,6,13,16,7],[9,3,6,13,16,7],[3,16,7,3,12,16,3,2,12],[0,16,3,7,3,16],[7,3,8,7,8,16],[2,12,1,1,16,7],[1,16,7],[1,16,7],[2,12,8,13,16,7],[13,16,7],[13,16,7],[3,16,7,3,12,16,3,9,12],[0,16,3,7,3,16],[7,3,8,7,8,16],[9,12,1,1,16,7],[1,16,7],[1,16,7],[9,12,8,13,16,7],[13,16,7],[13,16,7],[16,10,12,16,7,10,12,11,6,12,10,11],[10,0,16,10,16,7,11,6,0],[10,16,7,10,8,16,11,6,9],[11,12,1,11,6,12,1,16,7],[1,16,7,0,11,6],[1,16,7,9,11,6],[11,6,12,
11,12,8,13,16,7],[0,11,6,13,16,7],[9,11,6,13,16,7],[10,12,16,10,16,7,10,2,12],[0,16,10,7,10,16],[7,10,16,16,10,8],[2,12,1,1,16,7],[1,16,7],[1,16,7],[2,12,8,13,16,7],[13,16,7],[13,16,7],[10,12,16,10,16,7,10,9,12],[0,16,10,7,10,16],[7,10,16,16,10,8],[9,12,1,1,16,7],[1,16,7],[1,16,7],[9,12,8,13,16,7],[13,16,7],[13,16,7],[6,5,7],[5,0,6,5,7,0,0,7,6],[5,12,6,5,7,8,8,7,9,9,7,6],[5,1,6,1,7,6],[1,7,6,1,6,0,0,6,5],[1,7,9,9,7,6,12,6,5],[5,8,6,8,10,6,10,7,6],[10,6,0,10,7,6,0,6,5],[9,7,6,10,7,9,12,6,5],[5,2,6,
5,7,2],[2,0,5,2,5,7,0,6,5],[2,8,7,8,5,7,12,6,5],[2,5,1,2,6,5,2,1,7],[1,7,2,0,6,5],[1,7,2,12,6,5],[2,6,8,2,10,7,8,6,5],[0,6,5,10,7,2],[12,6,5,10,7,2],[5,9,6,5,7,11,5,11,9],[11,5,7,11,0,5,0,6,5],[11,8,7,8,5,7,12,6,5],[9,6,5,9,5,1,11,1,7],[1,7,11,0,6,5],[1,7,11,12,6,5],[9,6,8,8,6,5,11,10,7],[0,6,5,10,7,11],[12,6,5,10,7,11],[5,3,6],[3,0,5,3,6,0,0,6,5],[3,8,5,3,6,9,12,6,5],[3,6,1,1,6,5],[0,6,5,0,3,6],[9,3,6,12,6,5],[3,6,8,8,6,5],[0,6,5,0,3,6],[9,3,6,12,6,5],[3,2,5,2,6,5],[6,5,0,0,5,3],[6,5,12,8,5,3],[2,
6,5,2,5,1],[0,6,5],[12,6,5],[2,6,8,8,6,5],[0,6,5],[12,6,5],[3,9,5,9,6,5],[6,5,0,0,5,3],[6,5,12,8,5,3],[9,5,1,9,6,5],[0,6,5],[12,6,5],[8,6,5,9,6,8],[0,6,5],[12,6,5],[5,10,6,10,11,6],[10,0,5,0,6,5,11,6,0],[10,8,5,11,6,9,12,6,5],[11,6,1,1,6,5],[0,6,5,0,11,6],[9,11,6,12,6,5],[8,6,5,11,6,8],[0,6,5,0,11,6],[9,11,6,12,6,5],[10,2,5,2,6,5],[6,5,0,0,5,10],[6,5,12,8,5,10],[2,6,5,2,5,1],[0,6,5],[12,6,5],[2,6,8,8,6,5],[0,6,5],[12,6,5],[10,9,5,9,6,5],[6,5,0,0,5,10],[6,5,12,8,5,10],[9,5,1,9,6,5],[0,6,5],[12,6,5],
[8,6,5,9,6,8],[0,6,5],[12,6,5],[5,6,4,5,7,6],[0,7,6,0,5,7],[8,5,7,9,8,7,9,7,6],[4,1,6,1,7,6],[1,7,6,1,6,0],[1,7,9,9,7,6],[4,8,6,8,10,6,10,7,6],[10,6,0,10,7,6],[9,7,6,10,7,9],[4,5,2,2,5,7],[2,5,7,2,0,5],[2,8,7,8,5,7],[2,4,1,2,1,7],[1,7,2],[1,7,2],[2,4,8,2,10,7],[10,7,2],[10,7,2],[4,5,9,9,5,11,11,5,7],[11,0,5,11,5,7],[8,5,7,11,8,7],[9,4,1,11,1,7],[1,7,11],[1,7,11],[9,4,8,11,10,7],[10,7,11],[10,7,11],[4,5,3,4,3,6],[3,6,0,3,0,5],[3,6,9,3,8,5],[3,4,1,3,6,4],[0,3,6],[9,3,6],[3,6,8,8,6,4],[0,3,6],[9,3,6],
[3,2,4,3,4,5],[0,5,3],[8,5,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,5,9,4,5],[0,5,3],[8,5,3],[9,4,1],[],[],[9,4,8],[],[],[4,5,10,4,11,6,4,10,11],[11,6,0,10,0,5],[11,6,9,10,8,5],[11,6,4,11,4,1],[0,11,6],[9,11,6],[11,6,8,8,6,4],[0,11,6],[9,11,6],[10,4,5,10,2,4],[0,5,10],[8,5,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,5,9,4,5],[0,5,10],[8,5,10],[9,4,1],[],[],[9,4,8],[],[],[5,7,12,7,6,12],[0,7,6,0,5,7],[8,5,7,9,8,7,9,7,6],[12,1,6,1,7,6],[1,7,6,1,6,0],[1,7,9,9,7,6],[8,10,6,12,8,6,10,7,6],[10,6,0,10,7,6],[9,7,6,
10,7,9],[12,5,2,2,5,7],[2,5,7,2,0,5],[2,8,7,8,5,7],[2,1,7,2,12,1],[1,7,2],[1,7,2],[2,10,7,2,12,8],[10,7,2],[10,7,2],[12,5,9,9,5,11,11,5,7],[11,0,5,11,5,7],[8,5,7,11,8,7],[9,12,1,11,1,7],[1,7,11],[1,7,11],[9,12,8,11,10,7],[10,7,11],[10,7,11],[12,3,6,12,5,3],[3,6,0,3,0,5],[3,6,9,3,8,5],[3,6,12,3,12,1],[0,3,6],[9,3,6],[3,6,8,8,6,12],[0,3,6],[9,3,6],[3,12,5,3,2,12],[0,5,3],[8,5,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,5,9,12,5],[0,5,3],[8,5,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,6,12,10,11,12,5,10],[11,
6,0,10,0,5],[11,6,9,10,8,5],[11,12,1,11,6,12],[0,11,6],[9,11,6],[11,6,12,11,12,8],[0,11,6],[9,11,6],[10,2,12,10,12,5],[0,5,10],[8,5,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,5,10,9,12],[0,5,10],[8,5,10],[9,12,1],[],[],[9,12,8],[],[],[6,13,7,6,16,13],[16,0,6,0,7,6,13,7,0],[16,12,6,8,7,9,13,7,8,9,7,6],[16,1,6,1,7,6],[1,7,6,1,6,0,0,6,16],[1,7,9,9,7,6,12,6,16],[16,8,6,8,10,6,10,7,6],[10,6,0,10,7,6,0,6,16],[9,7,6,10,7,9,12,6,16],[16,13,2,16,2,6,13,7,2],[2,13,7,2,0,13,0,6,16],[2,8,7,12,6,16,8,13,7],[2,6,
16,2,16,1,2,1,7],[1,7,2,0,6,16],[1,7,2,12,6,16],[2,6,8,2,10,7,8,6,16],[0,6,16,10,7,2],[12,6,16,10,7,2],[16,13,9,16,9,6,13,11,9,13,7,11],[11,0,13,11,13,7,0,6,16],[11,13,7,11,8,13,12,6,16],[9,16,1,9,6,16,11,1,7],[1,7,11,0,6,16],[1,7,11,12,6,16],[9,6,16,9,16,8,11,10,7],[0,6,16,10,7,11],[12,6,16,10,7,11],[16,13,6,13,3,6],[3,6,0,3,0,13,0,6,16],[3,6,9,3,8,13,12,6,16],[3,6,1,1,6,16],[0,6,16,0,3,6],[9,3,6,12,6,16],[3,6,8,8,6,16],[0,6,16,0,3,6],[9,3,6,12,6,16],[3,2,13,13,2,16,2,6,16],[6,16,0,0,13,3],[6,16,
12,8,13,3],[2,6,16,2,16,1],[0,6,16],[12,6,16],[2,6,8,8,6,16],[0,6,16],[12,6,16],[3,9,13,13,9,16,9,6,16],[6,16,0,0,13,3],[6,16,12,8,13,3],[9,16,1,9,6,16],[0,6,16],[12,6,16],[9,16,8,9,6,16],[0,6,16],[12,6,16],[13,11,16,10,11,13,16,11,6],[10,0,13,0,6,16,11,6,0],[10,8,13,11,6,9,12,6,16],[11,6,1,1,6,16],[0,6,16,0,11,6],[9,11,6,12,6,16],[8,6,16,11,6,8],[0,6,16,0,11,6],[9,11,6,12,6,16],[10,2,13,13,2,16,2,6,16],[6,16,0,0,13,10],[6,16,12,8,13,10],[2,6,16,2,16,1],[0,6,16],[12,6,16],[2,6,8,8,6,16],[0,6,16],
[12,6,16],[10,9,13,13,9,16,9,6,16],[6,16,0,0,13,10],[6,16,12,8,13,10],[9,16,1,9,6,16],[0,6,16],[12,6,16],[9,16,8,9,6,16],[0,6,16],[12,6,16],[4,13,6,7,6,13],[0,7,6,0,13,7],[8,13,7,9,8,7,9,7,6],[4,1,6,1,7,6],[1,7,6,1,6,0],[1,7,9,9,7,6],[4,8,6,8,10,6,10,7,6],[10,6,0,10,7,6],[9,7,6,10,7,9],[4,13,2,2,13,7],[2,13,7,2,0,13],[2,8,7,8,13,7],[2,4,1,2,1,7],[1,7,2],[1,7,2],[2,4,8,2,10,7],[10,7,2],[10,7,2],[4,13,9,9,13,11,11,13,7],[11,0,13,11,13,7],[11,8,13,11,13,7],[9,4,1,11,1,7],[1,7,11],[1,7,11],[9,4,8,11,
10,7],[10,7,11],[10,7,11],[4,3,6,4,13,3],[3,6,0,3,0,13],[3,6,9,3,8,13],[3,4,1,3,6,4],[0,3,6],[9,3,6],[3,6,8,8,6,4],[0,3,6],[9,3,6],[3,2,13,13,2,4],[0,13,3],[8,13,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,13,9,4,13],[0,13,3],[8,13,3],[9,4,1],[],[],[9,4,8],[],[],[4,11,6,4,10,11,4,13,10],[11,6,0,10,0,13],[11,6,9,10,8,13],[11,6,4,11,4,1],[0,11,6],[9,11,6],[11,6,8,8,6,4],[0,11,6],[9,11,6],[10,4,13,10,2,4],[0,13,10],[8,13,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,13,9,4,13],[0,13,10],[8,13,10],[9,4,1],[],[],[9,4,
8],[],[],[7,6,12,13,7,12],[0,7,6,0,13,7],[8,13,7,9,8,7,9,7,6],[12,1,6,1,7,6],[1,7,6,1,6,0],[1,7,9,9,7,6],[8,10,6,12,8,6,10,7,6],[10,6,0,10,7,6],[9,7,6,10,7,9],[12,13,2,2,13,7],[2,13,7,2,0,13],[2,8,7,8,13,7],[2,1,7,2,12,1],[1,7,2],[1,7,2],[2,10,7,2,12,8],[10,7,2],[10,7,2],[12,13,9,11,13,7,9,13,11],[11,0,13,11,13,7],[11,8,13,11,13,7],[9,12,1,11,1,7],[1,7,11],[1,7,11],[9,12,8,11,10,7],[10,7,11],[10,7,11],[12,3,6,12,13,3],[3,6,0,3,0,13],[3,6,9,3,8,13],[3,6,12,3,12,1],[0,3,6],[9,3,6],[3,6,8,8,6,12],[0,
3,6],[9,3,6],[3,12,13,3,2,12],[0,13,3],[8,13,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,13,9,12,13],[0,13,3],[8,13,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,6,12,10,11,12,13,10],[11,6,0,10,0,13],[11,6,9,10,8,13],[11,12,1,11,6,12],[0,11,6],[9,11,6],[11,6,12,11,12,8],[0,11,6],[9,11,6],[10,2,12,10,12,13],[0,13,10],[8,13,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,13,10,9,12],[0,13,10],[8,13,10],[9,12,1],[],[],[9,12,8],[],[],[7,14,17],[17,7,0,0,7,14],[17,7,12,12,7,8,8,7,9,14,9,7],[17,1,14,17,7,1,1,7,14],[1,17,
7,1,0,17,1,14,0,1,7,14],[1,12,7,1,7,9,7,14,9,12,17,7],[17,8,14,17,13,8,17,7,13,14,8,10,14,10,7],[7,14,10,13,0,17,13,17,7,0,10,14],[13,17,7,13,12,17,10,7,14,10,14,9],[2,17,7],[2,0,7,0,17,7],[2,8,7,8,12,7,12,17,7],[2,1,7,2,17,1,1,17,7],[1,7,2,1,17,7,1,0,17],[1,7,2,1,12,7,12,17,7],[2,10,7,2,17,8,8,17,13,13,17,7],[13,0,17,13,17,7,10,7,2],[13,12,17,13,17,7,10,7,2],[11,9,7,17,7,9],[11,0,7,0,17,7],[8,12,7,11,8,7,12,17,7],[9,17,1,1,17,7,11,1,7],[1,7,11,1,17,7,1,0,17],[1,7,11,1,12,7,12,17,7],[9,17,8,13,17,
7,8,17,13,11,10,7],[13,0,17,13,17,7,10,7,11],[13,12,17,13,17,7,10,7,11],[14,17,3,3,17,7],[3,0,7,3,14,0,0,17,7],[3,8,7,3,14,9,8,12,7,12,17,7],[3,14,1,14,17,1,1,17,7],[1,17,7,1,0,17,0,3,14],[1,12,7,12,17,7,9,3,14],[3,14,8,14,17,8,13,17,7,8,17,13],[13,0,17,13,17,7,0,3,14],[13,12,17,13,17,7,9,3,14],[3,17,7,3,2,17],[0,17,7,0,7,3],[8,7,3,12,7,8,12,17,7],[2,17,1,1,17,7],[1,17,7,1,0,17],[1,12,7,12,17,7],[2,17,8,8,17,13,13,17,7],[13,0,17,13,17,7],[13,12,17,13,17,7],[3,9,7,7,9,17],[0,17,7,0,7,3],[8,7,3,12,
7,8,12,17,7],[9,17,1,1,17,7],[1,17,7,1,0,17],[1,12,7,12,17,7],[8,17,13,9,17,8,13,17,7],[13,0,17,13,17,7],[13,12,17,13,17,7],[14,10,11,17,10,14,17,7,10],[11,14,0,0,17,7,10,0,7],[11,14,9,8,12,7,10,8,7,12,17,7],[11,14,1,14,17,1,1,17,7],[1,17,7,1,0,17,0,11,14],[1,12,7,12,17,7,9,11,14],[11,14,8,14,17,8,8,17,13,13,17,7],[13,0,17,13,17,7,0,11,14],[13,12,17,13,17,7,9,11,14],[2,17,10,7,10,17],[0,17,7,0,7,10],[8,7,10,12,7,8,12,17,7],[2,17,1,1,17,7],[1,17,7,1,0,17],[1,12,7,12,17,7],[2,17,8,8,17,13,13,17,7],
[13,0,17,13,17,7],[13,12,17,13,17,7],[10,17,7,10,9,17],[0,17,7,0,7,10],[8,7,10,12,7,8,12,17,7],[9,17,1,1,17,7],[1,17,7,1,0,17],[1,12,7,12,17,7],[8,17,13,9,17,8,13,17,7],[13,0,17,13,17,7],[13,12,17,13,17,7],[4,7,14],[4,7,0,0,7,14],[4,7,8,8,7,9,9,7,14],[4,7,1,4,1,14,1,7,14],[1,4,7,1,7,14,1,14,0],[1,4,7,1,7,9,9,7,14],[4,7,13,4,8,14,8,10,14,10,7,14],[10,14,0,10,7,14,13,4,7],[10,14,9,10,7,14,13,4,7],[4,7,2],[2,0,7,0,4,7],[2,8,7,8,4,7],[2,4,1,2,1,7,1,4,7],[1,7,2,1,4,7],[1,7,2,1,4,7],[2,4,8,2,10,7,13,4,
7],[10,7,2,13,4,7],[10,7,2,13,4,7],[4,7,9,9,7,11],[11,0,7,0,4,7],[8,4,7,11,8,7],[9,4,1,1,4,7,11,1,7],[1,7,11,1,4,7],[1,7,11,1,4,7],[9,4,8,11,10,7,13,4,7],[10,7,11,13,4,7],[10,7,11,13,4,7],[4,7,3,4,3,14],[3,0,4,3,4,7,3,14,0],[3,8,7,3,14,9,8,4,7],[3,14,1,14,4,1,1,4,7],[1,4,7,0,3,14],[1,4,7,9,3,14],[3,14,8,8,14,4,13,4,7],[0,3,14,13,4,7],[9,3,14,13,4,7],[3,2,4,3,4,7],[0,4,3,7,3,4],[7,3,8,7,8,4],[2,4,1,1,4,7],[1,4,7],[1,4,7],[2,4,8,13,4,7],[13,4,7],[13,4,7],[3,9,4,3,4,7],[0,4,3,7,3,4],[7,3,8,7,8,4],[9,
4,1,1,4,7],[1,4,7],[1,4,7],[9,4,8,13,4,7],[13,4,7],[13,4,7],[4,7,10,4,10,11,4,11,14],[10,4,7,10,0,4,11,14,0],[10,8,7,8,4,7,11,14,9],[11,14,4,11,4,1,1,4,7],[1,4,7,0,11,14],[1,4,7,9,11,14],[11,14,8,8,14,4,13,4,7],[0,11,14,13,4,7],[9,11,14,13,4,7],[10,4,7,10,2,4],[0,4,10,7,10,4],[7,8,4,7,10,8],[2,4,1,1,4,7],[1,4,7],[1,4,7],[2,4,8,13,4,7],[13,4,7],[13,4,7],[10,4,7,10,9,4],[0,4,10,7,10,4],[7,8,4,7,10,8],[9,4,1,1,4,7],[1,4,7],[1,4,7],[9,4,8,13,4,7],[13,4,7],[13,4,7],[16,7,12,14,12,7],[16,7,0,0,7,14],[8,
7,9,16,7,8,9,7,14],[12,1,14,1,7,14,16,7,1],[1,16,7,1,7,14,1,14,0],[1,16,7,1,7,9,9,7,14],[12,8,14,10,7,14,8,10,14,16,7,13],[10,14,0,10,7,14,13,16,7],[10,14,9,10,7,14,13,16,7],[12,7,2,16,7,12],[2,0,7,0,16,7],[2,8,7,8,16,7],[2,1,7,2,12,1,1,16,7],[1,7,2,1,16,7],[1,7,2,1,16,7],[2,10,7,2,12,8,13,16,7],[10,7,2,13,16,7],[10,7,2,13,16,7],[9,12,11,12,16,11,16,7,11],[11,0,7,0,16,7],[8,16,7,11,8,7],[9,12,1,1,16,7,11,1,7],[1,7,11,1,16,7],[1,7,11,1,16,7],[9,12,8,11,10,7,13,16,7],[10,7,11,13,16,7],[10,7,11,13,16,
7],[16,3,12,16,7,3,12,3,14],[3,16,7,3,0,16,3,14,0],[3,8,7,3,14,9,8,16,7],[3,14,12,3,12,1,1,16,7],[1,16,7,0,3,14],[1,16,7,9,3,14],[3,14,8,8,14,12,13,16,7],[0,3,14,13,16,7],[9,3,14,13,16,7],[3,16,7,3,12,16,3,2,12],[0,16,3,7,3,16],[7,3,8,7,8,16],[2,12,1,1,16,7],[1,16,7],[1,16,7],[2,12,8,13,16,7],[13,16,7],[13,16,7],[3,16,7,3,12,16,3,9,12],[0,16,3,7,3,16],[7,3,8,7,8,16],[9,12,1,1,16,7],[1,16,7],[1,16,7],[9,12,8,13,16,7],[13,16,7],[13,16,7],[16,10,12,16,7,10,12,11,14,12,10,11],[10,0,16,10,16,7,11,14,0],
[10,16,7,10,8,16,11,14,9],[11,12,1,11,14,12,1,16,7],[1,16,7,0,11,14],[1,16,7,9,11,14],[11,14,12,11,12,8,13,16,7],[0,11,14,13,16,7],[9,11,14,13,16,7],[10,12,16,10,16,7,10,2,12],[0,16,10,7,10,16],[7,10,16,16,10,8],[2,12,1,1,16,7],[1,16,7],[1,16,7],[2,12,8,13,16,7],[13,16,7],[13,16,7],[10,12,16,10,16,7,10,9,12],[0,16,10,7,10,16],[7,10,16,16,10,8],[9,12,1,1,16,7],[1,16,7],[1,16,7],[9,12,8,13,16,7],[13,16,7],[13,16,7],[17,5,14,5,7,14],[5,7,0,5,0,17,0,7,14],[5,7,8,5,12,17,8,7,9,9,7,14],[5,1,17,1,14,17,
1,7,14],[1,7,14,1,14,0,0,17,5],[1,7,9,9,7,14,12,17,5],[5,8,17,8,14,17,8,10,14,10,7,14],[10,14,0,10,7,14,0,17,5],[10,14,9,10,7,14,12,17,5],[5,7,2,5,2,17],[2,0,5,2,5,7,0,17,5],[2,8,7,8,5,7,12,17,5],[2,17,1,2,1,7,17,5,1],[1,7,2,0,17,5],[1,7,2,12,17,5],[2,17,8,2,10,7,8,17,5],[0,17,5,10,7,2],[12,17,5,10,7,2],[5,7,11,5,11,9,5,9,17],[11,5,7,11,0,5,0,17,5],[11,8,7,8,5,7,12,17,5],[9,17,5,9,5,1,11,1,7],[1,7,11,0,17,5],[1,7,11,12,17,5],[9,17,8,8,17,5,11,10,7],[0,17,5,10,7,11],[12,17,5,10,7,11],[5,3,14,5,14,
17],[3,0,5,3,14,0,0,17,5],[3,8,5,3,14,9,12,17,5],[3,14,1,14,17,1,1,17,5],[0,17,5,0,3,14],[9,3,14,12,17,5],[3,14,8,8,17,5,14,17,8],[0,17,5,0,3,14],[9,3,14,12,17,5],[3,2,5,2,17,5],[0,5,3,17,5,0],[8,5,3,17,5,12],[2,17,1,17,5,1],[0,17,5],[12,17,5],[2,17,8,8,17,5],[0,17,5],[12,17,5],[3,9,5,9,17,5],[0,5,3,17,5,0],[8,5,3,17,5,12],[9,5,1,9,17,5],[0,17,5],[12,17,5],[8,17,5,9,17,8],[0,17,5],[12,17,5],[5,10,17,17,10,14,10,11,14],[10,0,5,0,17,5,11,14,0],[10,8,5,11,14,9,12,17,5],[11,14,1,14,17,1,1,17,5],[0,17,
5,0,11,14],[9,11,14,12,17,5],[8,17,5,14,17,8,11,14,8],[0,17,5,0,11,14],[9,11,14,12,17,5],[10,2,5,2,17,5],[0,5,10,17,5,0],[17,5,12,8,5,10],[2,17,1,17,5,1],[0,17,5],[12,17,5],[2,17,8,8,17,5],[0,17,5],[12,17,5],[10,9,5,9,17,5],[0,5,10,17,5,0],[17,5,12,8,5,10],[9,5,1,9,17,5],[0,17,5],[12,17,5],[8,17,5,9,17,8],[0,17,5],[12,17,5],[5,7,14,5,14,4],[0,7,14,0,5,7],[8,5,7,9,8,7,9,7,14],[4,1,14,1,7,14],[1,7,14,1,14,0],[1,7,9,9,7,14],[4,8,14,8,10,14,10,7,14],[10,14,0,10,7,14],[10,14,9,10,7,14],[4,5,2,2,5,7],[2,
5,7,2,0,5],[2,8,7,8,5,7],[2,4,1,2,1,7],[1,7,2],[1,7,2],[2,4,8,2,10,7],[10,7,2],[10,7,2],[4,5,9,9,5,11,11,5,7],[11,0,5,11,5,7],[8,5,7,11,8,7],[9,4,1,11,1,7],[1,7,11],[1,7,11],[9,4,8,11,10,7],[10,7,11],[10,7,11],[4,5,3,4,3,14],[3,14,0,3,0,5],[3,14,9,3,8,5],[3,14,1,14,4,1],[0,3,14],[9,3,14],[3,14,8,8,14,4],[0,3,14],[9,3,14],[3,2,4,3,4,5],[0,5,3],[8,5,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,5,9,4,5],[0,5,3],[8,5,3],[9,4,1],[],[],[9,4,8],[],[],[4,5,10,4,11,14,4,10,11],[11,14,0,10,0,5],[11,14,9,10,8,5],[11,
14,4,11,4,1],[0,11,14],[9,11,14],[11,14,8,8,14,4],[0,11,14],[9,11,14],[10,4,5,10,2,4],[0,5,10],[8,5,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,5,9,4,5],[0,5,10],[8,5,10],[9,4,1],[],[],[9,4,8],[],[],[5,7,12,7,14,12],[0,7,14,0,5,7],[8,5,7,9,8,7,9,7,14],[12,1,14,1,7,14],[1,7,14,1,14,0],[1,7,9,9,7,14],[8,10,14,12,8,14,10,7,14],[10,14,0,10,7,14],[10,14,9,10,7,14],[12,5,2,2,5,7],[2,5,7,2,0,5],[2,8,7,8,5,7],[2,1,7,2,12,1],[1,7,2],[1,7,2],[2,10,7,2,12,8],[10,7,2],[10,7,2],[12,5,9,9,5,11,11,5,7],[11,0,5,11,5,7],
[8,5,7,11,8,7],[9,12,1,11,1,7],[1,7,11],[1,7,11],[9,12,8,11,10,7],[10,7,11],[10,7,11],[12,3,14,12,5,3],[3,14,0,3,0,5],[3,14,9,3,8,5],[3,14,12,3,12,1],[0,3,14],[9,3,14],[3,14,8,8,14,12],[0,3,14],[9,3,14],[3,12,5,3,2,12],[0,5,3],[8,5,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,5,9,12,5],[0,5,3],[8,5,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,14,12,10,11,12,5,10],[11,14,0,10,0,5],[11,14,9,10,8,5],[11,12,1,11,14,12],[0,11,14],[9,11,14],[11,14,12,11,12,8],[0,11,14],[9,11,14],[10,2,12,10,12,5],[0,5,10],[8,5,10],
[2,12,1],[],[],[2,12,8],[],[],[10,12,5,10,9,12],[0,5,10],[8,5,10],[9,12,1],[],[],[9,12,8],[],[],[16,13,14,17,16,14,14,13,7],[16,0,17,0,7,14,13,7,0],[16,12,17,8,7,9,13,7,8,9,7,14],[1,17,16,1,14,17,1,7,14],[1,7,14,1,14,0,0,17,16],[1,7,9,9,7,14,12,17,16],[16,8,17,8,14,17,8,10,14,10,7,14],[10,14,0,10,7,14,0,17,16],[10,14,9,10,7,14,12,17,16],[16,13,2,16,2,17,13,7,2],[2,13,7,2,0,13,0,17,16],[2,8,7,12,17,16,8,13,7],[2,17,16,2,16,1,2,1,7],[1,7,2,0,17,16],[1,7,2,12,17,16],[2,17,8,2,10,7,8,17,16],[0,17,16,
10,7,2],[12,17,16,10,7,2],[16,13,9,16,9,17,13,11,9,13,7,11],[11,0,13,11,13,7,0,17,16],[11,13,7,11,8,13,12,17,16],[9,16,1,9,17,16,11,1,7],[1,7,11,0,17,16],[1,7,11,12,17,16],[9,17,16,9,16,8,11,10,7],[0,17,16,10,7,11],[12,17,16,10,7,11],[13,14,16,13,3,14,16,14,17],[3,14,0,3,0,13,0,17,16],[3,14,9,3,8,13,12,17,16],[3,14,1,14,17,1,17,16,1],[0,17,16,0,3,14],[9,3,14,12,17,16],[3,14,8,8,17,16,14,17,8],[0,17,16,0,3,14],[9,3,14,12,17,16],[3,2,13,13,2,16,2,17,16],[0,13,3,17,16,0],[8,13,3,17,16,12],[2,17,16,2,
16,1],[0,17,16],[12,17,16],[2,17,8,8,17,16],[0,17,16],[12,17,16],[3,9,13,13,9,16,9,17,16],[0,13,3,17,16,0],[8,13,3,17,16,12],[9,16,1,9,17,16],[0,17,16],[12,17,16],[9,16,8,9,17,16],[0,17,16],[12,17,16],[13,14,16,13,11,14,10,11,13,16,14,17],[10,0,13,0,17,16,11,14,0],[10,8,13,11,14,9,12,17,16],[11,14,1,14,17,1,17,16,1],[0,17,16,0,11,14],[9,11,14,12,17,16],[8,17,16,14,17,8,11,14,8],[0,17,16,0,11,14],[9,11,14,12,17,16],[10,2,13,13,2,16,2,17,16],[0,13,10,17,16,0],[17,16,12,8,13,10],[2,17,16,2,16,1],[0,
17,16],[12,17,16],[2,17,8,8,17,16],[0,17,16],[12,17,16],[10,9,13,13,9,16,9,17,16],[0,13,10,17,16,0],[17,16,12,8,13,10],[9,16,1,9,17,16],[0,17,16],[12,17,16],[9,16,8,9,17,16],[0,17,16],[12,17,16],[4,13,14,7,14,13],[0,7,14,0,13,7],[8,13,7,9,8,7,9,7,14],[4,1,14,1,7,14],[1,7,14,1,14,0],[1,7,9,9,7,14],[4,8,14,8,10,14,10,7,14],[10,14,0,10,7,14],[10,14,9,10,7,14],[4,13,2,2,13,7],[2,13,7,2,0,13],[2,8,7,8,13,7],[2,4,1,2,1,7],[1,7,2],[1,7,2],[2,4,8,2,10,7],[10,7,2],[10,7,2],[4,13,9,9,13,11,11,13,7],[11,0,13,
11,13,7],[11,8,13,11,13,7],[9,4,1,11,1,7],[1,7,11],[1,7,11],[9,4,8,11,10,7],[10,7,11],[10,7,11],[4,3,14,4,13,3],[3,14,0,3,0,13],[3,14,9,3,8,13],[3,14,1,14,4,1],[0,3,14],[9,3,14],[3,14,8,8,14,4],[0,3,14],[9,3,14],[3,2,13,13,2,4],[0,13,3],[8,13,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,13,9,4,13],[0,13,3],[8,13,3],[9,4,1],[],[],[9,4,8],[],[],[4,11,14,4,10,11,4,13,10],[11,14,0,10,0,13],[11,14,9,10,8,13],[11,14,4,11,4,1],[0,11,14],[9,11,14],[11,14,8,8,14,4],[0,11,14],[9,11,14],[10,4,13,10,2,4],[0,13,10],[8,
13,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,13,9,4,13],[0,13,10],[8,13,10],[9,4,1],[],[],[9,4,8],[],[],[13,7,14,13,14,12],[0,7,14,0,13,7],[8,13,7,9,8,7,9,7,14],[12,1,14,1,7,14],[1,7,14,1,14,0],[1,7,9,9,7,14],[8,10,14,12,8,14,10,7,14],[10,14,0,10,7,14],[10,14,9,10,7,14],[12,13,2,2,13,7],[2,13,7,2,0,13],[2,8,7,8,13,7],[2,1,7,2,12,1],[1,7,2],[1,7,2],[2,10,7,2,12,8],[10,7,2],[10,7,2],[12,13,9,11,13,7,9,13,11],[11,0,13,11,13,7],[11,8,13,11,13,7],[9,12,1,11,1,7],[1,7,11],[1,7,11],[9,12,8,11,10,7],[10,7,11],
[10,7,11],[12,3,14,12,13,3],[3,14,0,3,0,13],[3,14,9,3,8,13],[3,14,12,3,12,1],[0,3,14],[9,3,14],[3,14,8,8,14,12],[0,3,14],[9,3,14],[3,12,13,3,2,12],[0,13,3],[8,13,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,13,9,12,13],[0,13,3],[8,13,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,14,12,10,11,12,13,10],[11,14,0,10,0,13],[11,14,9,10,8,13],[11,12,1,11,14,12],[0,11,14],[9,11,14],[11,14,12,11,12,8],[0,11,14],[9,11,14],[10,2,12,10,12,13],[0,13,10],[8,13,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,13,10,9,12],[0,13,10],
[8,13,10],[9,12,1],[],[],[9,12,8],[],[],[15,19,18],[19,18,0,19,0,15,0,18,15],[19,9,15,19,12,9,19,18,12,18,8,12,18,15,8,15,9,8],[18,1,19,1,15,19],[1,15,0,1,0,18,18,0,19,0,15,19],[1,15,9,1,12,18,18,12,19,15,19,9,12,9,19],[15,8,10,19,8,15,19,18,8,18,13,8],[13,0,18,18,0,19,0,15,19,0,10,15],[13,12,18,18,12,19,12,9,19,15,19,9,10,15,9],[19,18,2,2,18,15],[2,0,15,2,19,0,0,19,18,0,18,15],[2,8,15,2,19,12,12,19,18,12,18,8,15,8,18],[2,1,15,2,18,1,2,19,18],[1,15,2,1,0,18,18,0,19,0,2,19],[1,15,2,1,12,18,12,2,19,
18,12,19],[2,19,8,2,10,15,13,8,18,19,18,8],[13,0,18,18,0,19,0,2,19,10,15,2],[12,2,19,18,12,19,13,12,18,10,15,2],[15,11,9,18,15,9,18,9,14,19,18,14],[14,19,0,19,18,0,0,18,15,0,15,11],[14,19,12,12,19,18,12,18,8,15,8,18,11,8,15],[11,1,15,1,9,18,14,18,9,14,19,18],[1,15,11,1,0,18,0,19,18,0,14,19],[1,15,11,1,12,18,12,14,19,18,12,19],[11,10,15,9,13,8,9,14,13,14,18,13,14,19,18],[13,0,18,0,19,18,0,14,19,10,15,11],[12,14,19,18,12,19,13,12,18,10,15,11],[3,19,18],[3,0,18,3,19,0,0,19,18],[3,8,18,3,19,9,9,19,12,
12,18,8,12,19,18],[3,19,1,1,19,18],[1,0,18,18,0,19,0,3,19],[1,12,18,9,3,19,12,9,19,18,12,19],[3,19,8,13,8,18,18,8,19],[13,0,18,18,0,19,0,3,19],[9,3,19,12,9,19,18,12,19,13,12,18],[3,2,18,2,19,18],[2,19,0,0,19,18,0,18,3],[2,19,12,8,18,3,12,18,8,12,19,18],[2,19,18,2,18,1],[1,0,18,18,0,19,0,2,19],[1,12,18,12,2,19,18,12,19],[2,19,8,8,18,13,19,18,8],[13,0,18,18,0,19,0,2,19],[12,2,19,18,12,19,13,12,18],[3,9,18,14,19,18,14,18,9],[14,19,0,19,18,0,0,18,3],[8,18,3,12,18,8,12,19,18,14,19,12],[9,18,1,14,18,9,
14,19,18],[1,0,18,0,19,18,0,14,19],[1,12,18,12,14,19,18,12,19],[9,13,8,9,14,13,14,18,13,14,19,18],[13,0,18,0,19,18,0,14,19],[12,14,19,18,12,19,13,12,18],[18,10,11,19,18,11],[11,19,0,0,19,18,0,18,10],[11,19,9,12,19,18,9,19,12,12,18,8,10,8,18],[1,11,19,1,19,18],[1,0,18,18,0,19,0,11,19],[1,12,18,9,11,19,12,9,19,18,12,19],[13,8,18,18,8,19,11,19,8],[13,0,18,18,0,19,0,11,19],[9,11,19,12,9,19,18,12,19,13,12,18],[2,18,10,2,19,18],[2,19,0,0,19,18,0,18,10],[2,19,12,8,18,10,12,18,8,12,19,18],[2,19,18,2,18,1],
[1,0,18,18,0,19,0,2,19],[1,12,18,12,2,19,18,12,19],[2,19,8,8,18,13,19,18,8],[13,0,18,18,0,19,0,2,19],[12,2,19,18,12,19,13,12,18],[14,19,18,14,18,9,10,9,18],[14,19,0,19,18,0,0,18,10],[8,18,10,12,18,8,12,19,18,14,19,12],[9,18,1,14,18,9,14,19,18],[1,0,18,0,19,18,0,14,19],[1,12,18,12,14,19,18,12,19],[9,13,8,9,14,13,14,18,13,14,19,18],[13,0,18,0,19,18,0,14,19],[12,14,19,18,12,19,13,12,18],[19,4,15,4,18,15],[4,18,0,4,0,19,0,15,19,0,18,15],[4,18,8,4,9,19,9,15,19,9,8,15,15,8,18],[4,15,19,4,1,15,4,18,1],[1,
4,18,1,15,0,15,19,0,0,19,4],[1,4,18,1,15,9,9,19,4,15,19,9],[4,8,19,4,18,13,10,15,8,19,8,15],[10,15,0,15,19,0,0,19,4,13,4,18],[9,19,4,15,19,9,10,15,9,13,4,18],[4,18,15,4,15,2,4,2,19],[2,19,4,2,0,15,15,0,18,0,4,18],[2,19,4,2,8,15,8,4,18,15,8,18],[2,4,1,2,19,4,2,1,15,1,4,18],[1,15,2,1,4,18,19,4,2],[1,15,2,1,4,18,19,4,2],[2,4,8,2,19,4,2,10,15,13,4,18],[19,4,2,10,15,2,13,4,18],[19,4,2,10,15,2,13,4,18],[4,18,9,4,14,19,11,9,15,18,15,9],[11,0,15,15,0,18,0,4,18,14,19,4],[8,4,18,15,8,18,11,8,15,14,19,4],[9,
4,1,1,4,18,11,1,15,14,19,4],[1,15,11,1,4,18,19,4,14],[1,15,11,1,4,18,19,4,14],[9,4,8,11,10,15,13,4,18,14,19,4],[10,15,11,13,4,18,19,4,14],[10,15,11,13,4,18,19,4,14],[4,18,3,4,3,19],[3,19,0,3,0,18,19,4,0,0,4,18],[3,19,9,3,8,18,9,19,4,18,8,4],[3,4,1,3,19,4,1,4,18],[1,4,18,0,19,4,0,3,19],[1,4,18,19,9,3,19,4,9],[3,4,8,3,19,4,13,4,18],[0,19,4,0,3,19,13,4,18],[19,9,3,13,4,18,19,4,9],[3,2,4,3,4,18,2,19,4],[2,19,4,0,4,18,0,18,3],[2,19,4,18,3,8,18,8,4],[2,19,4,2,4,1,1,4,18],[1,4,18,19,4,2],[1,4,18,19,4,2],
[2,19,4,2,4,8,13,4,18],[19,4,2,13,4,18],[19,4,2,13,4,18],[3,9,4,3,4,18,14,19,4],[0,4,18,0,18,3,14,19,4],[18,3,8,14,19,4,18,8,4],[9,4,1,1,4,18,14,19,4],[1,4,18,19,4,14],[1,4,18,19,4,14],[9,4,8,13,4,18,14,19,4],[13,4,18,19,4,14],[13,4,18,19,4,14],[4,18,10,4,10,11,4,11,19],[11,19,4,11,4,0,0,4,10,18,10,4],[11,19,9,9,19,4,18,8,4,10,8,18],[1,4,18,11,4,1,11,19,4],[1,4,18,0,11,4,19,4,11],[1,4,18,19,4,9,19,9,11],[11,4,8,11,19,4,13,4,18],[0,11,4,13,4,18,19,4,11],[13,4,18,19,4,9,19,9,11],[2,19,4,10,2,4,10,4,
18],[2,19,4,0,4,10,18,10,4],[2,19,4,18,8,4,18,10,8],[2,19,4,2,4,1,1,4,18],[1,4,18,19,4,2],[1,4,18,19,4,2],[2,19,4,2,4,8,13,4,18],[19,4,2,13,4,18],[19,4,2,13,4,18],[10,9,4,10,4,18,14,19,4],[0,4,10,14,19,4,18,10,4],[14,19,4,18,8,4,18,10,8],[9,4,1,1,4,18,14,19,4],[1,4,18,19,4,14],[1,4,18,19,4,14],[9,4,8,13,4,18,14,19,4],[13,4,18,19,4,14],[13,4,18,19,4,14],[19,17,15,17,12,15,15,12,16,18,15,16],[0,19,17,0,15,19,0,18,15,0,16,18],[17,9,19,9,15,19,9,8,15,15,8,18,16,18,8],[16,18,1,1,15,12,15,17,12,15,19,17],
[1,16,18,1,15,0,15,19,0,19,17,0],[1,16,18,1,15,9,9,19,17,15,19,9],[16,18,13,10,12,8,10,15,12,15,19,17,15,17,12],[10,15,0,15,19,0,19,17,0,13,16,18],[9,19,17,15,19,9,10,15,9,13,16,18],[17,2,19,2,12,15,15,12,16,15,16,18],[2,19,17,2,0,15,15,0,18,18,0,16],[2,19,17,2,8,15,8,16,18,15,8,18],[2,19,17,2,1,15,2,12,1,1,16,18],[1,15,2,1,16,18,19,17,2],[1,15,2,1,16,18,19,17,2],[2,19,17,2,10,15,2,12,8,13,16,18],[19,17,2,10,15,2,13,16,18],[19,17,2,10,15,2,13,16,18],[17,14,19,11,9,12,11,12,15,15,16,18,15,12,16],[11,
0,15,15,0,18,18,0,16,14,19,17],[8,16,18,15,8,18,11,8,15,14,19,17],[9,12,1,1,16,18,11,1,15,14,19,17],[1,15,11,1,16,18,19,17,14],[1,15,11,1,16,18,19,17,14],[9,12,8,11,10,15,13,16,18,14,19,17],[10,15,11,13,16,18,19,17,14],[10,15,11,13,16,18,19,17,14],[17,12,3,17,3,19,3,16,18,12,16,3],[3,19,17,3,17,0,3,0,16,3,16,18],[3,19,9,3,8,18,9,19,17,18,8,16],[3,19,17,3,17,12,3,12,1,1,16,18],[1,16,18,0,3,17,19,17,3],[1,16,18,19,9,3,19,17,9],[3,19,17,3,17,12,3,12,8,13,16,18],[0,3,17,19,17,3,13,16,18],[19,9,3,13,16,
18,19,17,9],[3,16,18,3,12,16,3,2,12,2,19,17],[2,19,17,0,16,3,18,3,16],[2,19,17,18,3,8,18,8,16],[2,19,17,2,12,1,1,16,18],[1,16,18,19,17,2],[1,16,18,19,17,2],[2,19,17,2,12,8,13,16,18],[19,17,2,13,16,18],[19,17,2,13,16,18],[3,16,18,3,12,16,3,9,12,14,19,17],[0,16,3,18,3,16,14,19,17],[18,3,8,14,19,17,18,8,16],[9,12,1,1,16,18,14,19,17],[1,16,18,19,17,14],[1,16,18,19,17,14],[9,12,8,13,16,18,14,19,17],[13,16,18,19,17,14],[13,16,18,19,17,14],[17,12,11,17,11,19,12,10,11,16,10,12,16,18,10],[11,17,0,11,19,17,
0,16,10,18,10,16],[11,19,17,11,17,9,10,16,18,10,8,16],[1,16,18,11,19,17,11,17,12,11,12,1],[1,16,18,0,11,17,19,17,11],[1,16,18,17,9,11,19,17,11],[11,19,17,11,17,12,11,12,8,13,16,18],[0,11,17,13,16,18,19,17,11],[13,16,18,17,9,11,19,17,11],[2,19,17,10,16,18,10,12,16,10,2,12],[2,19,17,0,16,10,18,10,16],[2,19,17,16,10,8,18,10,16],[2,19,17,2,12,1,1,16,18],[1,16,18,19,17,2],[1,16,18,19,17,2],[2,19,17,2,12,8,13,16,18],[19,17,2,13,16,18],[19,17,2,13,16,18],[10,16,18,10,12,16,10,9,12,14,19,17],[0,16,10,14,
19,17,18,10,16],[14,19,17,16,10,8,18,10,16],[9,12,1,1,16,18,14,19,17],[1,16,18,19,17,14],[1,16,18,19,17,14],[9,12,8,13,16,18,14,19,17],[13,16,18,19,17,14],[13,16,18,19,17,14],[5,15,19],[5,15,0,5,0,19,0,15,19],[5,15,8,5,12,19,12,9,19,9,8,15,9,15,19],[5,1,19,1,15,19],[1,15,0,15,19,0,0,19,5],[1,15,9,9,19,12,15,19,9,12,19,5],[5,8,19,10,15,8,15,19,8],[10,15,0,15,19,0,0,19,5],[9,19,12,15,19,9,10,15,9,12,19,5],[5,15,2,5,2,19],[2,19,0,2,0,15,19,5,0,0,5,15],[2,19,12,2,8,15,12,19,5,15,8,5],[2,5,1,2,19,5,2,
1,15],[1,15,2,0,19,5,0,2,19],[1,15,2,19,12,2,19,5,12],[2,5,8,2,19,5,2,10,15],[0,19,5,0,2,19,10,15,2],[19,12,2,10,15,2,19,5,12],[5,15,11,5,11,9,5,9,14,5,14,19],[14,19,5,14,5,0,0,5,11,15,11,5],[14,19,12,12,19,5,15,8,5,11,8,15],[11,1,15,9,5,1,14,5,9,14,19,5],[1,15,11,0,14,5,19,5,14],[1,15,11,19,5,12,19,12,14],[11,10,15,9,5,8,14,5,9,14,19,5],[0,14,5,10,15,11,19,5,14],[10,15,11,19,5,12,19,12,14],[5,3,19],[3,0,5,3,19,0,0,19,5],[3,8,5,3,19,9,9,19,12,12,19,5],[3,19,1,1,19,5],[0,19,5,0,3,19],[9,3,19,12,9,
19,12,19,5],[3,19,8,19,5,8],[0,19,5,0,3,19],[9,3,19,12,9,19,12,19,5],[3,2,5,2,19,5],[2,19,0,19,5,0,0,5,3],[2,19,12,12,19,5,8,5,3],[2,19,5,2,5,1],[0,19,5,0,2,19],[19,12,2,19,5,12],[2,19,5,2,5,8],[0,19,5,0,2,19],[19,12,2,19,5,12],[3,9,5,9,14,5,14,19,5],[14,5,0,14,19,5,0,5,3],[12,19,5,14,19,12,8,5,3],[9,5,1,14,5,9,14,19,5],[0,14,5,19,5,14],[19,12,14,19,5,12],[9,5,8,14,5,9,14,19,5],[0,14,5,19,5,14],[19,12,14,19,5,12],[5,11,19,5,10,11],[10,0,5,0,19,5,11,19,0],[10,8,5,9,19,12,11,19,9,12,19,5],[1,11,5,19,
5,11],[0,19,5,0,11,19],[9,11,19,12,9,19,12,19,5],[19,5,8,11,19,8],[0,19,5,0,11,19],[9,11,19,12,9,19,12,19,5],[10,2,5,2,19,5],[2,19,0,19,5,0,0,5,10],[2,19,12,12,19,5,8,5,10],[2,19,5,2,5,1],[0,19,5,0,2,19],[19,12,2,19,5,12],[2,19,5,2,5,8],[0,19,5,0,2,19],[19,12,2,19,5,12],[10,9,5,9,14,5,14,19,5],[14,5,0,14,19,5,0,5,10],[12,19,5,14,19,12,8,5,10],[9,5,1,14,5,9,14,19,5],[0,14,5,19,5,14],[19,12,14,19,5,12],[9,5,8,14,5,9,14,19,5],[0,14,5,19,5,14],[19,12,14,19,5,12],[5,15,4,4,15,19],[4,0,19,0,15,19,0,5,15],
[4,9,19,8,5,15,9,8,15,9,15,19],[4,15,19,4,1,15],[1,15,0,15,19,0,0,19,4],[1,15,9,9,19,4,15,19,9],[4,8,19,8,10,15,19,8,15],[10,15,0,15,19,0,0,19,4],[9,19,4,15,19,9,10,15,9],[4,5,2,4,2,19,2,5,15],[2,19,4,2,0,15,15,0,5],[2,19,4,2,8,15,8,5,15],[2,4,1,2,19,4,2,1,15],[1,15,2,19,4,2],[1,15,2,19,4,2],[2,4,8,2,19,4,2,10,15],[19,4,2,10,15,2],[19,4,2,10,15,2],[4,5,9,4,14,19,9,5,11,11,5,15],[11,0,5,11,5,15,14,19,4],[8,5,15,11,8,15,14,19,4],[9,4,1,11,1,15,14,19,4],[1,15,11,19,4,14],[1,15,11,19,4,14],[9,4,8,11,
10,15,14,19,4],[10,15,11,19,4,14],[10,15,11,19,4,14],[4,5,3,4,3,19],[3,19,0,3,0,5,19,4,0],[3,19,9,3,8,5,9,19,4],[3,4,1,3,19,4],[0,19,4,0,3,19],[19,9,3,19,4,9],[3,4,8,3,19,4],[0,19,4,0,3,19],[19,9,3,19,4,9],[3,2,4,3,4,5,2,19,4],[2,19,4,0,5,3],[2,19,4,8,5,3],[2,19,4,2,4,1],[19,4,2],[19,4,2],[2,19,4,2,4,8],[19,4,2],[19,4,2],[3,9,5,9,4,5,14,19,4],[0,5,3,14,19,4],[8,5,3,14,19,4],[9,4,1,14,19,4],[19,4,14],[19,4,14],[9,4,8,14,19,4],[19,4,14],[19,4,14],[4,5,10,4,11,19,4,10,11],[11,19,4,11,4,0,10,0,5],[11,
19,9,9,19,4,10,8,5],[11,19,4,11,4,1],[0,11,4,19,4,11],[19,9,11,19,4,9],[11,19,4,11,4,8],[0,11,4,19,4,11],[19,9,11,19,4,9],[10,4,5,10,2,4,2,19,4],[2,19,4,0,5,10],[2,19,4,8,5,10],[2,19,4,2,4,1],[19,4,2],[19,4,2],[2,19,4,2,4,8],[19,4,2],[19,4,2],[10,9,5,9,4,5,14,19,4],[0,5,10,14,19,4],[8,5,10,14,19,4],[9,4,1,14,19,4],[19,4,14],[19,4,14],[9,4,8,14,19,4],[19,4,14],[19,4,14],[5,15,12,15,19,17,15,17,12],[0,19,17,0,15,19,0,5,15],[8,5,15,9,8,15,9,15,19,17,9,19],[12,1,15,12,15,17,17,15,19],[1,15,0,15,19,0,
19,17,0],[1,15,9,9,19,17,15,19,9],[8,10,12,12,10,15,12,15,17,17,15,19],[10,15,0,15,19,0,19,17,0],[9,19,17,15,19,9,10,15,9],[12,5,2,2,5,15,17,2,19],[2,19,17,2,0,15,15,0,5],[2,19,17,2,8,15,8,5,15],[2,19,17,2,1,15,2,12,1],[1,15,2,19,17,2],[1,15,2,19,17,2],[2,19,17,2,10,15,2,12,8],[19,17,2,10,15,2],[19,17,2,10,15,2],[12,5,9,9,5,11,17,14,19,11,5,15],[11,0,5,11,5,15,14,19,17],[8,5,15,11,8,15,14,19,17],[9,12,1,11,1,15,14,19,17],[1,15,11,19,17,14],[1,15,11,19,17,14],[9,12,8,11,10,15,14,19,17],[10,15,11,19,
17,14],[10,15,11,19,17,14],[17,12,3,17,3,19,12,5,3],[3,19,17,3,17,0,3,0,5],[3,19,9,3,8,5,9,19,17],[3,19,17,3,17,12,3,12,1],[0,3,17,19,17,3],[19,9,3,19,17,9],[3,19,17,3,17,12,3,12,8],[0,3,17,19,17,3],[19,9,3,19,17,9],[3,12,5,3,2,12,2,19,17],[2,19,17,0,5,3],[2,19,17,8,5,3],[2,19,17,2,12,1],[19,17,2],[19,17,2],[2,19,17,2,12,8],[19,17,2],[19,17,2],[3,9,5,14,19,17,9,12,5],[0,5,3,14,19,17],[8,5,3,14,19,17],[9,12,1,14,19,17],[19,17,14],[19,17,14],[9,12,8,14,19,17],[19,17,14],[19,17,14],[17,12,11,17,11,19,
12,10,11,12,5,10],[11,17,0,11,19,17,10,0,5],[11,19,17,11,17,9,10,8,5],[11,17,12,11,19,17,11,12,1],[0,11,17,19,17,11],[19,17,11,17,9,11],[11,17,12,11,19,17,11,12,8],[0,11,17,19,17,11],[19,17,11,17,9,11],[10,2,12,10,12,5,2,19,17],[2,19,17,0,5,10],[2,19,17,8,5,10],[2,19,17,2,12,1],[19,17,2],[19,17,2],[2,19,17,2,12,8],[19,17,2],[19,17,2],[10,12,5,10,9,12,14,19,17],[0,5,10,14,19,17],[8,5,10,14,19,17],[9,12,1,14,19,17],[19,17,14],[19,17,14],[9,12,8,14,19,17],[19,17,14],[19,17,14],[15,16,13,19,16,15],[16,
0,19,0,15,19,0,13,15],[16,12,19,9,15,19,12,9,19,9,8,15,13,15,8],[1,19,16,1,15,19],[1,15,0,15,19,0,0,19,16],[1,15,9,9,19,12,15,19,9,12,19,16],[10,15,8,15,19,8,16,8,19],[10,15,0,15,19,0,0,19,16],[9,19,12,15,19,9,10,15,9,12,19,16],[16,13,2,16,2,19,2,13,15],[2,19,16,2,16,0,2,0,13,2,13,15],[2,19,12,2,8,15,12,19,16,15,8,13],[2,19,16,2,16,1,2,1,15],[1,15,2,0,2,16,19,16,2],[1,15,2,19,12,2,19,16,12],[2,19,16,2,16,8,2,10,15],[0,2,16,19,16,2,10,15,2],[19,12,2,10,15,2,19,16,12],[16,13,9,16,9,14,16,14,19,13,11,
9,13,15,11],[14,16,0,14,19,16,0,13,11,15,11,13],[14,19,16,14,16,12,11,13,15,11,8,13],[11,1,15,14,19,16,14,16,9,9,16,1],[1,15,11,0,14,16,19,16,14],[1,15,11,16,12,14,19,16,14],[11,10,15,14,19,16,14,16,9,9,16,8],[0,14,16,10,15,11,19,16,14],[10,15,11,16,12,14,19,16,14],[13,3,16,3,19,16],[3,19,0,3,0,13,0,19,16],[3,19,9,3,8,13,9,19,12,12,19,16],[3,19,16,3,16,1],[0,19,16,0,3,19],[9,3,19,12,9,19,12,19,16],[3,19,8,19,16,8],[0,19,16,0,3,19],[9,3,19,12,9,19,12,19,16],[3,2,13,13,2,16,2,19,16],[2,19,16,2,16,0,
0,13,3],[2,19,12,12,19,16,8,13,3],[2,19,16,2,16,1],[0,2,16,19,16,2],[19,12,2,19,16,12],[2,19,16,2,16,8],[0,2,16,19,16,2],[19,12,2,19,16,12],[3,9,13,13,9,16,14,19,16,9,14,16],[14,16,0,14,19,16,0,13,3],[14,16,12,14,19,16,8,13,3],[9,16,1,14,16,9,14,19,16],[0,14,16,19,16,14],[19,16,14,16,12,14],[9,16,8,14,16,9,14,19,16],[0,14,16,19,16,14],[19,16,14,16,12,14],[13,10,11,16,13,11,16,11,19],[10,0,13,0,19,16,11,19,0],[10,8,13,9,19,12,11,19,9,12,19,16],[1,11,16,19,16,11],[0,19,16,0,11,19],[9,11,19,12,9,19,
12,19,16],[11,19,16,11,16,8],[0,19,16,0,11,19],[9,11,19,12,9,19,12,19,16],[10,2,13,13,2,16,2,19,16],[2,19,16,2,16,0,0,13,10],[2,19,12,12,19,16,8,13,10],[2,19,16,2,16,1],[0,2,16,19,16,2],[19,12,2,19,16,12],[2,19,16,2,16,8],[0,2,16,19,16,2],[19,12,2,19,16,12],[10,9,13,13,9,16,9,14,16,14,19,16],[14,16,0,14,19,16,0,13,10],[14,16,12,14,19,16,8,13,10],[9,16,1,14,16,9,14,19,16],[0,14,16,19,16,14],[19,16,14,16,12,14],[9,16,8,14,16,9,14,19,16],[0,14,16,19,16,14],[19,16,14,16,12,14],[4,13,15,4,15,19],[4,0,
19,0,15,19,0,13,15],[4,9,19,8,13,15,9,8,15,9,15,19],[4,15,19,4,1,15],[1,15,0,15,19,0,0,19,4],[1,15,9,9,19,4,15,19,9],[4,8,19,8,10,15,19,8,15],[10,15,0,15,19,0,0,19,4],[9,19,4,15,19,9,10,15,9],[4,2,19,4,13,2,2,13,15],[2,19,4,2,13,15,2,0,13],[2,19,4,2,8,15,8,13,15],[2,4,1,2,19,4,2,1,15],[1,15,2,19,4,2],[1,15,2,19,4,2],[2,4,8,2,19,4,2,10,15],[19,4,2,10,15,2],[19,4,2,10,15,2],[4,14,19,4,13,9,9,13,11,11,13,15],[11,0,13,11,13,15,14,19,4],[11,8,13,11,13,15,14,19,4],[9,4,1,11,1,15,14,19,4],[1,15,11,19,4,
14],[1,15,11,19,4,14],[9,4,8,11,10,15,14,19,4],[10,15,11,19,4,14],[10,15,11,19,4,14],[4,3,19,4,13,3],[3,19,0,3,0,13,19,4,0],[3,19,9,3,8,13,9,19,4],[3,4,1,3,19,4],[0,19,4,0,3,19],[19,9,3,19,4,9],[3,4,8,3,19,4],[0,19,4,0,3,19],[19,9,3,19,4,9],[3,2,13,13,2,4,2,19,4],[2,19,4,0,13,3],[2,19,4,8,13,3],[2,19,4,2,4,1],[19,4,2],[19,4,2],[2,19,4,2,4,8],[19,4,2],[19,4,2],[3,9,13,9,4,13,14,19,4],[0,13,3,14,19,4],[8,13,3,14,19,4],[9,4,1,14,19,4],[19,4,14],[19,4,14],[9,4,8,14,19,4],[19,4,14],[19,4,14],[4,11,19,
4,10,11,4,13,10],[11,19,4,11,4,0,10,0,13],[11,19,9,9,19,4,10,8,13],[11,19,4,11,4,1],[0,11,4,19,4,11],[19,9,11,19,4,9],[11,19,4,11,4,8],[0,11,4,19,4,11],[19,9,11,19,4,9],[10,4,13,10,2,4,2,19,4],[2,19,4,0,13,10],[2,19,4,8,13,10],[2,19,4,2,4,1],[19,4,2],[19,4,2],[2,19,4,2,4,8],[19,4,2],[19,4,2],[10,9,13,9,4,13,14,19,4],[0,13,10,14,19,4],[8,13,10,14,19,4],[9,4,1,14,19,4],[19,4,14],[19,4,14],[9,4,8,14,19,4],[19,4,14],[19,4,14],[13,15,12,15,17,12,15,19,17],[0,19,17,0,15,19,0,13,15],[8,13,15,9,8,15,9,15,
19,17,9,19],[12,1,15,12,15,17,17,15,19],[1,15,0,15,19,0,19,17,0],[1,15,9,9,19,17,15,19,9],[8,10,12,12,10,15,12,15,17,17,15,19],[10,15,0,15,19,0,19,17,0],[9,19,17,15,19,9,10,15,9],[12,13,2,2,13,15,17,2,19],[2,19,17,2,13,15,2,0,13],[2,19,17,2,8,15,8,13,15],[2,19,17,2,1,15,2,12,1],[1,15,2,19,17,2],[1,15,2,19,17,2],[2,19,17,2,10,15,2,12,8],[19,17,2,10,15,2],[19,17,2,10,15,2],[12,13,9,11,13,15,9,13,11,17,14,19],[11,0,13,11,13,15,14,19,17],[11,8,13,11,13,15,14,19,17],[9,12,1,11,1,15,14,19,17],[1,15,11,
19,17,14],[1,15,11,19,17,14],[9,12,8,11,10,15,14,19,17],[10,15,11,19,17,14],[10,15,11,19,17,14],[17,12,3,17,3,19,12,13,3],[3,19,17,3,17,0,3,0,13],[3,19,9,3,8,13,9,19,17],[3,19,17,3,17,12,3,12,1],[0,3,17,19,17,3],[19,9,3,19,17,9],[3,19,17,3,17,12,3,12,8],[0,3,17,19,17,3],[19,9,3,19,17,9],[3,12,13,3,2,12,2,19,17],[2,19,17,0,13,3],[2,19,17,8,13,3],[2,19,17,2,12,1],[19,17,2],[19,17,2],[2,19,17,2,12,8],[19,17,2],[19,17,2],[3,9,13,9,12,13,14,19,17],[0,13,3,14,19,17],[8,13,3,14,19,17],[9,12,1,14,19,17],
[19,17,14],[19,17,14],[9,12,8,14,19,17],[19,17,14],[19,17,14],[17,12,11,17,11,19,12,10,11,12,13,10],[11,17,0,11,19,17,10,0,13],[11,19,17,11,17,9,10,8,13],[11,17,12,11,19,17,11,12,1],[0,11,17,19,17,11],[19,17,11,17,9,11],[11,17,12,11,19,17,11,12,8],[0,11,17,19,17,11],[19,17,11,17,9,11],[10,2,12,10,12,13,2,19,17],[2,19,17,0,13,10],[2,19,17,8,13,10],[2,19,17,2,12,1],[19,17,2],[19,17,2],[2,19,17,2,12,8],[19,17,2],[19,17,2],[10,12,13,10,9,12,14,19,17],[0,13,10,14,19,17],[8,13,10,14,19,17],[9,12,1,14,19,
17],[19,17,14],[19,17,14],[9,12,8,14,19,17],[19,17,14],[19,17,14],[6,18,15],[6,0,15,6,18,0,0,18,15],[6,9,15,6,18,12,12,18,8,8,15,9,8,18,15],[6,1,15,6,18,1],[1,0,18,1,15,0,18,0,6,0,15,6],[1,12,18,1,15,9,12,6,18,15,6,9],[6,10,15,6,8,10,6,13,8,6,18,13],[13,6,18,13,0,6,0,10,6,15,6,10],[13,12,18,12,6,18,15,6,9,10,15,9],[6,18,2,2,18,15],[2,0,15,15,0,18,0,6,18],[2,8,15,8,12,18,15,8,18,12,6,18],[2,6,1,2,1,15,1,6,18],[1,15,2,1,0,18,18,0,6],[1,15,2,1,12,18,12,6,18],[2,6,8,2,10,15,8,6,13,13,6,18],[13,0,6,13,
6,18,10,15,2],[12,6,18,13,12,18,10,15,2],[6,18,9,11,9,15,15,9,18],[11,0,15,15,0,18,0,6,18],[8,12,18,15,8,18,11,8,15,12,6,18],[9,6,1,1,6,18,11,1,15],[1,15,11,1,0,18,18,0,6],[1,15,11,1,12,18,12,6,18],[9,6,8,8,6,13,11,10,15,13,6,18],[13,0,6,13,6,18,10,15,11],[12,6,18,13,12,18,10,15,11],[6,18,3],[3,6,0,3,0,18,0,6,18],[3,6,9,3,8,18,8,12,18,12,6,18],[3,6,1,1,6,18],[1,0,18,18,0,6,0,3,6],[1,12,18,12,6,18,9,3,6],[3,6,8,8,6,13,13,6,18],[13,0,6,13,6,18,0,3,6],[12,6,18,13,12,18,9,3,6],[3,2,18,2,6,18],[0,6,18,
0,18,3],[8,18,3,12,18,8,12,6,18],[2,6,1,1,6,18],[1,0,18,18,0,6],[1,12,18,12,6,18],[2,6,8,8,6,13,13,6,18],[13,0,6,13,6,18],[12,6,18,13,12,18],[3,9,18,18,9,6],[0,6,18,0,18,3],[8,18,3,12,18,8,12,6,18],[9,6,1,1,6,18],[1,0,18,18,0,6],[1,12,18,12,6,18],[8,6,13,9,6,8,13,6,18],[13,0,6,13,6,18],[12,6,18,13,12,18],[6,18,10,6,10,11],[11,6,0,0,6,18,10,0,18],[11,6,9,8,12,18,10,8,18,12,6,18],[11,6,1,1,6,18],[1,0,18,18,0,6,0,11,6],[1,12,18,12,6,18,9,11,6],[11,6,8,8,6,13,13,6,18],[13,0,6,13,6,18,0,11,6],[12,6,18,
13,12,18,9,11,6],[2,6,10,18,10,6],[0,6,18,0,18,10],[8,18,10,12,18,8,12,6,18],[2,6,1,1,6,18],[1,0,18,18,0,6],[1,12,18,12,6,18],[2,6,8,8,6,13,13,6,18],[13,0,6,13,6,18],[12,6,18,13,12,18],[18,9,6,10,9,18],[0,6,18,0,18,10],[8,18,10,12,18,8,12,6,18],[9,6,1,1,6,18],[1,0,18,18,0,6],[1,12,18,12,6,18],[8,6,13,9,6,8,13,6,18],[13,0,6,13,6,18],[12,6,18,13,12,18],[6,4,15,4,18,15],[4,18,0,0,18,15,0,15,6],[4,18,8,8,15,9,8,18,15,9,15,6],[4,1,6,4,18,1,1,15,6],[1,4,18,1,15,0,15,6,0],[1,4,18,1,15,9,9,15,6],[4,8,6,4,
18,13,8,10,6,10,15,6],[10,6,0,10,15,6,13,4,18],[9,15,6,10,15,9,13,4,18],[4,18,15,4,15,2],[2,0,15,15,0,18,0,4,18],[2,8,15,8,4,18,15,8,18],[2,4,1,2,1,15,1,4,18],[1,15,2,1,4,18],[1,15,2,1,4,18],[2,4,8,2,10,15,13,4,18],[10,15,2,13,4,18],[10,15,2,13,4,18],[4,18,9,9,15,11,18,15,9],[11,0,15,15,0,18,0,4,18],[8,4,18,15,8,18,11,8,15],[9,4,1,1,4,18,11,1,15],[1,15,11,1,4,18],[1,15,11,1,4,18],[9,4,8,11,10,15,13,4,18],[10,15,11,13,4,18],[10,15,11,13,4,18],[4,3,6,4,18,3],[3,0,18,3,6,0,18,0,4],[3,8,18,3,6,9,8,4,
18],[3,4,1,3,6,4,1,4,18],[1,4,18,0,3,6],[1,4,18,9,3,6],[3,6,8,8,6,4,13,4,18],[0,3,6,13,4,18],[9,3,6,13,4,18],[3,2,4,3,4,18],[0,4,18,0,18,3],[18,3,8,18,8,4],[2,4,1,1,4,18],[1,4,18],[1,4,18],[2,4,8,13,4,18],[13,4,18],[13,4,18],[3,9,4,3,4,18],[0,4,18,0,18,3],[18,3,8,18,8,4],[9,4,1,1,4,18],[1,4,18],[1,4,18],[9,4,8,13,4,18],[13,4,18],[13,4,18],[4,11,6,4,18,10,4,10,11],[10,4,18,10,0,4,11,6,0],[10,8,18,8,4,18,11,6,9],[11,6,4,11,4,1,1,4,18],[1,4,18,0,11,6],[1,4,18,9,11,6],[11,6,8,8,6,4,13,4,18],[0,11,6,13,
4,18],[9,11,6,13,4,18],[10,4,18,10,2,4],[0,4,10,18,10,4],[18,10,8,18,8,4],[2,4,1,1,4,18],[1,4,18],[1,4,18],[2,4,8,13,4,18],[13,4,18],[13,4,18],[10,4,18,10,9,4],[0,4,10,18,10,4],[18,10,8,18,8,4],[9,4,1,1,4,18],[1,4,18],[1,4,18],[9,4,8,13,4,18],[13,4,18],[13,4,18],[6,12,15,15,16,18,15,12,16],[0,16,18,0,18,15,0,15,6],[8,15,9,8,18,15,16,18,8,9,15,6],[12,1,6,1,15,6,16,18,1],[1,16,18,1,15,0,15,6,0],[1,16,18,1,15,9,9,15,6],[12,8,6,8,10,6,16,18,13,10,15,6],[10,6,0,10,15,6,13,16,18],[9,15,6,10,15,9,13,16,
18],[12,15,2,12,16,15,16,18,15],[2,0,15,15,0,18,18,0,16],[2,8,15,8,16,18,15,8,18],[2,1,15,2,12,1,1,16,18],[1,15,2,1,16,18],[1,15,2,1,16,18],[2,10,15,2,12,8,13,16,18],[10,15,2,13,16,18],[10,15,2,13,16,18],[9,12,11,12,15,11,12,16,15,16,18,15],[11,0,15,15,0,18,18,0,16],[8,16,18,15,8,18,11,8,15],[9,12,1,1,16,18,11,1,15],[1,15,11,1,16,18],[1,15,11,1,16,18],[9,12,8,11,10,15,13,16,18],[10,15,11,13,16,18],[10,15,11,13,16,18],[16,3,12,16,18,3,12,3,6],[3,16,18,3,0,16,3,6,0],[3,8,18,3,6,9,8,16,18],[3,6,12,3,
12,1,1,16,18],[1,16,18,0,3,6],[1,16,18,9,3,6],[3,6,8,13,16,18,8,6,12],[0,3,6,13,16,18],[9,3,6,13,16,18],[3,16,18,3,12,16,3,2,12],[0,16,3,18,3,16],[18,3,8,18,8,16],[2,12,1,1,16,18],[1,16,18],[1,16,18],[2,12,8,13,16,18],[13,16,18],[13,16,18],[3,16,18,3,12,16,3,9,12],[0,16,3,18,3,16],[18,3,8,18,8,16],[9,12,1,1,16,18],[1,16,18],[1,16,18],[9,12,8,13,16,18],[13,16,18],[13,16,18],[16,10,12,16,18,10,12,11,6,12,10,11],[10,0,16,10,16,18,11,6,0],[10,16,18,10,8,16,11,6,9],[11,12,1,11,6,12,1,16,18],[1,16,18,0,
11,6],[1,16,18,9,11,6],[11,6,12,11,12,8,13,16,18],[0,11,6,13,16,18],[9,11,6,13,16,18],[10,12,16,10,16,18,10,2,12],[0,16,10,18,10,16],[18,10,16,16,10,8],[2,12,1,1,16,18],[1,16,18],[1,16,18],[2,12,8,13,16,18],[13,16,18],[13,16,18],[10,12,16,10,16,18,10,9,12],[0,16,10,18,10,16],[18,10,16,16,10,8],[9,12,1,1,16,18],[1,16,18],[1,16,18],[9,12,8,13,16,18],[13,16,18],[13,16,18],[6,5,15],[5,0,6,5,15,0,0,15,6],[5,12,6,5,15,8,8,15,9,9,15,6],[5,1,6,1,15,6],[1,15,0,15,6,0,0,6,5],[1,15,9,9,15,6,12,6,5],[5,8,6,8,
10,6,10,15,6],[10,6,0,10,15,6,0,6,5],[9,15,6,10,15,9,12,6,5],[5,2,6,5,15,2],[2,0,15,15,0,5,0,6,5],[2,8,15,8,5,15,12,6,5],[2,5,1,2,6,5,2,1,15],[1,15,2,0,6,5],[1,15,2,12,6,5],[2,6,8,2,10,15,8,6,5],[0,6,5,10,15,2],[12,6,5,10,15,2],[5,9,6,5,15,11,5,11,9],[11,5,15,11,0,5,0,6,5],[11,8,15,8,5,15,12,6,5],[9,6,5,9,5,1,11,1,15],[1,15,11,0,6,5],[1,15,11,12,6,5],[9,6,8,8,6,5,11,10,15],[0,6,5,10,15,11],[12,6,5,10,15,11],[5,3,6],[3,0,5,3,6,0,0,6,5],[3,8,5,3,6,9,12,6,5],[3,6,1,1,6,5],[0,6,5,0,3,6],[9,3,6,12,6,5],
[3,6,8,8,6,5],[0,6,5,0,3,6],[9,3,6,12,6,5],[3,2,5,2,6,5],[6,5,0,0,5,3],[6,5,12,8,5,3],[2,6,5,2,5,1],[0,6,5],[12,6,5],[2,6,8,8,6,5],[0,6,5],[12,6,5],[3,9,5,9,6,5],[6,5,0,0,5,3],[6,5,12,8,5,3],[9,5,1,9,6,5],[0,6,5],[12,6,5],[8,6,5,9,6,8],[0,6,5],[12,6,5],[5,10,6,10,11,6],[10,0,5,0,6,5,11,6,0],[10,8,5,11,6,9,12,6,5],[11,6,1,1,6,5],[0,6,5,0,11,6],[9,11,6,12,6,5],[8,6,5,11,6,8],[0,6,5,0,11,6],[9,11,6,12,6,5],[10,2,5,2,6,5],[6,5,0,0,5,10],[6,5,12,8,5,10],[2,6,5,2,5,1],[0,6,5],[12,6,5],[2,6,8,8,6,5],[0,
6,5],[12,6,5],[10,9,5,9,6,5],[6,5,0,0,5,10],[6,5,12,8,5,10],[9,5,1,9,6,5],[0,6,5],[12,6,5],[8,6,5,9,6,8],[0,6,5],[12,6,5],[5,15,4,4,15,6],[0,15,6,0,5,15],[8,5,15,9,8,15,9,15,6],[4,1,6,1,15,6],[1,15,0,15,6,0],[1,15,9,9,15,6],[4,8,6,8,10,6,10,15,6],[10,6,0,10,15,6],[9,15,6,10,15,9],[4,5,2,2,5,15],[2,0,15,15,0,5],[2,8,15,8,5,15],[2,4,1,2,1,15],[1,15,2],[1,15,2],[2,4,8,2,10,15],[10,15,2],[10,15,2],[4,5,9,9,5,11,11,5,15],[11,0,5,11,5,15],[8,5,15,11,8,15],[9,4,1,11,1,15],[1,15,11],[1,15,11],[9,4,8,11,10,
15],[10,15,11],[10,15,11],[4,5,3,4,3,6],[3,6,0,3,0,5],[3,6,9,3,8,5],[3,4,1,3,6,4],[0,3,6],[9,3,6],[3,6,8,8,6,4],[0,3,6],[9,3,6],[3,2,4,3,4,5],[0,5,3],[8,5,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,5,9,4,5],[0,5,3],[8,5,3],[9,4,1],[],[],[9,4,8],[],[],[4,5,10,4,11,6,4,10,11],[11,6,0,10,0,5],[11,6,9,10,8,5],[11,6,4,11,4,1],[0,11,6],[9,11,6],[11,6,8,8,6,4],[0,11,6],[9,11,6],[10,4,5,10,2,4],[0,5,10],[8,5,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,5,9,4,5],[0,5,10],[8,5,10],[9,4,1],[],[],[9,4,8],[],[],[5,15,12,15,
6,12],[0,15,6,0,5,15],[8,5,15,9,8,15,9,15,6],[12,1,6,1,15,6],[1,15,0,15,6,0],[1,15,9,9,15,6],[8,10,6,12,8,6,10,15,6],[10,6,0,10,15,6],[9,15,6,10,15,9],[12,5,2,2,5,15],[2,0,15,15,0,5],[2,8,15,8,5,15],[2,1,15,2,12,1],[1,15,2],[1,15,2],[2,10,15,2,12,8],[10,15,2],[10,15,2],[12,5,9,9,5,11,11,5,15],[11,0,5,11,5,15],[8,5,15,11,8,15],[9,12,1,11,1,15],[1,15,11],[1,15,11],[9,12,8,11,10,15],[10,15,11],[10,15,11],[12,3,6,12,5,3],[3,6,0,3,0,5],[3,6,9,3,8,5],[3,6,12,3,12,1],[0,3,6],[9,3,6],[3,6,8,8,6,12],[0,3,
6],[9,3,6],[3,12,5,3,2,12],[0,5,3],[8,5,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,5,9,12,5],[0,5,3],[8,5,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,6,12,10,11,12,5,10],[11,6,0,10,0,5],[11,6,9,10,8,5],[11,12,1,11,6,12],[0,11,6],[9,11,6],[11,6,12,11,12,8],[0,11,6],[9,11,6],[10,2,12,10,12,5],[0,5,10],[8,5,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,5,10,9,12],[0,5,10],[8,5,10],[9,12,1],[],[],[9,12,8],[],[],[6,13,15,6,16,13],[16,0,6,0,15,6,13,15,0],[16,12,6,8,15,9,13,15,8,9,15,6],[16,1,6,1,15,6],[1,15,0,15,6,0,
0,6,16],[1,15,9,9,15,6,12,6,16],[16,8,6,8,10,6,10,15,6],[10,6,0,10,15,6,0,6,16],[9,15,6,10,15,9,12,6,16],[16,13,2,16,2,6,13,15,2],[2,13,15,2,0,13,0,6,16],[2,8,15,8,13,15,12,6,16],[2,6,16,2,16,1,2,1,15],[1,15,2,0,6,16],[1,15,2,12,6,16],[2,6,8,2,10,15,8,6,16],[0,6,16,10,15,2],[12,6,16,10,15,2],[16,13,9,16,9,6,13,11,9,13,15,11],[11,0,13,11,13,15,0,6,16],[11,13,15,11,8,13,12,6,16],[9,16,1,9,6,16,11,1,15],[1,15,11,0,6,16],[1,15,11,12,6,16],[9,6,16,9,16,8,11,10,15],[0,6,16,10,15,11],[12,6,16,10,15,11],
[16,13,6,13,3,6],[3,6,0,3,0,13,0,6,16],[3,6,9,3,8,13,12,6,16],[3,6,1,1,6,16],[0,6,16,0,3,6],[9,3,6,12,6,16],[3,6,8,8,6,16],[0,6,16,0,3,6],[9,3,6,12,6,16],[3,2,13,13,2,16,2,6,16],[6,16,0,0,13,3],[6,16,12,8,13,3],[2,6,16,2,16,1],[0,6,16],[12,6,16],[2,6,8,8,6,16],[0,6,16],[12,6,16],[3,9,13,13,9,16,9,6,16],[6,16,0,0,13,3],[6,16,12,8,13,3],[9,16,1,9,6,16],[0,6,16],[12,6,16],[9,16,8,9,6,16],[0,6,16],[12,6,16],[13,11,16,10,11,13,16,11,6],[10,0,13,0,6,16,11,6,0],[10,8,13,11,6,9,12,6,16],[11,6,1,1,6,16],[0,
6,16,0,11,6],[9,11,6,12,6,16],[8,6,16,11,6,8],[0,6,16,0,11,6],[9,11,6,12,6,16],[10,2,13,13,2,16,2,6,16],[6,16,0,0,13,10],[6,16,12,8,13,10],[2,6,16,2,16,1],[0,6,16],[12,6,16],[2,6,8,8,6,16],[0,6,16],[12,6,16],[10,9,13,13,9,16,9,6,16],[6,16,0,0,13,10],[6,16,12,8,13,10],[9,16,1,9,6,16],[0,6,16],[12,6,16],[9,16,8,9,6,16],[0,6,16],[12,6,16],[4,13,6,15,6,13],[0,15,6,0,13,15],[8,13,15,9,8,15,9,15,6],[4,1,6,1,15,6],[1,15,0,15,6,0],[1,15,9,9,15,6],[4,8,6,8,10,6,10,15,6],[10,6,0,10,15,6],[9,15,6,10,15,9],[4,
13,2,2,13,15],[2,13,15,2,0,13],[2,8,15,8,13,15],[2,4,1,2,1,15],[1,15,2],[1,15,2],[2,4,8,2,10,15],[10,15,2],[10,15,2],[4,13,9,9,13,11,11,13,15],[11,0,13,11,13,15],[11,8,13,11,13,15],[9,4,1,11,1,15],[1,15,11],[1,15,11],[9,4,8,11,10,15],[10,15,11],[10,15,11],[4,3,6,4,13,3],[3,6,0,3,0,13],[3,6,9,3,8,13],[3,4,1,3,6,4],[0,3,6],[9,3,6],[3,6,8,8,6,4],[0,3,6],[9,3,6],[3,2,13,13,2,4],[0,13,3],[8,13,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,13,9,4,13],[0,13,3],[8,13,3],[9,4,1],[],[],[9,4,8],[],[],[4,11,6,4,10,11,
4,13,10],[11,6,0,10,0,13],[11,6,9,10,8,13],[11,6,4,11,4,1],[0,11,6],[9,11,6],[11,6,8,8,6,4],[0,11,6],[9,11,6],[10,4,13,10,2,4],[0,13,10],[8,13,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,13,9,4,13],[0,13,10],[8,13,10],[9,4,1],[],[],[9,4,8],[],[],[15,6,12,13,15,12],[0,15,6,0,13,15],[8,13,15,9,8,15,9,15,6],[12,1,6,1,15,6],[1,15,0,15,6,0],[1,15,9,9,15,6],[8,10,6,12,8,6,10,15,6],[10,6,0,10,15,6],[9,15,6,10,15,9],[12,13,2,2,13,15],[2,13,15,2,0,13],[2,8,15,8,13,15],[2,1,15,2,12,1],[1,15,2],[1,15,2],[2,10,15,
2,12,8],[10,15,2],[10,15,2],[12,13,9,11,13,15,9,13,11],[11,0,13,11,13,15],[11,8,13,11,13,15],[9,12,1,11,1,15],[1,15,11],[1,15,11],[9,12,8,11,10,15],[10,15,11],[10,15,11],[12,3,6,12,13,3],[3,6,0,3,0,13],[3,6,9,3,8,13],[3,6,12,3,12,1],[0,3,6],[9,3,6],[3,6,8,8,6,12],[0,3,6],[9,3,6],[3,12,13,3,2,12],[0,13,3],[8,13,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,13,9,12,13],[0,13,3],[8,13,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,6,12,10,11,12,13,10],[11,6,0,10,0,13],[11,6,9,10,8,13],[11,12,1,11,6,12],[0,11,6],[9,
11,6],[11,6,12,11,12,8],[0,11,6],[9,11,6],[10,2,12,10,12,13],[0,13,10],[8,13,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,13,10,9,12],[0,13,10],[8,13,10],[9,12,1],[],[],[9,12,8],[],[],[15,14,17,18,15,17],[17,18,0,0,18,15,0,15,14],[17,18,12,8,18,15,12,18,8,8,15,9,14,9,15],[17,1,14,17,18,1,1,15,14],[1,17,18,1,0,17,1,14,0,1,15,14],[1,12,18,1,15,9,12,17,18,15,14,9],[17,8,14,17,13,8,17,18,13,14,8,10,14,10,15],[13,0,17,13,17,18,0,10,14,15,14,10],[13,17,18,13,12,17,10,15,14,10,14,9],[2,17,18,2,18,15],[2,0,15,
15,0,18,0,17,18],[2,8,15,8,12,18,15,8,18,12,17,18],[2,1,15,2,17,1,1,17,18],[1,15,2,1,17,18,1,0,17],[1,15,2,1,12,18,12,17,18],[2,10,15,2,17,8,8,17,13,13,17,18],[13,0,17,13,17,18,10,15,2],[13,12,17,13,17,18,10,15,2],[11,9,15,15,9,18,17,18,9],[11,0,15,15,0,18,0,17,18],[8,12,18,15,8,18,11,8,15,12,17,18],[9,17,1,1,17,18,11,1,15],[1,15,11,1,17,18,1,0,17],[1,15,11,1,12,18,12,17,18],[9,17,8,13,17,18,8,17,13,11,10,15],[13,0,17,13,17,18,10,15,11],[13,12,17,13,17,18,10,15,11],[14,17,3,3,17,18],[3,0,18,3,14,
0,0,17,18],[3,8,18,3,14,9,8,12,18,12,17,18],[3,14,1,14,17,1,1,17,18],[1,17,18,1,0,17,0,3,14],[1,12,18,12,17,18,9,3,14],[3,14,8,14,17,8,13,17,18,8,17,13],[13,0,17,13,17,18,0,3,14],[13,12,17,13,17,18,9,3,14],[3,17,18,3,2,17],[0,17,18,0,18,3],[8,18,3,12,18,8,12,17,18],[2,17,1,1,17,18],[1,17,18,1,0,17],[1,12,18,12,17,18],[2,17,8,8,17,13,13,17,18],[13,0,17,13,17,18],[13,12,17,13,17,18],[3,9,18,18,9,17],[0,17,18,0,18,3],[8,18,3,12,18,8,12,17,18],[9,17,1,1,17,18],[1,17,18,1,0,17],[1,12,18,12,17,18],[8,17,
13,9,17,8,13,17,18],[13,0,17,13,17,18],[13,12,17,13,17,18],[14,10,11,17,10,14,17,18,10],[11,14,0,0,17,18,10,0,18],[11,14,9,8,12,18,10,8,18,12,17,18],[11,14,1,14,17,1,1,17,18],[1,17,18,1,0,17,0,11,14],[1,12,18,12,17,18,9,11,14],[11,14,8,14,17,8,8,17,13,13,17,18],[13,0,17,13,17,18,0,11,14],[13,12,17,13,17,18,9,11,14],[2,17,10,18,10,17],[0,17,18,0,18,10],[8,18,10,12,18,8,12,17,18],[2,17,1,1,17,18],[1,17,18,1,0,17],[1,12,18,12,17,18],[2,17,8,8,17,13,13,17,18],[13,0,17,13,17,18],[13,12,17,13,17,18],[10,
17,18,10,9,17],[0,17,18,0,18,10],[8,18,10,12,18,8,12,17,18],[9,17,1,1,17,18],[1,17,18,1,0,17],[1,12,18,12,17,18],[8,17,13,9,17,8,13,17,18],[13,0,17,13,17,18],[13,12,17,13,17,18],[4,15,14,4,18,15],[4,18,0,0,18,15,0,15,14],[4,18,8,8,15,9,8,18,15,9,15,14],[4,18,1,4,1,14,1,15,14],[1,4,18,1,15,14,1,14,0],[1,4,18,1,15,9,9,15,14],[4,18,13,4,8,14,8,10,14,10,15,14],[10,14,0,10,15,14,13,4,18],[10,14,9,10,15,14,13,4,18],[4,18,15,4,15,2],[2,0,15,15,0,18,0,4,18],[2,8,15,8,4,18,15,8,18],[2,4,1,2,1,15,1,4,18],[1,
15,2,1,4,18],[1,15,2,1,4,18],[2,4,8,2,10,15,13,4,18],[10,15,2,13,4,18],[10,15,2,13,4,18],[4,18,9,9,15,11,18,15,9],[11,0,15,15,0,18,0,4,18],[8,4,18,15,8,18,11,8,15],[9,4,1,1,4,18,11,1,15],[1,15,11,1,4,18],[1,15,11,1,4,18],[9,4,8,11,10,15,13,4,18],[10,15,11,13,4,18],[10,15,11,13,4,18],[4,18,3,4,3,14],[3,0,18,3,14,0,18,0,4],[3,8,18,3,14,9,8,4,18],[3,14,1,14,4,1,1,4,18],[1,4,18,0,3,14],[1,4,18,9,3,14],[3,14,8,8,14,4,13,4,18],[0,3,14,13,4,18],[9,3,14,13,4,18],[3,2,4,3,4,18],[0,4,18,0,18,3],[18,3,8,18,
8,4],[2,4,1,1,4,18],[1,4,18],[1,4,18],[2,4,8,13,4,18],[13,4,18],[13,4,18],[3,9,4,3,4,18],[0,4,18,0,18,3],[18,3,8,18,8,4],[9,4,1,1,4,18],[1,4,18],[1,4,18],[9,4,8,13,4,18],[13,4,18],[13,4,18],[4,18,10,4,10,11,4,11,14],[10,4,18,10,0,4,11,14,0],[10,8,18,8,4,18,11,14,9],[11,14,4,11,4,1,1,4,18],[1,4,18,0,11,14],[1,4,18,9,11,14],[11,14,8,8,14,4,13,4,18],[0,11,14,13,4,18],[9,11,14,13,4,18],[10,4,18,10,2,4],[0,4,10,18,10,4],[18,10,8,18,8,4],[2,4,1,1,4,18],[1,4,18],[1,4,18],[2,4,8,13,4,18],[13,4,18],[13,4,
18],[10,4,18,10,9,4],[0,4,10,18,10,4],[18,10,8,18,8,4],[9,4,1,1,4,18],[1,4,18],[1,4,18],[9,4,8,13,4,18],[13,4,18],[13,4,18],[14,12,15,15,12,16,15,16,18],[0,16,18,0,18,15,0,15,14],[8,15,9,8,18,15,16,18,8,9,15,14],[12,1,14,1,15,14,16,18,1],[1,16,18,1,15,14,1,14,0],[1,16,18,1,15,9,9,15,14],[12,8,14,10,15,14,8,10,14,16,18,13],[10,14,0,10,15,14,13,16,18],[10,14,9,10,15,14,13,16,18],[12,15,2,12,16,15,16,18,15],[2,0,15,15,0,18,18,0,16],[2,8,15,8,16,18,15,8,18],[2,1,15,2,12,1,1,16,18],[1,15,2,1,16,18],[1,
15,2,1,16,18],[2,10,15,2,12,8,13,16,18],[10,15,2,13,16,18],[10,15,2,13,16,18],[9,12,11,12,15,11,12,16,15,16,18,15],[11,0,15,15,0,18,18,0,16],[8,16,18,15,8,18,11,8,15],[9,12,1,1,16,18,11,1,15],[1,15,11,1,16,18],[1,15,11,1,16,18],[9,12,8,11,10,15,13,16,18],[10,15,11,13,16,18],[10,15,11,13,16,18],[16,3,12,16,18,3,12,3,14],[3,16,18,3,0,16,3,14,0],[3,8,18,3,14,9,8,16,18],[3,14,12,3,12,1,1,16,18],[1,16,18,0,3,14],[1,16,18,9,3,14],[3,14,8,8,14,12,13,16,18],[0,3,14,13,16,18],[9,3,14,13,16,18],[3,16,18,3,
12,16,3,2,12],[0,16,3,18,3,16],[18,3,8,18,8,16],[2,12,1,1,16,18],[1,16,18],[1,16,18],[2,12,8,13,16,18],[13,16,18],[13,16,18],[3,16,18,3,12,16,3,9,12],[0,16,3,18,3,16],[18,3,8,18,8,16],[9,12,1,1,16,18],[1,16,18],[1,16,18],[9,12,8,13,16,18],[13,16,18],[13,16,18],[16,10,12,16,18,10,12,11,14,12,10,11],[10,0,16,10,16,18,11,14,0],[10,16,18,10,8,16,11,14,9],[11,12,1,11,14,12,1,16,18],[1,16,18,0,11,14],[1,16,18,9,11,14],[11,14,12,11,12,8,13,16,18],[0,11,14,13,16,18],[9,11,14,13,16,18],[10,12,16,10,16,18,
10,2,12],[0,16,10,18,10,16],[18,10,16,16,10,8],[2,12,1,1,16,18],[1,16,18],[1,16,18],[2,12,8,13,16,18],[13,16,18],[13,16,18],[10,12,16,10,16,18,10,9,12],[0,16,10,18,10,16],[18,10,16,16,10,8],[9,12,1,1,16,18],[1,16,18],[1,16,18],[9,12,8,13,16,18],[13,16,18],[13,16,18],[17,5,14,5,15,14],[5,15,0,5,0,17,0,15,14],[5,15,8,5,12,17,8,15,9,9,15,14],[5,1,17,1,14,17,1,15,14],[1,15,14,1,14,0,0,17,5],[1,15,9,9,15,14,12,17,5],[5,8,17,8,14,17,8,10,14,10,15,14],[10,14,0,10,15,14,0,17,5],[10,14,9,10,15,14,12,17,5],
[5,15,2,5,2,17],[2,0,15,15,0,5,0,17,5],[2,8,15,8,5,15,12,17,5],[2,17,1,2,1,15,17,5,1],[1,15,2,0,17,5],[1,15,2,12,17,5],[2,17,8,2,10,15,8,17,5],[0,17,5,10,15,2],[12,17,5,10,15,2],[5,15,11,5,11,9,5,9,17],[11,5,15,11,0,5,0,17,5],[11,8,15,8,5,15,12,17,5],[9,17,5,9,5,1,11,1,15],[1,15,11,0,17,5],[1,15,11,12,17,5],[9,17,8,8,17,5,11,10,15],[0,17,5,10,15,11],[12,17,5,10,15,11],[5,3,14,5,14,17],[3,0,5,3,14,0,0,17,5],[3,8,5,3,14,9,12,17,5],[3,14,1,14,17,1,1,17,5],[0,17,5,0,3,14],[9,3,14,12,17,5],[3,14,8,8,17,
5,14,17,8],[0,17,5,0,3,14],[9,3,14,12,17,5],[3,2,5,2,17,5],[0,5,3,17,5,0],[8,5,3,17,5,12],[2,17,1,17,5,1],[0,17,5],[12,17,5],[2,17,8,8,17,5],[0,17,5],[12,17,5],[3,9,5,9,17,5],[0,5,3,17,5,0],[8,5,3,17,5,12],[9,5,1,9,17,5],[0,17,5],[12,17,5],[8,17,5,9,17,8],[0,17,5],[12,17,5],[5,10,17,17,10,14,10,11,14],[10,0,5,0,17,5,11,14,0],[10,8,5,11,14,9,12,17,5],[11,14,1,14,17,1,1,17,5],[0,17,5,0,11,14],[9,11,14,12,17,5],[8,17,5,14,17,8,11,14,8],[0,17,5,0,11,14],[9,11,14,12,17,5],[10,2,5,2,17,5],[0,5,10,17,5,
0],[17,5,12,8,5,10],[2,17,1,17,5,1],[0,17,5],[12,17,5],[2,17,8,8,17,5],[0,17,5],[12,17,5],[10,9,5,9,17,5],[0,5,10,17,5,0],[17,5,12,8,5,10],[9,5,1,9,17,5],[0,17,5],[12,17,5],[8,17,5,9,17,8],[0,17,5],[12,17,5],[5,15,14,5,14,4],[0,15,14,0,5,15],[8,5,15,9,8,15,9,15,14],[4,1,14,1,15,14],[1,15,14,1,14,0],[1,15,9,9,15,14],[4,8,14,8,10,14,10,15,14],[10,14,0,10,15,14],[10,14,9,10,15,14],[4,5,2,2,5,15],[2,0,15,15,0,5],[2,8,15,8,5,15],[2,4,1,2,1,15],[1,15,2],[1,15,2],[2,4,8,2,10,15],[10,15,2],[10,15,2],[4,5,
9,9,5,11,11,5,15],[11,0,5,11,5,15],[8,5,15,11,8,15],[9,4,1,11,1,15],[1,15,11],[1,15,11],[9,4,8,11,10,15],[10,15,11],[10,15,11],[4,5,3,4,3,14],[3,14,0,3,0,5],[3,14,9,3,8,5],[3,14,1,14,4,1],[0,3,14],[9,3,14],[3,14,8,8,14,4],[0,3,14],[9,3,14],[3,2,4,3,4,5],[0,5,3],[8,5,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,5,9,4,5],[0,5,3],[8,5,3],[9,4,1],[],[],[9,4,8],[],[],[4,5,10,4,11,14,4,10,11],[11,14,0,10,0,5],[11,14,9,10,8,5],[11,14,4,11,4,1],[0,11,14],[9,11,14],[11,14,8,8,14,4],[0,11,14],[9,11,14],[10,4,5,10,2,
4],[0,5,10],[8,5,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,5,9,4,5],[0,5,10],[8,5,10],[9,4,1],[],[],[9,4,8],[],[],[5,15,12,15,14,12],[0,15,14,0,5,15],[8,5,15,9,8,15,9,15,14],[12,1,14,1,15,14],[1,15,14,1,14,0],[1,15,9,9,15,14],[8,10,14,12,8,14,10,15,14],[10,14,0,10,15,14],[10,14,9,10,15,14],[12,5,2,2,5,15],[2,0,15,15,0,5],[2,8,15,8,5,15],[2,1,15,2,12,1],[1,15,2],[1,15,2],[2,10,15,2,12,8],[10,15,2],[10,15,2],[12,5,9,9,5,11,11,5,15],[11,0,5,11,5,15],[8,5,15,11,8,15],[9,12,1,11,1,15],[1,15,11],[1,15,11],
[9,12,8,11,10,15],[10,15,11],[10,15,11],[12,3,14,12,5,3],[3,14,0,3,0,5],[3,14,9,3,8,5],[3,14,12,3,12,1],[0,3,14],[9,3,14],[3,14,8,8,14,12],[0,3,14],[9,3,14],[3,12,5,3,2,12],[0,5,3],[8,5,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,5,9,12,5],[0,5,3],[8,5,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,14,12,10,11,12,5,10],[11,14,0,10,0,5],[11,14,9,10,8,5],[11,12,1,11,14,12],[0,11,14],[9,11,14],[11,14,12,11,12,8],[0,11,14],[9,11,14],[10,2,12,10,12,5],[0,5,10],[8,5,10],[2,12,1],[],[],[2,12,8],[],[],[10,12,5,10,9,12],
[0,5,10],[8,5,10],[9,12,1],[],[],[9,12,8],[],[],[16,13,14,17,16,14,14,13,15],[16,0,17,0,15,14,13,15,0],[16,12,17,8,15,9,13,15,8,9,15,14],[1,17,16,1,14,17,1,15,14],[1,15,14,1,14,0,0,17,16],[1,15,9,9,15,14,12,17,16],[16,8,17,8,14,17,8,10,14,10,15,14],[10,14,0,10,15,14,0,17,16],[10,14,9,10,15,14,12,17,16],[16,13,2,16,2,17,13,15,2],[2,13,15,2,0,13,0,17,16],[2,8,15,8,13,15,12,17,16],[2,17,16,2,16,1,2,1,15],[1,15,2,0,17,16],[1,15,2,12,17,16],[2,17,8,2,10,15,8,17,16],[0,17,16,10,15,2],[12,17,16,10,15,2],
[16,13,9,16,9,17,13,11,9,13,15,11],[11,0,13,11,13,15,0,17,16],[11,13,15,11,8,13,12,17,16],[9,16,1,9,17,16,11,1,15],[1,15,11,0,17,16],[1,15,11,12,17,16],[9,17,16,9,16,8,11,10,15],[0,17,16,10,15,11],[12,17,16,10,15,11],[13,14,16,13,3,14,16,14,17],[3,14,0,3,0,13,0,17,16],[3,14,9,3,8,13,12,17,16],[3,14,1,14,17,1,17,16,1],[0,17,16,0,3,14],[9,3,14,12,17,16],[3,14,8,8,17,16,14,17,8],[0,17,16,0,3,14],[9,3,14,12,17,16],[3,2,13,13,2,16,2,17,16],[0,13,3,17,16,0],[8,13,3,17,16,12],[2,17,16,2,16,1],[0,17,16],
[12,17,16],[2,17,8,8,17,16],[0,17,16],[12,17,16],[3,9,13,13,9,16,9,17,16],[0,13,3,17,16,0],[8,13,3,17,16,12],[9,16,1,9,17,16],[0,17,16],[12,17,16],[9,16,8,9,17,16],[0,17,16],[12,17,16],[13,14,16,13,11,14,10,11,13,16,14,17],[10,0,13,0,17,16,11,14,0],[10,8,13,11,14,9,12,17,16],[11,14,1,14,17,1,17,16,1],[0,17,16,0,11,14],[9,11,14,12,17,16],[8,17,16,14,17,8,11,14,8],[0,17,16,0,11,14],[9,11,14,12,17,16],[10,2,13,13,2,16,2,17,16],[0,13,10,17,16,0],[17,16,12,8,13,10],[2,17,16,2,16,1],[0,17,16],[12,17,16],
[2,17,8,8,17,16],[0,17,16],[12,17,16],[10,9,13,13,9,16,9,17,16],[0,13,10,17,16,0],[17,16,12,8,13,10],[9,16,1,9,17,16],[0,17,16],[12,17,16],[9,16,8,9,17,16],[0,17,16],[12,17,16],[4,13,14,15,14,13],[0,15,14,0,13,15],[8,13,15,9,8,15,9,15,14],[4,1,14,1,15,14],[1,15,14,1,14,0],[1,15,9,9,15,14],[4,8,14,8,10,14,10,15,14],[10,14,0,10,15,14],[10,14,9,10,15,14],[4,13,2,2,13,15],[2,13,15,2,0,13],[2,8,15,8,13,15],[2,4,1,2,1,15],[1,15,2],[1,15,2],[2,4,8,2,10,15],[10,15,2],[10,15,2],[4,13,9,9,13,11,11,13,15],[11,
0,13,11,13,15],[11,8,13,11,13,15],[9,4,1,11,1,15],[1,15,11],[1,15,11],[9,4,8,11,10,15],[10,15,11],[10,15,11],[4,3,14,4,13,3],[3,14,0,3,0,13],[3,14,9,3,8,13],[3,14,1,14,4,1],[0,3,14],[9,3,14],[3,14,8,8,14,4],[0,3,14],[9,3,14],[3,2,13,13,2,4],[0,13,3],[8,13,3],[2,4,1],[],[],[2,4,8],[],[],[3,9,13,9,4,13],[0,13,3],[8,13,3],[9,4,1],[],[],[9,4,8],[],[],[4,11,14,4,10,11,4,13,10],[11,14,0,10,0,13],[11,14,9,10,8,13],[11,14,4,11,4,1],[0,11,14],[9,11,14],[11,14,8,8,14,4],[0,11,14],[9,11,14],[10,4,13,10,2,4],
[0,13,10],[8,13,10],[2,4,1],[],[],[2,4,8],[],[],[10,9,13,9,4,13],[0,13,10],[8,13,10],[9,4,1],[],[],[9,4,8],[],[],[13,15,14,13,14,12],[0,15,14,0,13,15],[8,13,15,9,8,15,9,15,14],[12,1,14,1,15,14],[1,15,14,1,14,0],[1,15,9,9,15,14],[8,10,14,12,8,14,10,15,14],[10,14,0,10,15,14],[10,14,9,10,15,14],[12,13,2,2,13,15],[2,13,15,2,0,13],[2,8,15,8,13,15],[2,1,15,2,12,1],[1,15,2],[1,15,2],[2,10,15,2,12,8],[10,15,2],[10,15,2],[12,13,9,11,13,15,9,13,11],[11,0,13,11,13,15],[11,8,13,11,13,15],[9,12,1,11,1,15],[1,
15,11],[1,15,11],[9,12,8,11,10,15],[10,15,11],[10,15,11],[12,3,14,12,13,3],[3,14,0,3,0,13],[3,14,9,3,8,13],[3,14,12,3,12,1],[0,3,14],[9,3,14],[3,14,8,8,14,12],[0,3,14],[9,3,14],[3,12,13,3,2,12],[0,13,3],[8,13,3],[2,12,1],[],[],[2,12,8],[],[],[3,9,13,9,12,13],[0,13,3],[8,13,3],[9,12,1],[],[],[9,12,8],[],[],[12,11,14,12,10,11,12,13,10],[11,14,0,10,0,13],[11,14,9,10,8,13],[11,12,1,11,14,12],[0,11,14],[9,11,14],[11,14,12,11,12,8],[0,11,14],[9,11,14],[10,2,12,10,12,13],[0,13,10],[8,13,10],[2,12,1],[],
[],[2,12,8],[],[],[10,12,13,10,9,12],[0,13,10],[8,13,10],[9,12,1],[],[],[9,12,8],[],[]];
}).call(this);//# sourceMappingURL=CindyPrint.js.map

